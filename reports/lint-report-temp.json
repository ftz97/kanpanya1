[{"filePath":"/Users/frantz/Desktop/padavwa/src/__tests__/api/health.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/__tests__/api/hello.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/__tests__/components/Layout.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/__tests__/components/Modal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/__tests__/hooks/useScratchAvailability.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/__tests__/hooks/useScratchState.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/__tests__/integrations/mapbox.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/__tests__/integrations/supabase.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/__tests__/pages/home.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/__tests__/pages/simple.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/__tests__/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/__tests__/utils/supabase.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/actions/auth.signin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/actions/offers.create.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/actions/offers.list.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/(with-header)/carte/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/(with-header)/commercants/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/(with-header)/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/(with-header)/offres/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/(with-header)/plus/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'href' is defined but never used. Allowed unused args must match /^_/u.","line":76,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Settings, HelpCircle, Info, Shield, Gift, Users } from \"lucide-react\";\n\nexport default function PlusPage() {\n  return (\n    <div className=\"container max-w-6xl mx-auto px-4 space-y-8\">\n      <section className=\"space-y-4\">\n        <h1 className=\"text-3xl font-bold\">Plus d&apos;options</h1>\n        <p className=\"text-muted-foreground\">\n          Gérez votre compte et découvrez toutes les fonctionnalités de Kanpanya\n        </p>\n      </section>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <OptionCard \n          icon={<Settings className=\"size-6\" />}\n          title=\"Paramètres\"\n          description=\"Gérez vos préférences et informations personnelles\"\n          href=\"#\"\n        />\n        <OptionCard \n          icon={<HelpCircle className=\"size-6\" />}\n          title=\"Aide & Support\"\n          description=\"Consultez la FAQ et contactez notre équipe\"\n          href=\"#\"\n        />\n        <OptionCard \n          icon={<Info className=\"size-6\" />}\n          title=\"À propos\"\n          description=\"Découvrez l'histoire et la mission de Kanpanya\"\n          href=\"#\"\n        />\n        <OptionCard \n          icon={<Shield className=\"size-6\" />}\n          title=\"Confidentialité\"\n          description=\"Consultez notre politique de confidentialité\"\n          href=\"#\"\n        />\n        <OptionCard \n          icon={<Gift className=\"size-6\" />}\n          title=\"Programme de fidélité\"\n          description=\"Découvrez comment gagner plus de points\"\n          href=\"#\"\n        />\n        <OptionCard \n          icon={<Users className=\"size-6\" />}\n          title=\"Communauté\"\n          description=\"Rejoignez notre communauté d'utilisateurs\"\n          href=\"#\"\n        />\n      </div>\n\n      <section className=\"rounded-2xl p-8 border bg-white shadow-[0_18px_40px_-16px_rgba(15,23,42,.15)]\">\n        <h2 className=\"text-2xl font-semibold text-center kp-text-mint-600 mb-4\">Besoin d&apos;aide ?</h2>\n        <p className=\"text-center text-muted-foreground mb-6\">\n          Notre équipe est là pour vous accompagner dans votre expérience Kanpanya\n        </p>\n        <div className=\"flex justify-center gap-4\">\n          <button className=\"kp-btn-green rounded-full px-6 h-11\">\n            Contacter le support\n          </button>\n          <button className=\"rounded-full px-6 h-11 border\">\n            Voir la FAQ\n          </button>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nfunction OptionCard({ \n  icon, \n  title, \n  description, \n  href \n}: {\n  icon: React.ReactNode;\n  title: string;\n  description: string;\n  href: string;\n}) {\n  return (\n    <div className=\"rounded-2xl p-6 border bg-white shadow-[0_18px_40px_-16px_rgba(15,23,42,.15)] hover:shadow-[0_20px_50px_-20px_rgba(15,23,42,.25)] transition-shadow\">\n      <div className=\"flex items-start gap-4\">\n        <div className=\"kp-text-mint-600\">\n          {icon}\n        </div>\n        <div className=\"flex-1\">\n          <h3 className=\"font-semibold text-lg mb-2\">{title}</h3>\n          <p className=\"text-muted-foreground text-sm mb-4\">{description}</p>\n          <button className=\"kp-text-mint-600 text-sm font-medium hover:text-[hsl(var(--kp-mint-600))]\">\n            En savoir plus →\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/[lang]/flash-offers/ClientBlock.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/[lang]/flash-offers/OffersList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/[lang]/flash-offers/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/[lang]/i18n-diagnostics/DiagnosticsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/[lang]/i18n-diagnostics/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/[lang]/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/admin%20-%20Dashboard%20Admin/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/ai-insight/adm/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/ai-insight/collectivite/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/ai-insight/professionnel/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/ai-insight/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/geocoding/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'country' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":9,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\n// API Mapbox Geocoding pour recherche intelligente\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const query = searchParams.get('q');\n    const limit = searchParams.get('limit') || '10';\n    const country = searchParams.get('country') || 'MQ'; // Martinique\n    const types = searchParams.get('types') || 'place,locality,neighborhood,address,poi';\n\n    if (!query || query.length < 2) {\n      return NextResponse.json({\n        success: false,\n        error: 'Requête trop courte (minimum 2 caractères)'\n      }, { status: 400 });\n    }\n\n    const mapboxToken = process.env.NEXT_PUBLIC_MAPBOX_TOKEN;\n    if (!mapboxToken) {\n      throw new Error('Token Mapbox manquant');\n    }\n\n    // Construire l'URL Mapbox Geocoding - Recherche mondiale\n    const mapboxUrl = new URL('https://api.mapbox.com/geocoding/v5/mapbox.places');\n    mapboxUrl.pathname += `/${encodeURIComponent(query)}.json`;\n    mapboxUrl.searchParams.set('access_token', mapboxToken);\n    mapboxUrl.searchParams.set('types', types);\n    mapboxUrl.searchParams.set('limit', limit);\n    mapboxUrl.searchParams.set('language', 'fr');\n    mapboxUrl.searchParams.set('autocomplete', 'true');\n    mapboxUrl.searchParams.set('fuzzyMatch', 'true');\n\n    const response = await fetch(mapboxUrl.toString());\n\n    if (!response.ok) {\n      throw new Error(`Erreur Mapbox: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    // Transformer les résultats Mapbox en format standardisé\n    const results = data.features.map((feature: unknown) => {\n      // Déterminer le type basé sur les propriétés Mapbox\n      let itemType = 'lieu';\n      const placeType = feature.place_type?.[0];\n      \n      if (placeType === 'place' && feature.properties?.category === 'place') {\n        itemType = 'commune';\n      } else if (placeType === 'locality') {\n        itemType = 'quartier';\n      } else if (placeType === 'address') {\n        itemType = 'rue';\n      } else if (placeType === 'poi') {\n        itemType = 'lieu';\n      } else if (placeType === 'neighborhood') {\n        itemType = 'quartier';\n      }\n\n      // Extraire les informations d'adresse\n      const context = feature.context || [];\n      const city = context.find((c: unknown) => c.id.startsWith('place.'))?.text || \n                   context.find((c: unknown) => c.id.startsWith('locality.'))?.text;\n      const region = context.find((c: unknown) => c.id.startsWith('region.'))?.text;\n      const country = context.find((c: unknown) => c.id.startsWith('country.'))?.text;\n\n      return {\n        id: feature.id,\n        name: feature.text,\n        type: itemType,\n        coordinates: feature.center,\n        address: feature.place_name,\n        // Informations structurées\n        address_details: {\n          city: city,\n          region: region,\n          country: country,\n          postcode: feature.properties?.address\n        },\n      // Propriétés Mapbox\n      relevance: feature.relevance,\n      category: feature.properties?.category,\n      maki: feature.properties?.maki, // Icône\n      // Informations additionnelles\n      bbox: feature.bbox,\n      place_type: feature.place_type,\n      // Score de pertinence\n      score: feature.relevance * 100,\n      // Indicateur de localisation\n      is_martinique: feature.context?.some((c: unknown) => c.id.startsWith('country.') && c.text === 'Martinique') || false\n      };\n    });\n\n    return NextResponse.json({\n      success: true,\n      results: results,\n      total: results.length,\n      query: query,\n      attribution: '© Mapbox © OpenStreetMap',\n      // Métadonnées\n      metadata: {\n        source: 'mapbox',\n        search_scope: 'worldwide',\n        types: types,\n        language: 'fr'\n      }\n    });\n\n  } catch (error) {\n    console.error('Erreur geocoding:', error);\n    return NextResponse.json({\n      success: false,\n      error: 'Erreur lors de la recherche géographique',\n      details: error instanceof Error ? error.message : 'Erreur inconnue'\n    }, { status: 500 });\n  }\n}\n\n// API pour suggestions rapides (autocomplete)\nexport async function POST(request: NextRequest) {\n  try {\n    const { query, limit = 5 } = await request.json();\n\n    if (!query || query.length < 2) {\n      return NextResponse.json({\n        success: false,\n        error: 'Requête trop courte'\n      }, { status: 400 });\n    }\n\n    const mapboxToken = process.env.NEXT_PUBLIC_MAPBOX_TOKEN;\n    if (!mapboxToken) {\n      throw new Error('Token Mapbox manquant');\n    }\n\n    // Recherche rapide avec autocomplete\n    const mapboxUrl = new URL('https://api.mapbox.com/geocoding/v5/mapbox.places');\n    mapboxUrl.pathname += `/${encodeURIComponent(query)}.json`;\n    mapboxUrl.searchParams.set('access_token', mapboxToken);\n    mapboxUrl.searchParams.set('country', 'MQ');\n    mapboxUrl.searchParams.set('types', 'place,locality,neighborhood,address');\n    mapboxUrl.searchParams.set('limit', limit.toString());\n    mapboxUrl.searchParams.set('language', 'fr');\n    mapboxUrl.searchParams.set('autocomplete', 'true');\n    mapboxUrl.searchParams.set('fuzzyMatch', 'true');\n\n    const response = await fetch(mapboxUrl.toString());\n\n    if (!response.ok) {\n      throw new Error(`Erreur Mapbox: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    const suggestions = data.features.map((feature: unknown) => ({\n      id: feature.id,\n      name: feature.text,\n      type: feature.place_type?.[0] || 'lieu',\n      coordinates: feature.center,\n      address: feature.place_name,\n      relevance: feature.relevance,\n      score: feature.relevance * 100\n    }));\n\n    return NextResponse.json({\n      success: true,\n      suggestions: suggestions\n    });\n\n  } catch (error) {\n    console.error('Erreur suggestions:', error);\n    return NextResponse.json({\n      success: false,\n      error: 'Erreur lors de la récupération des suggestions'\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/health/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/hello/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/i18n/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/insights/flux/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/lang/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/offers/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/quiz/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/recommendations/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/scratch-configs/use/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/scratch/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/search/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'type' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":107,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\n// API pour rechercher des données réelles via OpenStreetMap Nominatim\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const query = searchParams.get('q');\n    const type = searchParams.get('type') || 'all';\n    const limit = searchParams.get('limit') || '10';\n\n    if (!query || query.length < 2) {\n      return NextResponse.json({\n        success: false,\n        error: 'Requête trop courte (minimum 2 caractères)'\n      }, { status: 400 });\n    }\n\n    // Construire la requête Nominatim pour la Martinique\n    const nominatimUrl = new URL('https://nominatim.openstreetmap.org/search');\n    nominatimUrl.searchParams.set('q', `${query}, Martinique, France`);\n    nominatimUrl.searchParams.set('format', 'json');\n    nominatimUrl.searchParams.set('limit', limit);\n    nominatimUrl.searchParams.set('addressdetails', '1');\n    nominatimUrl.searchParams.set('extratags', '1');\n    nominatimUrl.searchParams.set('namedetails', '1');\n    nominatimUrl.searchParams.set('bounded', '1');\n    nominatimUrl.searchParams.set('viewbox', '-61.2,14.3,-60.8,14.9'); // Bounding box Martinique\n    nominatimUrl.searchParams.set('countrycodes', 'mq');\n\n    const response = await fetch(nominatimUrl.toString(), {\n      headers: {\n        'User-Agent': 'Padavwa-Urban-Analysis/1.0'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Erreur Nominatim: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    // Transformer les données Nominatim en format standardisé\n    const results = data.map((item: unknown) => {\n      // Déterminer le type basé sur les données Nominatim\n      let itemType = 'lieu';\n      if (item.type === 'administrative' && item.address?.city) {\n        itemType = 'commune';\n      } else if (item.type === 'residential' || item.address?.suburb) {\n        itemType = 'quartier';\n      } else if (item.type === 'highway' || item.address?.road) {\n        itemType = 'rue';\n      } else if (item.type === 'tourism' || item.type === 'amenity') {\n        itemType = 'lieu';\n      }\n\n      return {\n        id: item.place_id.toString(),\n        name: item.display_name.split(',')[0], // Premier élément du nom\n        type: itemType,\n        coordinates: [parseFloat(item.lon), parseFloat(item.lat)],\n        address: item.display_name,\n        osm_type: item.type,\n        importance: item.importance,\n        class: item.class,\n        // Informations additionnelles\n        population: item.extratags?.population ? parseInt(item.extratags.population) : undefined,\n        area: item.extratags?.area ? parseFloat(item.extratags.area) : undefined,\n        website: item.extratags?.website,\n        phone: item.extratags?.phone,\n        opening_hours: item.extratags?.['opening_hours'],\n        // Adresse structurée\n        address_details: {\n          city: item.address?.city || item.address?.town || item.address?.village,\n          state: item.address?.state,\n          country: item.address?.country,\n          postcode: item.address?.postcode\n        }\n      };\n    });\n\n    // Filtrer par type si spécifié\n    const filteredResults = type === 'all' \n      ? results \n      : results.filter(item => item.type === type);\n\n    return NextResponse.json({\n      success: true,\n      results: filteredResults,\n      total: filteredResults.length,\n      query: query,\n      type: type\n    });\n\n  } catch (error) {\n    console.error('Erreur recherche:', error);\n    return NextResponse.json({\n      success: false,\n      error: 'Erreur lors de la recherche',\n      details: error instanceof Error ? error.message : 'Erreur inconnue'\n    }, { status: 500 });\n  }\n}\n\n// API pour récupérer des suggestions de recherche\nexport async function POST(request: NextRequest) {\n  try {\n    const { query, type } = await request.json();\n\n    if (!query || query.length < 2) {\n      return NextResponse.json({\n        success: false,\n        error: 'Requête trop courte'\n      }, { status: 400 });\n    }\n\n    // Recherche avec des suggestions plus larges\n    const nominatimUrl = new URL('https://nominatim.openstreetmap.org/search');\n    nominatimUrl.searchParams.set('q', `${query}, Martinique`);\n    nominatimUrl.searchParams.set('format', 'json');\n    nominatimUrl.searchParams.set('limit', '5');\n    nominatimUrl.searchParams.set('addressdetails', '1');\n    nominatimUrl.searchParams.set('extratags', '1');\n    nominatimUrl.searchParams.set('bounded', '1');\n    nominatimUrl.searchParams.set('viewbox', '-61.2,14.3,-60.8,14.9');\n    nominatimUrl.searchParams.set('countrycodes', 'mq');\n\n    const response = await fetch(nominatimUrl.toString(), {\n      headers: {\n        'User-Agent': 'Padavwa-Urban-Analysis/1.0'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Erreur Nominatim: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    const suggestions = data.map((item: unknown) => ({\n      id: item.place_id.toString(),\n      name: item.display_name.split(',')[0],\n      type: item.type,\n      coordinates: [parseFloat(item.lon), parseFloat(item.lat)],\n      address: item.display_name\n    }));\n\n    return NextResponse.json({\n      success: true,\n      suggestions: suggestions\n    });\n\n  } catch (error) {\n    console.error('Erreur suggestions:', error);\n    return NextResponse.json({\n      success: false,\n      error: 'Erreur lors de la récupération des suggestions'\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/template/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/tickets/[configId]/use/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/tickets/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":57,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":69,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\n\n// 🎫 API de Tickets - Version Simple et Fluide\n// Pas de dépendance Supabase, fonctionne immédiatement\n\ninterface TicketConfig {\n  id: string;\n  name: string;\n  winProbability: number;\n  rewards: {\n    type: 'points' | 'coupon' | 'prize';\n    value: number;\n    label: string;\n  }[];\n}\n\n// Configurations de tickets prédéfinies\nconst TICKET_CONFIGS: Record<string, TicketConfig> = {\n  \"8b3d662b-b75d-43cf-b4d1-3f3b25dcb946\": {\n    id: \"8b3d662b-b75d-43cf-b4d1-3f3b25dcb946\",\n    name: \"Ticket Kanpanya Standard\",\n    winProbability: 0.7, // 70% de chance de gagner\n    rewards: [\n      { type: 'points', value: 50, label: '50 points Kanpanya' },\n      { type: 'points', value: 100, label: '100 points Kanpanya' },\n      { type: 'points', value: 200, label: '200 points Kanpanya' },\n      { type: 'coupon', value: 10, label: '10% de réduction' },\n      { type: 'prize', value: 1, label: 'Cadeau surprise' }\n    ]\n  },\n  \"premium-ticket\": {\n    id: \"premium-ticket\",\n    name: \"Ticket Premium\",\n    winProbability: 0.85, // 85% de chance de gagner\n    rewards: [\n      { type: 'points', value: 500, label: '500 points Kanpanya' },\n      { type: 'points', value: 1000, label: '1000 points Kanpanya' },\n      { type: 'coupon', value: 20, label: '20% de réduction' },\n      { type: 'prize', value: 1, label: 'Cadeau premium' }\n    ]\n  }\n};\n\n// GET - Récupérer les configurations disponibles\nexport async function GET() {\n  try {\n    const configs = Object.values(TICKET_CONFIGS).map(config => ({\n      id: config.id,\n      name: config.name,\n      winProbability: config.winProbability\n    }));\n\n    return NextResponse.json({\n      success: true,\n      data: configs\n    });\n  } catch (error) {\n    return NextResponse.json({\n      success: false,\n      error: \"Erreur lors de la récupération des configurations\"\n    }, { status: 500 });\n  }\n}\n\n// POST - Utiliser un ticket (grattage)\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    const { configId, userId } = body;\n\n    if (!configId) {\n      return NextResponse.json({\n        success: false,\n        error: \"ID de configuration requis\"\n      }, { status: 400 });\n    }\n\n    const config = TICKET_CONFIGS[configId];\n    if (!config) {\n      return NextResponse.json({\n        success: false,\n        error: \"Configuration de ticket non trouvée\"\n      }, { status: 404 });\n    }\n\n    // Simulation du tirage\n    const random = Math.random();\n    const isWin = random <= config.winProbability;\n\n    let result;\n    if (isWin) {\n      // Sélectionner une récompense aléatoire\n      const randomReward = config.rewards[Math.floor(Math.random() * config.rewards.length)];\n      result = {\n        status: \"win\",\n        reward: randomReward.label,\n        value: randomReward.value,\n        type: randomReward.type,\n        configId: config.id,\n        configName: config.name\n      };\n    } else {\n      result = {\n        status: \"lose\",\n        configId: config.id,\n        configName: config.name\n      };\n    }\n\n    // Simuler un délai réseau réaliste\n    await new Promise(resolve => setTimeout(resolve, 300));\n\n    return NextResponse.json({\n      success: true,\n      data: result\n    });\n\n  } catch (error) {\n    console.error(\"Erreur API tickets:\", error);\n    return NextResponse.json({\n      success: false,\n      error: \"Erreur interne du serveur\"\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/upload/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/api/zones/analyze/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/auth/callback/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/cartes/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/comparaison/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/dashboard/logout/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/dashboard/offers/[id]/delete 2/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/dashboard/offers/[id]/delete/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/dashboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/debug/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/design-system/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SiteHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import \"./globals.css\";\nimport { Inter } from \"next/font/google\";\nimport { SiteHeader } from \"@/components/site-header\";\nimport { ModalProvider } from \"@/components/modal/ModalManager\";\n\nconst inter = Inter({ subsets: [\"latin\"], variable: \"--font-sans\" });\n\nexport const metadata = {\n  title: \"Kanpanya\",\n  description: \"Découvrez les offres de vos commerçants préférés\",\n};\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"fr\" className={inter.variable}>\n      <body className=\"font-sans min-h-screen bg-[#F2F2F2] isolate\">\n        <ModalProvider>\n          {children}\n        </ModalProvider>\n      </body>\n    </html>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/lint-report/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/login/actions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/login/send/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/merchant/dashboard/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":244,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":244,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\n\ninterface MerchantStats {\n  merchant_id: string;\n  merchant_name: string;\n  total_recommendations: number;\n  total_clicks: number;\n  total_impressions: number;\n  avg_ctr: number;\n  revenue_from_recommendations: number;\n  new_customers: number;\n  top_recommendation: string;\n  monthly_trend: {\n    month: string;\n    clicks: number;\n    revenue: number;\n  }[];\n}\n\ninterface RecommendationDetail {\n  id: string;\n  title: string;\n  category: string;\n  clicks: number;\n  impressions: number;\n  ctr: number;\n  revenue_generated: number;\n  is_sponsored: boolean;\n  created_at: string;\n}\n\nexport default function MerchantDashboardPage() {\n  const [stats, setStats] = useState<MerchantStats | null>(null);\n  const [recommendations, setRecommendations] = useState<RecommendationDetail[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedPeriod, setSelectedPeriod] = useState(\"30d\");\n\n  useEffect(() => {\n    fetchMerchantStats();\n  }, [selectedPeriod]);\n\n  const fetchMerchantStats = async () => {\n    try {\n      // Simulation de données - à remplacer par un vrai appel API\n      const mockStats: MerchantStats = {\n        merchant_id: \"merchant_123\",\n        merchant_name: \"Pizzeria Bella Vista\",\n        total_recommendations: 12,\n        total_clicks: 145,\n        total_impressions: 3200,\n        avg_ctr: 4.53,\n        revenue_from_recommendations: 2340.50,\n        new_customers: 23,\n        top_recommendation: \"Pizza Margherita -50%\",\n        monthly_trend: [\n          { month: \"Oct\", clicks: 45, revenue: 890.20 },\n          { month: \"Nov\", clicks: 67, revenue: 1234.80 },\n          { month: \"Déc\", clicks: 89, revenue: 1567.30 },\n          { month: \"Jan\", clicks: 145, revenue: 2340.50 }\n        ]\n      };\n\n      const mockRecommendations: RecommendationDetail[] = [\n        {\n          id: \"1\",\n          title: \"Pizza Margherita -50%\",\n          category: \"Restauration\",\n          clicks: 45,\n          impressions: 1200,\n          ctr: 3.75,\n          revenue_generated: 890.20,\n          is_sponsored: true,\n          created_at: \"2024-01-15\"\n        },\n        {\n          id: \"2\",\n          title: \"Menu Famille -30%\",\n          category: \"Restauration\", \n          clicks: 32,\n          impressions: 800,\n          ctr: 4.0,\n          revenue_generated: 640.80,\n          is_sponsored: false,\n          created_at: \"2024-01-10\"\n        },\n        {\n          id: \"3\",\n          title: \"Livraison Gratuite\",\n          category: \"Restauration\",\n          clicks: 28,\n          impressions: 600,\n          ctr: 4.67,\n          revenue_generated: 420.50,\n          is_sponsored: false,\n          created_at: \"2024-01-05\"\n        }\n      ];\n\n      setStats(mockStats);\n      setRecommendations(mockRecommendations);\n    } catch (error) {\n      console.error(\"Erreur lors du chargement des stats:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-64 mb-6\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"bg-white p-6 rounded-xl shadow\">\n                  <div className=\"h-4 bg-gray-200 rounded w-24 mb-2\"></div>\n                  <div className=\"h-8 bg-gray-200 rounded w-16\"></div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!stats) return null;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            🏪 Dashboard Commerçant\n          </h1>\n          <p className=\"text-gray-600\">\n            Bienvenue {stats.merchant_name} - Suivez vos performances\n          </p>\n        </div>\n\n        {/* Période de sélection */}\n        <div className=\"mb-6\">\n          <select\n            value={selectedPeriod}\n            onChange={(e) => setSelectedPeriod(e.target.value)}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#17BFA0] focus:border-transparent\"\n          >\n            <option value=\"7d\">7 derniers jours</option>\n            <option value=\"30d\">30 derniers jours</option>\n            <option value=\"90d\">90 derniers jours</option>\n            <option value=\"1y\">1 an</option>\n          </select>\n        </div>\n\n        {/* Stats Principales */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"bg-white p-6 rounded-xl shadow-lg\"\n          >\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Visites via Recommandations</p>\n                <p className=\"text-3xl font-bold text-[#17BFA0]\">{stats.total_clicks}</p>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  +{stats.monthly_trend[stats.monthly_trend.length - 1].clicks - stats.monthly_trend[stats.monthly_trend.length - 2].clicks} ce mois\n                </p>\n              </div>\n              <div className=\"p-3 bg-[#17BFA0]/10 rounded-full\">\n                <span className=\"text-2xl\">👆</span>\n              </div>\n            </div>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n            className=\"bg-white p-6 rounded-xl shadow-lg\"\n          >\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Revenus Générés</p>\n                <p className=\"text-3xl font-bold text-green-600\">{stats.revenue_from_recommendations.toLocaleString()}€</p>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  +{((stats.monthly_trend[stats.monthly_trend.length - 1].revenue - stats.monthly_trend[stats.monthly_trend.length - 2].revenue) / stats.monthly_trend[stats.monthly_trend.length - 2].revenue * 100).toFixed(1)}% vs mois dernier\n                </p>\n              </div>\n              <div className=\"p-3 bg-green-100 rounded-full\">\n                <span className=\"text-2xl\">💰</span>\n              </div>\n            </div>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"bg-white p-6 rounded-xl shadow-lg\"\n          >\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Nouveaux Clients</p>\n                <p className=\"text-3xl font-bold text-blue-600\">{stats.new_customers}</p>\n                <p className=\"text-xs text-gray-500 mt-1\">via recommandations</p>\n              </div>\n              <div className=\"p-3 bg-blue-100 rounded-full\">\n                <span className=\"text-2xl\">👥</span>\n              </div>\n            </div>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n            className=\"bg-white p-6 rounded-xl shadow-lg\"\n          >\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Taux de Clic</p>\n                <p className=\"text-3xl font-bold text-orange-600\">{stats.avg_ctr}%</p>\n                <p className=\"text-xs text-gray-500 mt-1\">moyenne</p>\n              </div>\n              <div className=\"p-3 bg-orange-100 rounded-full\">\n                <span className=\"text-2xl\">📈</span>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n\n        {/* Graphique de tendance */}\n        <div className=\"bg-white p-6 rounded-xl shadow-lg mb-8\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            📈 Évolution des Visites et Revenus\n          </h3>\n          <div className=\"h-64 flex items-end justify-between space-x-2\">\n            {stats.monthly_trend.map((month, index) => (\n              <div key={month.month} className=\"flex-1 flex flex-col items-center\">\n                <div className=\"w-full bg-gray-200 rounded-t-lg relative\">\n                  <div \n                    className=\"bg-[#17BFA0] rounded-t-lg transition-all duration-500\"\n                    style={{ \n                      height: `${(month.clicks / Math.max(...stats.monthly_trend.map(m => m.clicks))) * 200}px` \n                    }}\n                  ></div>\n                </div>\n                <div className=\"mt-2 text-xs text-gray-600\">{month.month}</div>\n                <div className=\"text-xs text-gray-500\">{month.clicks} clics</div>\n                <div className=\"text-xs text-green-600 font-medium\">{month.revenue.toFixed(0)}€</div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Détail des Recommandations */}\n        <div className=\"bg-white rounded-xl shadow-lg overflow-hidden\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                🎯 Vos Recommandations Actives\n              </h3>\n              <button className=\"px-4 py-2 bg-[#17BFA0] text-white rounded-lg hover:bg-[#14a58d] transition-colors\">\n                + Nouvelle Recommandation\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Recommandation\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Catégorie\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Clics\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    CTR\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Revenus\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Type\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {recommendations.map((rec, index) => (\n                  <motion.tr\n                    key={rec.id}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: index * 0.05 }}\n                    className=\"hover:bg-gray-50\"\n                  >\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-gray-900\">{rec.title}</div>\n                      <div className=\"text-xs text-gray-500\">Créé le {rec.created_at}</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className=\"inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800\">\n                        {rec.category}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-900\">{rec.clicks}</div>\n                      <div className=\"text-xs text-gray-500\">{rec.impressions} impressions</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                        rec.ctr >= 4 ? 'bg-green-100 text-green-800' :\n                        rec.ctr >= 3 ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-red-100 text-red-800'\n                      }`}>\n                        {rec.ctr}%\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-green-600\">{rec.revenue_generated.toFixed(2)}€</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                        rec.is_sponsored ? 'bg-purple-100 text-purple-800' : 'bg-gray-100 text-gray-800'\n                      }`}>\n                        {rec.is_sponsored ? '⭐ Sponsorisé' : '🆓 Gratuit'}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                      <div className=\"flex space-x-2\">\n                        <button className=\"text-[#17BFA0] hover:text-[#14a58d]\">\n                          Modifier\n                        </button>\n                        {!rec.is_sponsored && (\n                          <button className=\"text-purple-600 hover:text-purple-900\">\n                            Booster\n                          </button>\n                        )}\n                      </div>\n                    </td>\n                  </motion.tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        {/* Actions Premium */}\n        <div className=\"mt-8 bg-gradient-to-r from-purple-500 to-pink-500 p-6 rounded-xl text-white\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-xl font-bold mb-2\">⭐ Boostez vos Recommandations</h3>\n              <p className=\"text-purple-100 mb-4\">\n                Passez en Premium pour augmenter votre visibilité et vos revenus\n              </p>\n              <div className=\"flex space-x-4 text-sm\">\n                <div className=\"flex items-center\">\n                  <span className=\"mr-2\">🎯</span>\n                  Placement prioritaire\n                </div>\n                <div className=\"flex items-center\">\n                  <span className=\"mr-2\">📊</span>\n                  Analytics avancées\n                </div>\n                <div className=\"flex items-center\">\n                  <span className=\"mr-2\">🎨</span>\n                  Personnalisation\n                </div>\n              </div>\n            </div>\n            <button className=\"px-6 py-3 bg-white text-purple-600 font-semibold rounded-lg hover:bg-gray-100 transition-colors\">\n              Passer Premium - 29€/mois\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Gift' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InteractiveOfferDialog' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BannerMint' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SiteHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleScratchReveal' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":41,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { ChevronRight, Gift } from \"lucide-react\";\nimport { InteractiveOfferDialog } from \"@/components/InteractiveOfferDialog\";\nimport BannerMint from \"@/components/BannerMint\";\nimport { SiteHeader } from \"@/components/site-header\";\nimport PageHeader from \"@/components/PageHeader\";\nimport { useModal } from \"@/components/modal/ModalManager\";\nimport VideoModal from \"@/components/modals/VideoModal\";\nimport InteractiveOfferQuiz from \"@/components/InteractiveOfferQuiz\";\nimport ScratchCardStableV3 from \"@/components/scratch/ScratchCardStableV3\";\nimport { SadEmojiRain, HappyEmojiRain, MoneyEmojiRain } from \"@/components/EmojiRain\";\nimport SponsorFlowModal from \"@/components/SponsorFlowModal\";\nimport RecommendationSection from \"@/components/RecommendationSection\";\nimport { useScratchAvailability } from \"@/hooks/useScratchAvailability\";\nimport * as React from \"react\";\n\nexport default function Home() {\n  const { open } = useModal();\n  const [quizOpen, setQuizOpen] = React.useState(false);\n  const [sponsorFlowOpen, setSponsorFlowOpen] = React.useState(false);\n  const [isClient, setIsClient] = React.useState(false);\n  const { state, markUsed } = useScratchAvailability();\n  \n  // États pour les animations\n  const [showSadEmojis, setShowSadEmojis] = React.useState(false);\n  const [showHappyEmojis, setShowHappyEmojis] = React.useState(false);\n  const [showMoneyEmojis, setShowMoneyEmojis] = React.useState(false);\n\n  const handleOpenVideo = () => {\n    // Ouvrir le modal vidéo via le ModalManager\n    open(<VideoModal />);\n  };\n\n  const handleQuizComplete = (result: { score: number; total: number; points: number }) => {\n    console.log(\"Quiz terminé:\", result);\n    // Ici vous pourriez envoyer les données à votre API\n    // Par exemple: saveQuizResult(result);\n  };\n\n  const handleScratchReveal = (reward: { type: string; amount: number; merchant?: string }) => {\n    console.log(\"🎉 Récompense révélée sur la page d'accueil:\", reward);\n    \n    // Déclencher les animations selon le type de récompense\n    if (reward.type === \"points\" && reward.amount >= 250) {\n      setShowMoneyEmojis(true);\n      setTimeout(() => setShowMoneyEmojis(false), 3000);\n    } else if (reward.amount >= 100) {\n      setShowHappyEmojis(true);\n      setTimeout(() => setShowHappyEmojis(false), 3000);\n    } else {\n      setShowSadEmojis(true);\n      setTimeout(() => setShowSadEmojis(false), 3000);\n    }\n    \n    // Marquer le ticket comme utilisé après les animations\n    setTimeout(() => markUsed(), 1500);\n  };\n\n  React.useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  React.useEffect(() => {\n    // Option : scroll vers le ticket si dispo\n    if (state.available && isClient) {\n      document.getElementById('scratch-section')?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n    }\n  }, [state.available, isClient]);\n\n  return (\n    <div className=\"min-h-screen\" style={{ background: \"#F2F2F2\" }}>\n      \n      {/* Navigation Header */}\n      <nav className=\"w-full bg-white shadow-sm\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between px-3 sm:px-4 md:px-6 py-2 sm:py-3\">                                                                                                         \n          {/* Logo */}\n          <div className=\"text-base sm:text-lg font-bold text-[#17BFA0]\">Kanpanya</div>\n\n          {/* Menu desktop */}\n          <div className=\"hidden sm:flex items-center gap-4 lg:gap-6 text-[#212E40] font-medium\">\n            <a href=\"#\" className=\"hover:text-[#17BFA0] text-sm lg:text-base\">Accueil</a>\n            <a href=\"#\" className=\"hover:text-[#17BFA0] text-sm lg:text-base\">Commerçants</a>\n            <a href=\"#\" className=\"hover:text-[#17BFA0] text-sm lg:text-base\">Offres</a>\n            <a href=\"#\" className=\"hover:text-[#17BFA0] text-sm lg:text-base\">Plus</a>\n          </div>\n\n          {/* Bouton \"Ma carte\" */}\n          <button className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-4 py-1.5 sm:py-2 rounded-xl shadow-md text-[#212E40] font-semibold bg-white border border-gray-200 text-xs sm:text-sm\">                        \n            <span className=\"text-[#0D8C75]\">▢</span>\n            <span className=\"hidden xs:inline\">Ma carte</span>\n          </button>\n        </div>\n      </nav>\n\n      {/* Header intro */}\n      <div className=\"px-3 sm:px-4 md:px-6 py-6 sm:py-8 md:py-10 max-w-7xl mx-auto\">\n        <PageHeader />\n      </div>\n\n      {/* Section Ticket à gratter avec animations */}\n      {isClient && state.available && !state.used ? (\n        <div id=\"scratch-section\" className=\"px-3 sm:px-4 md:px-6 py-4 sm:py-6 max-w-7xl mx-auto\">\n          <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-2xl shadow-xl p-4 sm:p-6 border border-blue-100\">\n            <div className=\"mb-4 text-center\">\n              <div className=\"flex items-center justify-center gap-2 mb-2\">\n                <span className=\"text-2xl sm:text-3xl\">🎫</span>\n                <h3 className=\"text-lg sm:text-xl font-bold text-gray-800\">Votre ticket à gratter</h3>\n                <span className=\"text-2xl sm:text-3xl\">✨</span>\n              </div>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                Grattez pour révéler votre récompense surprise avec animations !\n              </p>\n            </div>\n            <div className=\"flex justify-center\">\n              <ScratchCardStableV3\n                threshold={0.4}\n                goldenTicketChance={0.1}\n                userId=\"home-user\"\n                onReveal={(reward) => {\n                  console.log(\"🎉 Récompense révélée sur la page d'accueil:\", reward);\n                  \n                  // Déclencher les animations selon le type de récompense\n                  if (reward.type === \"points\" && reward.amount >= 250) {\n                    setShowMoneyEmojis(true);\n                    setTimeout(() => setShowMoneyEmojis(false), 3000);\n                  } else if (reward.amount >= 100) {\n                    setShowHappyEmojis(true);\n                    setTimeout(() => setShowHappyEmojis(false), 3000);\n                  } else {\n                    setShowSadEmojis(true);\n                    setTimeout(() => setShowSadEmojis(false), 3000);\n                  }\n                  \n                  // Marquer le ticket comme utilisé après les animations\n                  setTimeout(() => markUsed(), 1500);\n                }}\n              />\n            </div>\n            <div className=\"mt-4 text-center\">\n              <p className=\"text-xs text-gray-500\">\n                💡 Plus vous grattez, plus vous avez de chances de gagner gros !\n              </p>\n            </div>\n          </div>\n        </div>\n      ) : !isClient ? (\n        <div className=\"px-3 sm:px-4 md:px-6 py-4 sm:py-6 max-w-7xl mx-auto\">\n          <div className=\"bg-white rounded-2xl shadow-md p-4 sm:p-6\">\n            <div className=\"animate-pulse text-gray-400\">Chargement...</div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"px-3 sm:px-4 md:px-6 py-4 sm:py-6 max-w-7xl mx-auto\">\n          <div className=\"bg-white rounded-2xl shadow-md p-4 sm:p-6\">\n            <div className=\"text-gray-700 font-medium text-sm sm:text-base\">Pas de ticket pour le moment</div>                                                                                                          \n            <div className=\"text-gray-500 text-xs sm:text-sm\">Termine un quiz pour débloquer un nouveau ticket à gratter.</div>                                                                                         \n          </div>\n        </div>\n      )}\n\n      {/* Section Partenaire - Wrapper uniforme */}\n      <div className=\"max-w-7xl mx-auto mt-6 sm:mt-8 md:mt-10 px-3 sm:px-4 md:px-6 space-y-3 sm:space-y-4\">\n        {/* Bannière partenaire - Cliquable */}\n        <button\n          onClick={handleOpenVideo}\n          className=\"w-full rounded-xl shadow p-4 text-[#212E40] text-left hover:shadow-xl transition-all duration-300 hover:scale-[1.02]\"                                                                              \n          style={{\n            background:\n              \"linear-gradient(90deg, #BCE8DF 0%, #C2F9DD 50%, #BCF7D2 100%)\",\n          }}\n        >\n          <h3 className=\"font-semibold text-lg sm:text-xl\">🎥 Mutuelle Locale</h3>\n          <p className=\"text-xs sm:text-sm mt-1\">\n            Cliquez pour découvrir la vidéo interactive et gagner des points !\n          </p>\n          <div className=\"mt-3 flex items-center text-sm text-teal-700 font-medium\">\n            <span>Regarder la vidéo + Quiz nutrition</span>\n            <ChevronRight className=\"w-4 h-4 ml-1\" />\n          </div>\n        </button>\n\n        {/* Carte détail partenaire */}\n        <div className=\"relative bg-white rounded-xl shadow p-4 overflow-hidden\">\n          {/* Bande verticale gradient */}\n          <div className=\"absolute top-0 left-0 w-2 h-full bg-gradient-to-b from-[#17BFA0] to-[#BCE8DF] rounded-l-xl\"></div>                                                                                            \n\n          <div className=\"ml-4\"> {/* Décale le contenu pour ne pas coller à la bande */}\n            <h3 className=\"font-semibold text-lg text-[#212E40]\">Mutuelle Locale</h3>\n            <p className=\"text-sm text-gray-500\">Partenaire officiel</p>\n            <p className=\"mt-2 font-bold text-[#17BFA0] text-lg\">\n              Points doublés cette semaine ! 🎯\n            </p>\n            <p className=\"text-sm text-gray-600 leading-relaxed\">\n              Profitez de l&apos;offre spéciale : tous vos achats rapportent 2x plus de points Kanpanya\n            </p>\n            <div className=\"mt-4 flex flex-col sm:flex-row gap-3\">\n              <button \n                onClick={() => setSponsorFlowOpen(true)}\n                className=\"px-5 py-2 rounded-lg bg-[#17BFA0] text-white font-semibold shadow-md hover:bg-[#14a58d] transition flex items-center justify-center\"                                                         \n              >\n                🎬 Découvrir le partenaire\n              </button>\n              <button className=\"px-5 py-2 rounded-lg border border-[#17BFA0] text-[#17BFA0] font-semibold hover:bg-[#F9FFFD]\">                                                                                         \n                En savoir plus\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section Promos Flash */}\n      <section className=\"max-w-7xl mx-auto mt-10 px-4 sm:px-6\">\n        <h2 className=\"text-lg sm:text-xl font-semibold mb-4 sm:mb-6 text-[#212E40]\">\n          🔥 Promos Flash\n        </h2>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 sm:gap-6\">\n          {[\"Pizza -50% ce soir\", \"Happy Hour 14h-16h\", \"Légumes frais -30%\", \"Parapharmacie -15%\"].map((offer, i) => (                                                                                                 \n            <div key={i} className=\"rounded-2xl bg-white shadow-md p-4 sm:p-5\">\n              <h3 className=\"font-semibold text-[#212E40] text-sm\">{offer}</h3>\n              <p className=\"text-xs text-gray-500\">Commerçant</p>\n              <span\n                className=\"inline-block mt-2 sm:mt-3 px-3 py-1 text-xs font-semibold rounded-full text-white\"                                                                                                           \n                style={{\n                  background: \"linear-gradient(90deg, #F2A0A0 0%, #F2C2C2 50%, #F2D5D5 100%)\",\n                }}\n              >\n                Flash\n              </span>\n              <button className=\"mt-3 sm:mt-4 w-full py-2 rounded-lg border border-[#17BFA0] text-[#17BFA0] font-medium\">                                                                                               \n                Voir l&apos;offre\n              </button>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      {/* Section Recommandations */}\n      <RecommendationSection />\n\n      {/* Explorez par catégorie */}\n      <section className=\"max-w-7xl mx-auto mt-12 px-4 sm:px-6\">\n        <h2 className=\"text-lg sm:text-xl font-semibold mb-4 sm:mb-6 text-[#212E40]\">\n          📂 Explorez par catégorie\n        </h2>\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-4 sm:gap-6\">\n          {[\n            { icon: \"🍔\", name: \"Restauration\" },\n            { icon: \"💇‍♀️\", name: \"Beauté\" },\n            { icon: \"👗\", name: \"Mode\" },\n            { icon: \"🎉\", name: \"Loisirs\" },\n            { icon: \"🛒\", name: \"Alimentation\" },\n            { icon: \"💊\", name: \"Santé\" },\n          ].map((cat, i) => (\n            <div\n              key={i}\n              className=\"rounded-2xl bg-white shadow-md p-4 sm:p-6 flex flex-col items-center justify-center\"                                                                                                           \n            >\n              <span className=\"text-xl sm:text-2xl\">{cat.icon}</span>\n              <p className=\"mt-1 sm:mt-2 font-medium text-[#212E40] text-sm sm:text-base\">\n                {cat.name}\n              </p>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      {/* Bloc communauté */}\n      <section\n        className=\"max-w-7xl mx-auto mt-12 rounded-2xl shadow-lg p-6 sm:p-10 text-center\"\n        style={{\n          background: \"linear-gradient(90deg, #E9FFF6 0%, #F2FDFB 100%)\",\n        }}\n      >\n        <h2 className=\"text-lg sm:text-2xl font-bold text-[#212E40] mb-2 sm:mb-3\">\n          Rejoignez la communauté ! 🌱\n        </h2>\n        <p className=\"text-sm sm:text-base text-gray-600 leading-relaxed max-w-2xl mx-auto\">\n          Soutenez vos commerçants locaux et gagnez des récompenses exclusives. Chaque achat compte pour votre progression !                                                                                            \n        </p>\n        <div className=\"mt-4 sm:mt-6 flex flex-col sm:flex-row justify-center gap-3 sm:gap-6\">\n          <button className=\"px-4 sm:px-6 py-2 sm:py-3 rounded-lg bg-[#17BFA0] text-white font-semibold shadow-md hover:bg-[#14a58d]\">                                                                                  \n            Découvrir\n          </button>\n          <button className=\"px-4 sm:px-6 py-2 sm:py-3 rounded-lg bg-white border border-gray-200 text-[#17BFA0] font-semibold\">                                                                                        \n            En savoir plus\n          </button>\n        </div>\n      </section>\n\n      {/* Stats */}\n      <section className=\"max-w-7xl mx-auto mt-10 sm:mt-12 px-4 sm:px-6 grid grid-cols-2 md:grid-cols-4 gap-4 sm:gap-6\">                                                                                                \n        {[\n          { icon: \"🏬\", number: \"89\", label: \"Commerçants\" },\n          { icon: \"👥\", number: \"1,247\", label: \"Utilisateurs\" },\n          { icon: \"🎁\", number: \"156\", label: \"Offres actives\" },\n          { icon: \"⭐\", number: \"4.8\", label: \"Note moyenne\" },\n        ].map((stat, i) => (\n          <div\n            key={i}\n            className=\"rounded-2xl bg-white shadow-md p-4 sm:p-6 text-center flex flex-col items-center\"\n          >\n            <span className=\"text-xl sm:text-2xl\">{stat.icon}</span>\n            <p className=\"text-base sm:text-lg font-bold text-[#212E40] mt-1 sm:mt-2\">{stat.number}</p>\n            <p className=\"text-xs sm:text-sm text-gray-500\">{stat.label}</p>\n          </div>\n        ))}\n      </section>\n\n      {/* Modals gérés par ModalManager */}\n      \n      <InteractiveOfferQuiz \n        open={quizOpen} \n        onOpenChange={setQuizOpen}\n        pointsPerCorrect={15}\n        onComplete={handleQuizComplete}\n      />\n\n      {/* Sponsor Flow Modal */}\n      <SponsorFlowModal\n        visible={sponsorFlowOpen}\n        onClose={() => setSponsorFlowOpen(false)}\n      />\n\n      {/* Animations d'emojis pour le scratch */}\n      {showSadEmojis && <SadEmojiRain count={40} isWinner={false} />}\n      {showHappyEmojis && <HappyEmojiRain count={50} isWinner={true} />}\n      {showMoneyEmojis && <MoneyEmojiRain count={60} isWinner={true} />}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/playground/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'drawCover' function makes the dependencies of useCallback Hook (at line 190) change on every render. To fix this, wrap the definition of 'drawCover' in its own useCallback() Hook.","line":206,"column":9,"nodeType":"VariableDeclarator","endLine":244,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'drawCover' in its own useCallback() Hook.","fix":{"range":[6275,7359],"text":"useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Reset\n    ctx.globalCompositeOperation = \"source-over\";\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Silver gradient cover\n    const grad = ctx.createLinearGradient(0, 0, W, H);\n    grad.addColorStop(0, \"#d1d5db\"); // gray-300\n    grad.addColorStop(1, \"#9ca3af\"); // gray-400\n    ctx.fillStyle = grad;\n    ctx.fillRect(0, 0, W, H);\n\n    // Diagonal stripes for texture\n    ctx.globalAlpha = 0.25;\n    ctx.fillStyle = \"#ffffff\";\n    for (let i = -H; i < W + H; i += 16) {\n      ctx.beginPath();\n      ctx.moveTo(i, 0);\n      ctx.lineTo(i + 8, 0);\n      ctx.lineTo(i - H + 8, H);\n      ctx.lineTo(i - H, H);\n      ctx.closePath();\n      ctx.fill();\n    }\n    ctx.globalAlpha = 1;\n\n    // Hint text\n    ctx.fillStyle = \"#374151\"; // gray-700\n    ctx.font = \"600 16px system-ui, -apple-system, Segoe UI, Roboto\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(\"Gratte ici ✨\", W / 2, H / 2);\n\n    coverDrawnRef.current = true;\n  })"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\n\n// Single-file playground: Quiz + Scratch (front-only)\n// Drop this component into app/playground/page.tsx\n// Tailwind CSS required (no external libs).\n\nexport default function Playground() {\n  const [tab, setTab] = useState<\"quiz\" | \"scratch\">(\"quiz\");\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-10 bg-white/80 backdrop-blur border-b\">\n        <div className=\"mx-auto max-w-4xl px-3 sm:px-4 py-2 sm:py-3 flex items-center justify-between\">\n          <h1 className=\"text-lg sm:text-xl font-semibold tracking-tight\">Kanpanya — Playground</h1>\n          <nav className=\"flex gap-1 sm:gap-2\">\n            <button\n              onClick={() => setTab(\"quiz\")}\n              className={`px-2 sm:px-4 py-1.5 sm:py-2 rounded-2xl border transition shadow-sm text-xs sm:text-sm ${\n                tab === \"quiz\"\n                  ? \"bg-primary text-white border-primary\"\n                  : \"bg-white hover:bg-gray-100\"\n              }`}\n            >\n              Quiz\n            </button>\n            <button\n              onClick={() => setTab(\"scratch\")}\n              className={`px-2 sm:px-4 py-1.5 sm:py-2 rounded-2xl border transition shadow-sm text-xs sm:text-sm ${\n                tab === \"scratch\"\n                  ? \"bg-primary text-white border-primary\"\n                  : \"bg-white hover:bg-gray-100\"\n              }`}\n            >\n              Scratch\n            </button>\n          </nav>\n        </div>\n      </header>\n\n      <main className=\"mx-auto max-w-4xl px-3 sm:px-4 py-6 sm:py-8\">\n        {tab === \"quiz\" ? <QuizDemo /> : <ScratchDemo />}\n      </main>\n    </div>\n  );\n}\n\nfunction QuizDemo() {\n  const [current, setCurrent] = useState(0);\n  const [selected, setSelected] = useState<number | null>(null);\n  const [result, setResult] = useState<null | { ok: boolean; msg: string }>(\n    null\n  );\n  const [score, setScore] = useState(0);\n\n  const questions = useMemo(\n    () => [\n      {\n        text: \"Quelle est la capitale de la Guadeloupe ?\",\n        options: [\"Basse-Terre\", \"Pointe-à-Pitre\", \"Les Abymes\", \"Gosier\"],\n        correct: 0,\n        reward: 10,\n      },\n      {\n        text: \"Quel est le code couleur principal de Kanpanya ?\",\n        options: [\"#FF0000\", \"#14B8A6\", \"#3B82F6\", \"#F59E0B\"],\n        correct: 1,\n        reward: 10,\n      },\n    ],\n    []\n  );\n\n  const q = questions[current];\n\n  const submit = () => {\n    if (selected == null) return;\n    const ok = selected === q.correct;\n    setResult({ ok, msg: ok ? \"✅ Bonne réponse ! +10 pts\" : \"❌ Mauvaise réponse\" });\n    if (ok) setScore((s) => s + q.reward);\n  };\n\n  const next = () => {\n    setSelected(null);\n    setResult(null);\n    setCurrent((c) => Math.min(c + 1, questions.length - 1));\n  };\n\n  const reset = () => {\n    setCurrent(0);\n    setSelected(null);\n    setResult(null);\n    setScore(0);\n  };\n\n  return (\n    <div className=\"grid gap-6 md:grid-cols-[1fr,320px] items-start\">\n      <div className=\"bg-white rounded-2xl shadow p-6\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold\">Quiz démo</h2>\n          <span className=\"text-sm text-gray-500\">\n            Question {current + 1}/{questions.length}\n          </span>\n        </div>\n\n        <p className=\"mt-4 text-lg font-medium\">{q.text}</p>\n\n        <div className=\"mt-4 grid gap-2\">\n          {q.options.map((opt, idx) => (\n            <label key={idx} className=\"cursor-pointer\">\n              <input\n                type=\"radio\"\n                name={`q_${current}`}\n                className=\"peer hidden\"\n                checked={selected === idx}\n                onChange={() => setSelected(idx)}\n              />\n              <div\n                className={`border rounded-xl p-3 transition peer-checked:border-teal-600 peer-checked:bg-teal-50 hover:bg-gray-50`}\n              >\n                {opt}\n              </div>\n            </label>\n          ))}\n        </div>\n\n        <div className=\"mt-6 flex gap-3\">\n          <button\n            onClick={submit}\n            className=\"px-4 py-2 rounded-xl bg-teal-600 text-white hover:scale-[1.02] active:scale-95 transition\"\n          >\n            Valider\n          </button>\n          <button\n            onClick={reset}\n            className=\"px-4 py-2 rounded-xl border hover:bg-gray-50\"\n          >\n            Recommencer\n          </button>\n          {current < questions.length - 1 && (\n            <button\n              onClick={next}\n              className=\"ml-auto px-4 py-2 rounded-xl border hover:bg-gray-50\"\n            >\n              Suivant\n            </button>\n          )}\n        </div>\n\n        {result && (\n          <p\n            className={`mt-4 font-medium ${\n              result.ok ? \"text-teal-700\" : \"text-rose-600\"\n            }`}\n          >\n            {result.msg}\n          </p>\n        )}\n      </div>\n\n      <aside className=\"bg-white rounded-2xl shadow p-6\">\n        <h3 className=\"font-semibold mb-2\">Résumé</h3>\n        <div className=\"flex items-center gap-2 text-2xl font-bold\">\n          <span>Score</span>\n          <span className=\"text-teal-600\">{score}</span>\n          <span className=\"text-sm font-normal text-gray-500\">points</span>\n        </div>\n        <p className=\"mt-3 text-sm text-gray-600\">\n          Tout est côté front — aucune API. Idéal pour tester l&apos;UI et le flow.\n        </p>\n      </aside>\n    </div>\n  );\n}\n\nfunction ScratchDemo() {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const coverDrawnRef = useRef(false);\n  const [scratchedPct, setScratchedPct] = useState(0);\n  const [revealed, setRevealed] = useState(false);\n  const [isDrawing, setIsDrawing] = useState(false);\n\n  const W = 340;\n  const H = 180;\n\n  \nconst stableDrawCover = useCallback(() => {\n  drawCover();\n}, [drawCover]);\n\nconst stableSetScratchedPct = useCallback(() => {\n  setScratchedPct();\n}, [setScratchedPct]);\n\nconst stableSetRevealed = useCallback(() => {\n  setRevealed();\n}, [setRevealed]);\n\nuseEffect(() => {\n  stableDrawCover();\n  stableSetScratchedPct();\n  stableSetRevealed();\n}, [stableDrawCover, stableSetScratchedPct, stableSetRevealed]);;\n\n  const drawCover = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Reset\n    ctx.globalCompositeOperation = \"source-over\";\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Silver gradient cover\n    const grad = ctx.createLinearGradient(0, 0, W, H);\n    grad.addColorStop(0, \"#d1d5db\"); // gray-300\n    grad.addColorStop(1, \"#9ca3af\"); // gray-400\n    ctx.fillStyle = grad;\n    ctx.fillRect(0, 0, W, H);\n\n    // Diagonal stripes for texture\n    ctx.globalAlpha = 0.25;\n    ctx.fillStyle = \"#ffffff\";\n    for (let i = -H; i < W + H; i += 16) {\n      ctx.beginPath();\n      ctx.moveTo(i, 0);\n      ctx.lineTo(i + 8, 0);\n      ctx.lineTo(i - H + 8, H);\n      ctx.lineTo(i - H, H);\n      ctx.closePath();\n      ctx.fill();\n    }\n    ctx.globalAlpha = 1;\n\n    // Hint text\n    ctx.fillStyle = \"#374151\"; // gray-700\n    ctx.font = \"600 16px system-ui, -apple-system, Segoe UI, Roboto\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(\"Gratte ici ✨\", W / 2, H / 2);\n\n    coverDrawnRef.current = true;\n  };\n\n  const getXY = (e: PointerEvent, canvas: HTMLCanvasElement) => {\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    return { x, y };\n  };\n\n  const start = (e: React.PointerEvent<HTMLCanvasElement>) => {\n    if (revealed) return;\n    setIsDrawing(true);\n    erase(e.nativeEvent);\n  };\n\n  const move = (e: React.PointerEvent<HTMLCanvasElement>) => {\n    if (!isDrawing || revealed) return;\n    erase(e.nativeEvent);\n  };\n\n  const end = () => {\n    if (!isDrawing) return;\n    setIsDrawing(false);\n    // Compute scratched percent on stroke end\n    setTimeout(checkScratched, 0);\n  };\n\n  const erase = (evt: PointerEvent) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const { x, y } = getXY(evt, canvas);\n    ctx.globalCompositeOperation = \"destination-out\";\n    ctx.beginPath();\n    ctx.arc(x, y, 18, 0, Math.PI * 2);\n    ctx.fill();\n  };\n\n  const checkScratched = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\", { willReadFrequently: true });\n    if (!ctx) return;\n    const img = ctx.getImageData(0, 0, W, H);\n\n    const total = W * H;\n    let cleared = 0;\n    // Count transparent pixels (alpha <= 20)\n    for (let i = 3; i < img.data.length; i += 4) {\n      if (img.data[i] <= 20) cleared++;\n    }\n    const pct = Math.round((cleared / total) * 100);\n    setScratchedPct(pct);\n    if (pct >= 55) setRevealed(true);\n  };\n\n  const reset = () => {\n    drawCover();\n    setScratchedPct(0);\n    setRevealed(false);\n  };\n\n  return (\n    <div className=\"grid gap-6 md:grid-cols-[1fr,320px] items-start\">\n      <div className=\"bg-white rounded-2xl shadow p-6\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold\">Carte à gratter démo</h2>\n          <div className=\"text-sm text-gray-500\">{scratchedPct}% gratté</div>\n        </div>\n\n        <div className=\"mt-4 relative mx-auto w-[340px]\">\n          {/* Prize layer (under the canvas) */}\n          <div\n            className={`absolute inset-0 flex items-center justify-center text-center rounded-xl border ${\n              revealed ? \"ring-2 ring-teal-500\" : \"\"\n            }`}\n            aria-hidden\n          >\n            <div className=\"p-4\">\n              <p className=\"text-2xl font-bold text-teal-600\">🎁 1 ticket tombola</p>\n              <p className=\"text-gray-600 mt-1\">À récupérer en caisse</p>\n            </div>\n          </div>\n\n          {/* Scratch canvas */}\n          <canvas\n            ref={canvasRef}\n            width={W}\n            height={H}\n            onPointerDown={start}\n            onPointerMove={move}\n            onPointerUp={end}\n            onPointerLeave={end}\n            className=\"relative z-10 border rounded-xl touch-none select-none cursor-pointer\"\n          />\n\n          {/* Win badge */}\n          {revealed && (\n            <div className=\"absolute -top-3 -right-3 z-20 bg-teal-600 text-white px-3 py-1 rounded-full text-sm shadow animate-bounce\">\n              +10 points\n            </div>\n          )}\n        </div>\n\n        <div className=\"mt-6 flex gap-3\">\n          <button\n            onClick={reset}\n            className=\"px-4 py-2 rounded-xl border hover:bg-gray-50\"\n          >\n            Réinitialiser\n          </button>\n          <button\n            onClick={checkScratched}\n            className=\"px-4 py-2 rounded-xl border hover:bg-gray-50\"\n          >\n            Vérifier le %\n          </button>\n        </div>\n\n        {revealed && (\n          <div className=\"mt-4 p-4 bg-teal-50 border border-teal-200 rounded-xl text-teal-800\">\n            Bravo 🎉 — gain dévoilé ! (front-only, pas d&apos;API)\n          </div>\n        )}\n      </div>\n\n      <aside className=\"bg-white rounded-2xl shadow p-6\">\n        <h3 className=\"font-semibold mb-2\">Conseils UI</h3>\n        <ul className=\"text-sm text-gray-700 list-disc pl-5 space-y-1\">\n          <li>Contraste fort entre la couche à gratter et le lot.</li>\n          <li>Utiliser pointer events (meilleur que mouse/touch séparés).</li>\n          <li>Auto-révélation à ~55% gratté pour la fluidité.</li>\n          <li>Bouton reset pour tests rapides.</li>\n        </ul>\n      </aside>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/pro-dashboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/quiz-demo/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/quiz/result/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/scratch-anime/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/scratch-clean/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/scratch-demo-option2.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/scratch-demo-option3.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/scratch-demo-option4.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/scratch-demo/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/sitemap.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/sponsor-flow-demo/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/styleguide/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-all-maps/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-basic-map/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-basic/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-bouton/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-carte-quartier/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-clic/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":57,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2657,2694],"text":" - N&apos;importe où pour ajouter un point"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2657,2694],"text":" - N&lsquo;importe où pour ajouter un point"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2657,2694],"text":" - N&#39;importe où pour ajouter un point"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2657,2694],"text":" - N&rsquo;importe où pour ajouter un point"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import RealMapboxMapClick from '@/components/RealMapboxMapClick';\n\nexport default function TestClicPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        <h1 className=\"text-3xl font-bold text-center mb-8 text-gray-800\">\n          🗺️ Test Carte avec Clic pour Ajouter des Points\n        </h1>\n        \n        <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4\">Carte Interactive avec Clic</h2>\n          <p className=\"text-gray-600 mb-4\">\n            Activez le mode clic puis cliquez directement sur la carte pour ajouter des points !\n          </p>\n          <RealMapboxMapClick \n            height=\"600px\"\n            center={[-61.5314, 16.2412]} // Pointe-à-Pitre, Guadeloupe\n            zoom={13}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n          <div className=\"bg-white rounded-lg shadow-lg p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">🏝️ Martinique - Fort-de-France</h3>\n            <RealMapboxMapClick \n              height=\"400px\"\n              center={[-61.0742, 14.6036]} // Fort-de-France\n              zoom={14}\n            />\n          </div>\n          \n          <div className=\"bg-white rounded-lg shadow-lg p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">🏙️ Paris</h3>\n            <RealMapboxMapClick \n              height=\"400px\"\n              center={[2.3522, 48.8566]} // Paris\n              zoom={13}\n            />\n          </div>\n        </div>\n\n        <div className=\"bg-green-50 p-4 rounded-lg mb-6\">\n          <h3 className=\"font-semibold text-green-800 mb-2\">✅ Méthodes d&apos;ajout de points :</h3>\n          <ul className=\"text-sm text-green-700 space-y-1\">\n            <li>• <strong>Mode Clic</strong> - Activez le bouton &quot;🖱️ Activer Mode Clic&quot; puis cliquez sur la carte</li>\n            <li>• <strong>Bouton Centre</strong> - Cliquez sur &quot;📍 Ajouter au Centre&quot; pour ajouter au centre de la vue</li>\n            <li>• <strong>Précis</strong> - Choisissez exactement où vous voulez placer vos points</li>\n            <li>• <strong>Intuitif</strong> - Interface simple et directe</li>\n          </ul>\n        </div>\n\n        <div className=\"bg-blue-50 p-4 rounded-lg mb-6\">\n          <h3 className=\"font-semibold text-blue-800 mb-2\">🎯 Instructions :</h3>\n          <ul className=\"text-sm text-blue-700 space-y-1\">\n            <li>1. <strong>Activez le mode clic</strong> - Bouton &quot;🖱️ Activer Mode Clic&quot; (devient vert)</li>\n            <li>2. <strong>Cliquez sur la carte</strong> - N'importe où pour ajouter un point</li>\n            <li>3. <strong>Ou utilisez le bouton centre</strong> - &quot;📍 Ajouter au Centre&quot;</li>\n            <li>4. <strong>Répétez</strong> pour ajouter plusieurs points</li>\n            <li>5. <strong>Ligne verte</strong> apparaît dès le 2ème point</li>\n            <li>6. <strong>Polygone vert</strong> se forme au 3ème point</li>\n            <li>7. <strong>Désactivez le mode clic</strong> quand vous avez fini</li>\n          </ul>\n        </div>\n\n        <div className=\"bg-purple-50 p-4 rounded-lg mb-6\">\n          <h3 className=\"font-semibold text-purple-800 mb-2\">🛠️ Fonctionnalités :</h3>\n          <ul className=\"text-sm text-purple-700 space-y-1\">\n            <li>• <strong>Mode clic activé/désactivé</strong> - Bouton qui change de couleur</li>\n            <li>• <strong>Ajout au centre</strong> - Bouton séparé pour ajouter au centre de la vue</li>\n            <li>• <strong>Marqueurs bleus</strong> - Points visibles sur la carte</li>\n            <li>• <strong>Ligne verte</strong> - Relie tous les points (2+ points)</li>\n            <li>• <strong>Polygone translucide</strong> - Zone fermée (3+ points)</li>\n            <li>• <strong>Liste interactive</strong> - Clic pour centrer, ✕ pour supprimer</li>\n            <li>• <strong>Reset complet</strong> - &quot;Tout effacer&quot; pour recommencer</li>\n          </ul>\n        </div>\n\n        <div className=\"bg-yellow-50 p-4 rounded-lg\">\n          <h3 className=\"font-semibold text-yellow-800 mb-2\">💡 Avantages :</h3>\n          <ul className=\"text-sm text-yellow-700 space-y-1\">\n            <li>• <strong>Pas de dépendance externe</strong> - Fonctionne sans géocodeur</li>\n            <li>• <strong>Précision maximale</strong> - Cliquez exactement où vous voulez</li>\n            <li>• <strong>Interface claire</strong> - Mode clic activé/désactivé visible</li>\n            <li>• <strong>Double option</strong> - Clic libre ou ajout au centre</li>\n            <li>• <strong>Fiable</strong> - Pas de problème de réseau ou d&apos;API</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-complete-map/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-confetti/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-dashboard/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LineChart' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Line' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport {\n  LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer,\n  BarChart, Bar, PieChart, Pie, Cell, AreaChart, Area\n} from \"recharts\";\n\n// Données de test\nconst traficData = [\n  { day: \"Lun\", scans: 320 },\n  { day: \"Mar\", scans: 250 },\n  { day: \"Mer\", scans: 400 },\n  { day: \"Jeu\", scans: 380 },\n  { day: \"Ven\", scans: 500 },\n  { day: \"Sam\", scans: 650 },\n  { day: \"Dim\", scans: 420 },\n];\n\nconst reductionsData = [\n  { zone: \"Centre-ville\", used: 120 },\n  { zone: \"Quartier Nord\", used: 80 },\n  { zone: \"Zone Est\", used: 60 },\n];\n\nconst jeuxData = [\n  { name: \"Participants réguliers\", value: 300 },\n  { name: \"Occasionnels\", value: 150 },\n  { name: \"Nouveaux\", value: 50 },\n];\n\nconst COLORS = [\"#10B981\", \"#3B82F6\", \"#F59E0B\"];\n\nexport default function TestDashboard() {\n  const [zones, setZones] = useState<string[]>([]);\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-8\">\n      <h1 className=\"text-3xl font-bold text-center mb-8\">\n        🎯 Tableau de Bord de Test\n      </h1>\n\n      {/* Statistiques */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-6 shadow rounded-lg\">\n          <div className=\"flex items-center\">\n            <div className=\"text-2xl text-blue-600 mr-3\">📊</div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Scans aujourd&apos;hui</p>\n              <p className=\"text-2xl font-bold text-blue-600\">1,247</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-6 shadow rounded-lg\">\n          <div className=\"flex items-center\">\n            <div className=\"text-2xl text-green-600 mr-3\">🎟️</div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Réductions utilisées</p>\n              <p className=\"text-2xl font-bold text-green-600\">89</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-6 shadow rounded-lg\">\n          <div className=\"flex items-center\">\n            <div className=\"text-2xl text-purple-600 mr-3\">🎲</div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Jeux actifs</p>\n              <p className=\"text-2xl font-bold text-purple-600\">12</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white p-6 shadow rounded-lg\">\n          <div className=\"flex items-center\">\n            <div className=\"text-2xl text-orange-600 mr-3\">🏪</div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Commerces actifs</p>\n              <p className=\"text-2xl font-bold text-orange-600\">47</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Graphiques */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Trafic journalier */}\n        <div className=\"bg-white p-6 shadow rounded-lg\">\n          <h3 className=\"font-semibold mb-4 text-lg\">📈 Trafic journalier</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <AreaChart data={traficData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"day\" />\n              <YAxis />\n              <Tooltip />\n              <Area \n                type=\"monotone\" \n                dataKey=\"scans\" \n                stroke=\"#3B82F6\" \n                fill=\"#3B82F6\" \n                fillOpacity={0.3}\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Réductions par zone */}\n        <div className=\"bg-white p-6 shadow rounded-lg\">\n          <h3 className=\"font-semibold mb-4 text-lg\">🎟️ Réductions par zone</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={reductionsData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"zone\" />\n              <YAxis />\n              <Tooltip />\n              <Bar dataKey=\"used\" fill=\"#F59E0B\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Participation aux jeux */}\n        <div className=\"bg-white p-6 shadow rounded-lg\">\n          <h3 className=\"font-semibold mb-4 text-lg\">🎲 Participation aux jeux</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={jeuxData}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n              >\n                {jeuxData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Zone de test */}\n        <div className=\"bg-white p-6 shadow rounded-lg\">\n          <h3 className=\"font-semibold mb-4 text-lg\">🗺️ Gestion des zones</h3>\n          <div className=\"space-y-4\">\n            <button \n              onClick={() => {\n                const name = prompt(\"Nom de la nouvelle zone ?\");\n                if (name && !zones.includes(name)) {\n                  setZones([...zones, name]);\n                }\n              }}\n              className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              ➕ Ajouter une zone\n            </button>\n            \n            {zones.length > 0 && (\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-gray-700\">Zones créées :</h4>\n                {zones.map((zone, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                    <span className=\"text-sm\">{zone}</span>\n                    <button \n                      onClick={() => setZones(zones.filter((_, i) => i !== index))}\n                      className=\"text-red-600 hover:text-red-800\"\n                    >\n                      ✕\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Status */}\n      <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n        <div className=\"flex items-center\">\n          <div className=\"text-green-400 text-xl mr-3\">✅</div>\n          <div>\n            <p className=\"font-medium text-green-800\">Tableau de bord fonctionnel</p>\n            <p className=\"text-green-600 text-sm\">Tous les graphiques et fonctionnalités sont opérationnels</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-debug/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'map' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":11,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'log'. Either exclude it or remove the dependency array. Outer scope values like 'log' aren't valid dependencies because mutating them doesn't re-render the component.","line":22,"column":4,"nodeType":"ArrayExpression","endLine":22,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[667,672],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'Map'. Either exclude it or remove the dependency array. Outer scope values like 'Map' aren't valid dependencies because mutating them doesn't re-render the component.","line":42,"column":4,"nodeType":"ArrayExpression","endLine":42,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1031,1036],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addControl'. Either exclude it or remove the dependency array. Outer scope values like 'addControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":50,"column":4,"nodeType":"ArrayExpression","endLine":50,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1181,1193],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'NavigationControl'. Either exclude it or remove the dependency array. Outer scope values like 'NavigationControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":54,"column":4,"nodeType":"ArrayExpression","endLine":54,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1275,1294],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addControl'. Either exclude it or remove the dependency array. Outer scope values like 'addControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":58,"column":4,"nodeType":"ArrayExpression","endLine":58,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1362,1374],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'FullscreenControl'. Either exclude it or remove the dependency array. Outer scope values like 'FullscreenControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":62,"column":4,"nodeType":"ArrayExpression","endLine":62,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1456,1475],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'on'. Either exclude it or remove the dependency array. Outer scope values like 'on' aren't valid dependencies because mutating them doesn't re-render the component.","line":66,"column":4,"nodeType":"ArrayExpression","endLine":66,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1527,1531],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'log'. Either exclude it or remove the dependency array. Outer scope values like 'log' aren't valid dependencies because mutating them doesn't re-render the component.","line":74,"column":4,"nodeType":"ArrayExpression","endLine":74,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1662,1667],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'MapboxGeocoder'. Either exclude it or remove the dependency array. Outer scope values like 'MapboxGeocoder' aren't valid dependencies because mutating them doesn't re-render the component.","line":82,"column":4,"nodeType":"ArrayExpression","endLine":82,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1820,1836],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addControl'. Either exclude it or remove the dependency array. Outer scope values like 'addControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":86,"column":4,"nodeType":"ArrayExpression","endLine":86,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1904,1916],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'on'. Either exclude it or remove the dependency array. Outer scope values like 'on' aren't valid dependencies because mutating them doesn't re-render the component.","line":94,"column":4,"nodeType":"ArrayExpression","endLine":94,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2045,2049],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'log'. Either exclude it or remove the dependency array. Outer scope values like 'log' aren't valid dependencies because mutating them doesn't re-render the component.","line":98,"column":4,"nodeType":"ArrayExpression","endLine":98,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2103,2108],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'Marker'. Either exclude it or remove the dependency array. Outer scope values like 'Marker' aren't valid dependencies because mutating them doesn't re-render the component.","line":106,"column":4,"nodeType":"ArrayExpression","endLine":106,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2245,2253],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setLngLat'. Either exclude it or remove the dependency array. Outer scope values like 'setLngLat' aren't valid dependencies because mutating them doesn't re-render the component.","line":110,"column":4,"nodeType":"ArrayExpression","endLine":110,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2319,2330],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addTo'. Either exclude it or remove the dependency array. Outer scope values like 'addTo' aren't valid dependencies because mutating them doesn't re-render the component.","line":114,"column":4,"nodeType":"ArrayExpression","endLine":114,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2388,2395],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'on'. Either exclude it or remove the dependency array. Outer scope values like 'on' aren't valid dependencies because mutating them doesn't re-render the component.","line":118,"column":4,"nodeType":"ArrayExpression","endLine":118,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2447,2451],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'on'. Either exclude it or remove the dependency array. Outer scope values like 'on' aren't valid dependencies because mutating them doesn't re-render the component.","line":130,"column":4,"nodeType":"ArrayExpression","endLine":130,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2642,2646],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'remove'. Either exclude it or remove the dependency array. Outer scope values like 'remove' aren't valid dependencies because mutating them doesn't re-render the component.","line":154,"column":4,"nodeType":"ArrayExpression","endLine":154,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[3061,3069],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has duplicate dependencies: 'stableAddControl', 'stableError', 'stableLog', 'stableOn', 'stableSetError', and 'stableSetStatus'. Either omit them or remove the dependency array.","line":192,"column":4,"nodeType":"ArrayExpression","endLine":192,"endColumn":545,"suggestions":[{"desc":"Update the dependencies array to be: [stableSetStatus, stableLog, stableSetError, stableMap, stableAddControl, stableNavigationControl, stableFullscreenControl, stableOn, stableMapboxGeocoder, stableMarker, stableSetLngLat, stableAddTo, stableError, stableRemove]","fix":{"range":[3775,4316],"text":"[stableSetStatus, stableLog, stableSetError, stableMap, stableAddControl, stableNavigationControl, stableFullscreenControl, stableOn, stableMapboxGeocoder, stableMarker, stableSetLngLat, stableAddTo, stableError, stableRemove]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";\n\nexport default function TestDebugPage() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<mapboxgl.Map | null>(null);\n  const [status, setStatus] = useState<string>(\"Initialisation...\");\n  const [error, setError] = useState<string | null>(null);\n\n  \nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableMap = useCallback(() => {\n  Map();\n}, [Map]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableNavigationControl = useCallback(() => {\n  NavigationControl();\n}, [NavigationControl]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableFullscreenControl = useCallback(() => {\n  FullscreenControl();\n}, [FullscreenControl]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableMapboxGeocoder = useCallback(() => {\n  MapboxGeocoder();\n}, [MapboxGeocoder]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableMarker = useCallback(() => {\n  Marker();\n}, [Marker]);\n\nconst stableSetLngLat = useCallback(() => {\n  setLngLat();\n}, [setLngLat]);\n\nconst stableAddTo = useCallback(() => {\n  addTo();\n}, [addTo]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableRemove = useCallback(() => {\n  remove();\n}, [remove]);\n\nuseEffect(() => {\n  stableSetStatus();\n  stableLog();\n  stableSetError();\n  stableSetStatus();\n  stableSetStatus();\n  stableSetStatus();\n  stableMap();\n  stableSetStatus();\n  stableAddControl();\n  stableNavigationControl();\n  stableAddControl();\n  stableFullscreenControl();\n  stableOn();\n  stableSetStatus();\n  stableLog();\n  stableSetStatus();\n  stableMapboxGeocoder();\n  stableAddControl();\n  stableSetStatus();\n  stableOn();\n  stableLog();\n  stableSetStatus();\n  stableMarker();\n  stableSetLngLat();\n  stableAddTo();\n  stableOn();\n  stableError();\n  stableSetError();\n  stableOn();\n  stableError();\n  stableSetError();\n  stableError();\n  stableSetError();\n  stableSetStatus();\n  stableRemove();\n}, [stableSetStatus, stableLog, stableSetError, stableSetStatus, stableSetStatus, stableSetStatus, stableMap, stableSetStatus, stableAddControl, stableNavigationControl, stableAddControl, stableFullscreenControl, stableOn, stableSetStatus, stableLog, stableSetStatus, stableMapboxGeocoder, stableAddControl, stableSetStatus, stableOn, stableLog, stableSetStatus, stableMarker, stableSetLngLat, stableAddTo, stableOn, stableError, stableSetError, stableOn, stableError, stableSetError, stableError, stableSetError, stableSetStatus, stableRemove]);;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-3xl font-bold text-center mb-8 text-gray-800\">\n          🔧 Debug Mapbox + Géocodeur\n        </h1>\n        \n        <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4\">Statut de Débogage</h2>\n          <div className=\"bg-blue-50 p-4 rounded-lg mb-4\">\n            <p className=\"font-mono text-sm\">\n              <strong>Status:</strong> {status}\n            </p>\n            {error && (\n              <p className=\"font-mono text-sm text-red-600 mt-2\">\n                <strong>Erreur:</strong> {error}\n              </p>\n            )}\n          </div>\n          \n          <div \n            ref={mapContainer} \n            style={{ \n              width: \"100%\", \n              height: \"500px\", \n              border: \"2px solid #3b82f6\",\n              borderRadius: \"8px\"\n            }} \n          />\n          \n          <div className=\"mt-4 text-sm text-gray-600\">\n            <p><strong>Instructions de test:</strong></p>\n            <ul className=\"list-disc list-inside mt-2 space-y-1\">\n              <li>Vérifiez que la carte se charge (pas de spinner)</li>\n              <li>Cherchez une adresse dans la barre en haut à gauche</li>\n              <li>Un marqueur vert devrait apparaître sur l&apos;adresse sélectionnée</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-emoji-wow/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-emoji/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-enregistrer/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-final/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'includes'. Either exclude it or remove the dependency array. Outer scope values like 'includes' aren't valid dependencies because mutating them doesn't re-render the component.","line":12,"column":4,"nodeType":"ArrayExpression","endLine":12,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[305,315],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'createElement'. Either exclude it or remove the dependency array. Outer scope values like 'createElement' aren't valid dependencies because mutating them doesn't re-render the component.","line":28,"column":4,"nodeType":"ArrayExpression","endLine":28,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[668,683],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'appendChild'. Either exclude it or remove the dependency array. Outer scope values like 'appendChild' aren't valid dependencies because mutating them doesn't re-render the component.","line":32,"column":4,"nodeType":"ArrayExpression","endLine":32,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[753,766],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'createElement'. Either exclude it or remove the dependency array. Outer scope values like 'createElement' aren't valid dependencies because mutating them doesn't re-render the component.","line":36,"column":4,"nodeType":"ArrayExpression","endLine":36,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[840,855],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'log'. Either exclude it or remove the dependency array. Outer scope values like 'log' aren't valid dependencies because mutating them doesn't re-render the component.","line":44,"column":4,"nodeType":"ArrayExpression","endLine":44,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1004,1009],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'error'. Either exclude it or remove the dependency array. Outer scope values like 'error' aren't valid dependencies because mutating them doesn't re-render the component.","line":52,"column":4,"nodeType":"ArrayExpression","endLine":52,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1162,1169],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'appendChild'. Either exclude it or remove the dependency array. Outer scope values like 'appendChild' aren't valid dependencies because mutating them doesn't re-render the component.","line":56,"column":4,"nodeType":"ArrayExpression","endLine":56,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1239,1252],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'setTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":60,"column":4,"nodeType":"ArrayExpression","endLine":60,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1320,1332],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has duplicate dependencies: 'stableAppendChild', 'stableCreateElement', 'stableSetMapboxStatus', and 'stableSetTokenStatus'. Either omit them or remove the dependency array.","line":76,"column":4,"nodeType":"ArrayExpression","endLine":76,"endColumn":255,"suggestions":[{"desc":"Update the dependencies array to be: [stableIncludes, stableSetTokenStatus, stableSetMapboxStatus, stableCreateElement, stableAppendChild, stableLog, stableError, stableSetTimeout]","fix":{"range":[1660,1911],"text":"[stableIncludes, stableSetTokenStatus, stableSetMapboxStatus, stableCreateElement, stableAppendChild, stableLog, stableError, stableSetTimeout]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from 'react';\n\nexport default function TestFinalPage() {\n  const [mapboxStatus, setMapboxStatus] = useState('Chargement...');\n  const [tokenStatus, setTokenStatus] = useState('Vérification...');\n\n  \nconst stableIncludes = useCallback(() => {\n  includes();\n}, [includes]);\n\nconst stableSetTokenStatus = useCallback(() => {\n  setTokenStatus();\n}, [setTokenStatus]);\n\nconst stableSetTokenStatus = useCallback(() => {\n  setTokenStatus();\n}, [setTokenStatus]);\n\nconst stableSetMapboxStatus = useCallback(() => {\n  setMapboxStatus();\n}, [setMapboxStatus]);\n\nconst stableCreateElement = useCallback(() => {\n  createElement();\n}, [createElement]);\n\nconst stableAppendChild = useCallback(() => {\n  appendChild();\n}, [appendChild]);\n\nconst stableCreateElement = useCallback(() => {\n  createElement();\n}, [createElement]);\n\nconst stableSetMapboxStatus = useCallback(() => {\n  setMapboxStatus();\n}, [setMapboxStatus]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetMapboxStatus = useCallback(() => {\n  setMapboxStatus();\n}, [setMapboxStatus]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableAppendChild = useCallback(() => {\n  appendChild();\n}, [appendChild]);\n\nconst stableSetTimeout = useCallback(() => {\n  setTimeout();\n}, [setTimeout]);\n\nuseEffect(() => {\n  stableIncludes();\n  stableSetTokenStatus();\n  stableSetTokenStatus();\n  stableSetMapboxStatus();\n  stableCreateElement();\n  stableAppendChild();\n  stableCreateElement();\n  stableSetMapboxStatus();\n  stableLog();\n  stableSetMapboxStatus();\n  stableError();\n  stableAppendChild();\n  stableSetTimeout();\n}, [stableIncludes, stableSetTokenStatus, stableSetTokenStatus, stableSetMapboxStatus, stableCreateElement, stableAppendChild, stableCreateElement, stableSetMapboxStatus, stableLog, stableSetMapboxStatus, stableError, stableAppendChild, stableSetTimeout]);;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-3xl font-bold text-center mb-8 text-gray-800\">\n          🗺️ Test Final - Diagnostic Mapbox\n        </h1>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Status du token */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">🔑 Token Mapbox</h2>\n            <div className=\"space-y-2\">\n              <p><strong>Status:</strong> {tokenStatus}</p>\n              <p><strong>Valeur:</strong> {process.env.NEXT_PUBLIC_MAPBOX_TOKEN ? 'Présent' : 'Manquant'}</p>\n            </div>\n          </div>\n\n          {/* Status de Mapbox */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">🗺️ Mapbox GL JS</h2>\n            <div className=\"space-y-2\">\n              <p><strong>Status:</strong> {mapboxStatus}</p>\n              <p><strong>Window:</strong> {typeof window !== 'undefined' ? 'Disponible' : 'Non disponible'}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Carte de test simple */}\n        <div className=\"mt-8 bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">🗺️ Carte de Test</h2>\n          \n          <div className=\"relative bg-gray-100 rounded-lg\" style={{ height: '400px' }}>\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <div className=\"text-6xl mb-4\">🗺️</div>\n                <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">Carte Interactive</h3>\n                <p className=\"text-gray-600 mb-4\">Centre: Martinique (-61.55, 16.25)</p>\n                <p className=\"text-gray-600 mb-4\">Zoom: 12</p>\n                <p className=\"text-gray-600\">Style: Streets</p>\n              </div>\n            </div>\n            \n            {/* Overlay avec informations */}\n            <div className=\"absolute top-4 left-4 bg-white bg-opacity-90 p-3 rounded-lg shadow\">\n              <div className=\"text-sm\">\n                <p className=\"font-semibold text-gray-700\">📍 Centre</p>\n                <p className=\"text-blue-600\">Martinique (-61.55, 16.25)</p>\n              </div>\n            </div>\n            \n            <div className=\"absolute bottom-4 right-4 bg-white bg-opacity-90 p-3 rounded-lg shadow\">\n              <div className=\"text-sm\">\n                <p className=\"font-semibold text-gray-700\">🎯 Zoom</p>\n                <p className=\"text-green-600\">12</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n            <p className=\"text-blue-800 text-sm\">\n              <strong>Note:</strong> Cette page montre l&apos;interface de la carte. \n              Pour une carte interactive réelle, les scripts Mapbox doivent se charger correctement.\n            </p>\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"mt-8 bg-yellow-50 rounded-lg border border-yellow-200 p-6\">\n          <h2 className=\"text-xl font-semibold mb-4 text-yellow-800\">📝 Instructions</h2>\n          <div className=\"space-y-3 text-yellow-700\">\n            <p><strong>1.</strong> Vérifiez que le token Mapbox est configuré ✅</p>\n            <p><strong>2.</strong> Vérifiez que Mapbox GL JS se charge ✅</p>\n            <p><strong>3.</strong> Si tout est vert, la carte devrait fonctionner</p>\n            <p><strong>4.</strong> Ouvrez la console du navigateur pour voir les logs</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-geocoder/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-interactive-map/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-macro/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-map/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapboxgl' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'error'. Either exclude it or remove the dependency array. Outer scope values like 'error' aren't valid dependencies because mutating them doesn't re-render the component.","line":13,"column":4,"nodeType":"ArrayExpression","endLine":13,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[279,286],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'Map'. Either exclude it or remove the dependency array. Outer scope values like 'Map' aren't valid dependencies because mutating them doesn't re-render the component.","line":17,"column":4,"nodeType":"ArrayExpression","endLine":17,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[340,345],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'remove'. Either exclude it or remove the dependency array. Outer scope values like 'remove' aren't valid dependencies because mutating them doesn't re-render the component.","line":21,"column":4,"nodeType":"ArrayExpression","endLine":21,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[405,413],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nexport default function TestMap() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n\n  \nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableMap = useCallback(() => {\n  Map();\n}, [Map]);\n\nconst stableRemove = useCallback(() => {\n  remove();\n}, [remove]);\n\nuseEffect(() => {\n  stableError();\n  stableMap();\n  stableRemove();\n}, [stableError, stableMap, stableRemove]);;\n\n  return (\n    <div\n      ref={mapContainer}\n      style={{ width: \"100%\", height: \"500px\", border: \"2px solid red\" }}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-mapbox-alternative/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-mapbox-fallback/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\n\nexport default function TestMapboxFallbackPage() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [status, setStatus] = useState('Initialisation...');\n  const [showFallback, setShowFallback] = useState(false);\n\n  useEffect(() => {\n    const token = process.env.NEXT_PUBLIC_MAPBOX_TOKEN;\n    \n    if (!token || token.includes('your_real_token_here')) {\n      setError('Token Mapbox manquant ou invalide');\n      setStatus('❌ Token manquant');\n      setShowFallback(true);\n      return;\n    }\n\n    setStatus('✅ Token trouvé, chargement de Mapbox...');\n\n    // Timeout de sécurité - si Mapbox ne se charge pas en 5 secondes, afficher le fallback\n    const fallbackTimer = setTimeout(() => {\n      if (!isLoaded) {\n        setStatus('⏳ Timeout - affichage du fallback');\n        setShowFallback(true);\n      }\n    }, 5000);\n\n    // Fonction pour charger Mapbox\n    const loadMapbox = () => {\n      if ((window as unknown).mapboxgl) {\n        setStatus('✅ Mapbox déjà chargé, initialisation...');\n        initializeMap();\n        return;\n      }\n\n      // Charger le CSS\n      const cssLink = document.createElement('link');\n      cssLink.rel = 'stylesheet';\n      cssLink.href = 'https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css';\n      cssLink.crossOrigin = 'anonymous';\n      document.head.appendChild(cssLink);\n\n      // Charger le JS\n      const script = document.createElement('script');\n      script.src = 'https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js';\n      script.async = true;\n      script.crossOrigin = 'anonymous';\n      \n      script.onload = () => {\n        console.log('Mapbox GL JS chargé avec succès');\n        setStatus('✅ Mapbox chargé, initialisation de la carte...');\n        clearTimeout(fallbackTimer);\n        initializeMap();\n      };\n\n      script.onerror = () => {\n        console.error('Erreur chargement Mapbox');\n        setStatus('❌ Erreur de chargement - affichage du fallback');\n        setShowFallback(true);\n        clearTimeout(fallbackTimer);\n      };\n\n      document.head.appendChild(script);\n    };\n\n    const initializeMap = () => {\n      if (!mapContainer.current) return;\n\n      try {\n        const mapboxgl = (window as unknown).mapboxgl;\n        if (!mapboxgl) {\n          setError('Mapbox GL JS non disponible');\n          setStatus('❌ Mapbox non disponible - affichage du fallback');\n          setShowFallback(true);\n          return;\n        }\n\n        setStatus('✅ Initialisation de la carte...');\n        mapboxgl.accessToken = token;\n\n        // Initialiser la carte\n        const map = new mapboxgl.Map({\n          container: mapContainer.current,\n          style: 'mapbox://styles/mapbox/streets-v12',\n          center: [-61.55, 16.25], // Martinique\n          zoom: 12,\n          attributionControl: false\n        });\n\n        // Ajouter des contrôles\n        map.addControl(new mapboxgl.NavigationControl(), 'top-right');\n\n        // Marqueur principal\n        new mapboxgl.Marker({ color: '#10b981' })\n          .setLngLat([-61.55, 16.25])\n          .addTo(map);\n\n        // Événements de la carte\n        map.on('load', () => {\n          console.log('Carte chargée avec succès !');\n          setIsLoaded(true);\n          setStatus('✅ Carte chargée avec succès !');\n          clearTimeout(fallbackTimer);\n        });\n\n        map.on('error', (e: unknown) => {\n          console.error('Erreur Mapbox:', e);\n          setError('Erreur lors du chargement de la carte');\n          setStatus('❌ Erreur de carte - affichage du fallback');\n          setShowFallback(true);\n          clearTimeout(fallbackTimer);\n        });\n\n      } catch (err) {\n        console.error('Erreur d\\'initialisation Mapbox:', err);\n        setError('Impossible d\\'initialiser la carte');\n        setStatus('❌ Erreur d\\'initialisation - affichage du fallback');\n        setShowFallback(true);\n        clearTimeout(fallbackTimer);\n      }\n    };\n\n    // Délai pour s'assurer que le DOM est prêt\n    const timer = setTimeout(() => {\n      loadMapbox();\n    }, 1000);\n\n    return () => {\n      clearTimeout(timer);\n      clearTimeout(fallbackTimer);\n    };\n  }, [isLoaded]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-3xl font-bold text-center mb-8 text-gray-800\">\n          🗺️ Test Carte Mapbox - Avec Fallback\n        </h1>\n        \n        {/* Status en temps réel */}\n        <div className=\"bg-white rounded-lg shadow p-4 mb-6\">\n          <h2 className=\"text-lg font-semibold mb-3\">📊 Status en Temps Réel</h2>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-1\">\n              <p className=\"text-sm text-gray-600\">Progression:</p>\n              <p className=\"font-semibold text-blue-600\">{status}</p>\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"text-sm text-gray-600\">Mode:</p>\n              <p className=\"font-semibold text-purple-600\">\n                {showFallback ? '🔄 Fallback' : '🗺️ Mapbox'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Carte */}\n        <div className=\"bg-white rounded-lg shadow p-4\">\n          <h2 className=\"text-lg font-semibold mb-3\">🗺️ Carte Interactive</h2>\n          \n          <div className=\"relative\" style={{ height: '500px' }}>\n            <div \n              ref={mapContainer} \n              className=\"w-full h-full rounded-lg\"\n              style={{ height: '500px' }}\n            />\n            \n            {!isLoaded && !showFallback && (\n              <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center rounded-lg\">\n                <div className=\"text-center\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n                  <p className=\"text-gray-600\">{status}</p>\n                </div>\n              </div>\n            )}\n\n            {/* Fallback - Carte statique */}\n            {showFallback && (\n              <div className=\"absolute inset-0 bg-gradient-to-br from-blue-100 to-green-100 rounded-lg flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <div className=\"text-6xl mb-4\">🗺️</div>\n                  <h3 className=\"text-xl font-semibold text-gray-700 mb-2\">Carte Interactive</h3>\n                  <p className=\"text-gray-600 mb-4\">Centre: Martinique (-61.55, 16.25)</p>\n                  <p className=\"text-gray-600 mb-4\">Zoom: 12</p>\n                  <p className=\"text-gray-600 mb-4\">Style: Streets</p>\n                  <div className=\"mt-4 p-3 bg-yellow-100 rounded-lg\">\n                    <p className=\"text-yellow-800 text-sm\">\n                      <strong>Mode Fallback:</strong> Mapbox n&apos;a pas pu se charger\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            {/* Overlay avec informations */}\n            <div className=\"absolute top-4 left-4 bg-white bg-opacity-90 p-3 rounded-lg shadow\">\n              <div className=\"text-sm\">\n                <p className=\"font-semibold text-gray-700\">📍 Centre</p>\n                <p className=\"text-blue-600\">Martinique (-61.55, 16.25)</p>\n              </div>\n            </div>\n            \n            <div className=\"absolute bottom-4 right-4 bg-white bg-opacity-90 p-3 rounded-lg shadow\">\n              <div className=\"text-sm\">\n                <p className=\"font-semibold text-gray-700\">🎯 Zoom</p>\n                <p className=\"text-green-600\">12</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n            <p className=\"text-blue-800 text-sm\">\n              <strong>Status Final:</strong> {isLoaded ? '✅ Carte chargée avec succès !' : showFallback ? '🔄 Mode Fallback activé' : '⏳ Chargement en cours...'}\n            </p>\n            <p className=\"text-blue-700 text-xs mt-2\">\n              <strong>Fonctionnalité:</strong> {showFallback ? 'Affichage statique si Mapbox échoue' : 'Carte interactive Mapbox'}\n            </p>\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"mt-8 bg-green-50 rounded-lg border border-green-200 p-6\">\n          <h2 className=\"text-xl font-semibold mb-4 text-green-800\">✅ Instructions</h2>\n          <div className=\"space-y-3 text-green-700\">\n            <p><strong>1.</strong> Cette version inclut un système de fallback automatique</p>\n            <p><strong>2.</strong> Si Mapbox ne se charge pas en 5 secondes, affiche une carte statique</p>\n            <p><strong>3.</strong> L&apos;interface reste fonctionnelle même sans Mapbox</p>\n            <p><strong>4.</strong> Status en temps réel pour voir ce qui se passe</p>\n            <p><strong>5.</strong> Ouvrez la console pour voir les logs détaillés</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-mapbox-fixed/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'includes'. Either exclude it or remove the dependency array. Outer scope values like 'includes' aren't valid dependencies because mutating them doesn't re-render the component.","line":14,"column":4,"nodeType":"ArrayExpression","endLine":14,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[405,415],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'initializeMap'. Either exclude it or remove the dependency array. Outer scope values like 'initializeMap' aren't valid dependencies because mutating them doesn't re-render the component.","line":34,"column":4,"nodeType":"ArrayExpression","endLine":34,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[794,809],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'querySelector'. Either exclude it or remove the dependency array. Outer scope values like 'querySelector' aren't valid dependencies because mutating them doesn't re-render the component.","line":38,"column":4,"nodeType":"ArrayExpression","endLine":38,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[883,898],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'createElement'. Either exclude it or remove the dependency array. Outer scope values like 'createElement' aren't valid dependencies because mutating them doesn't re-render the component.","line":42,"column":4,"nodeType":"ArrayExpression","endLine":42,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[972,987],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'appendChild'. Either exclude it or remove the dependency array. Outer scope values like 'appendChild' aren't valid dependencies because mutating them doesn't re-render the component.","line":46,"column":4,"nodeType":"ArrayExpression","endLine":46,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1057,1070],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'createElement'. Either exclude it or remove the dependency array. Outer scope values like 'createElement' aren't valid dependencies because mutating them doesn't re-render the component.","line":50,"column":4,"nodeType":"ArrayExpression","endLine":50,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1144,1159],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'log'. Either exclude it or remove the dependency array. Outer scope values like 'log' aren't valid dependencies because mutating them doesn't re-render the component.","line":54,"column":4,"nodeType":"ArrayExpression","endLine":54,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1213,1218],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'setTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":62,"column":4,"nodeType":"ArrayExpression","endLine":62,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1363,1375],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'initializeMap'. Either exclude it or remove the dependency array. Outer scope values like 'initializeMap' aren't valid dependencies because mutating them doesn't re-render the component.","line":66,"column":4,"nodeType":"ArrayExpression","endLine":66,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1449,1464],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'setTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":78,"column":4,"nodeType":"ArrayExpression","endLine":78,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1674,1686],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'loadMapboxWithRetry'. Either exclude it or remove the dependency array. Outer scope values like 'loadMapboxWithRetry' aren't valid dependencies because mutating them doesn't re-render the component.","line":82,"column":4,"nodeType":"ArrayExpression","endLine":82,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1772,1793],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'appendChild'. Either exclude it or remove the dependency array. Outer scope values like 'appendChild' aren't valid dependencies because mutating them doesn't re-render the component.","line":94,"column":4,"nodeType":"ArrayExpression","endLine":94,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2014,2027],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'Map'. Either exclude it or remove the dependency array. Outer scope values like 'Map' aren't valid dependencies because mutating them doesn't re-render the component.","line":106,"column":4,"nodeType":"ArrayExpression","endLine":106,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2232,2237],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addControl'. Either exclude it or remove the dependency array. Outer scope values like 'addControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":110,"column":4,"nodeType":"ArrayExpression","endLine":110,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2305,2317],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'NavigationControl'. Either exclude it or remove the dependency array. Outer scope values like 'NavigationControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":114,"column":4,"nodeType":"ArrayExpression","endLine":114,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2399,2418],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'Marker'. Either exclude it or remove the dependency array. Outer scope values like 'Marker' aren't valid dependencies because mutating them doesn't re-render the component.","line":118,"column":4,"nodeType":"ArrayExpression","endLine":118,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2478,2486],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setLngLat'. Either exclude it or remove the dependency array. Outer scope values like 'setLngLat' aren't valid dependencies because mutating them doesn't re-render the component.","line":122,"column":4,"nodeType":"ArrayExpression","endLine":122,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2552,2563],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addTo'. Either exclude it or remove the dependency array. Outer scope values like 'addTo' aren't valid dependencies because mutating them doesn't re-render the component.","line":126,"column":4,"nodeType":"ArrayExpression","endLine":126,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2621,2628],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'on'. Either exclude it or remove the dependency array. Outer scope values like 'on' aren't valid dependencies because mutating them doesn't re-render the component.","line":130,"column":4,"nodeType":"ArrayExpression","endLine":130,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2680,2684],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'log'. Either exclude it or remove the dependency array. Outer scope values like 'log' aren't valid dependencies because mutating them doesn't re-render the component.","line":134,"column":4,"nodeType":"ArrayExpression","endLine":134,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2738,2743],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'on'. Either exclude it or remove the dependency array. Outer scope values like 'on' aren't valid dependencies because mutating them doesn't re-render the component.","line":146,"column":4,"nodeType":"ArrayExpression","endLine":146,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2955,2959],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'setTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":174,"column":4,"nodeType":"ArrayExpression","endLine":174,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[3459,3471],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'loadMapboxWithRetry'. Either exclude it or remove the dependency array. Outer scope values like 'loadMapboxWithRetry' aren't valid dependencies because mutating them doesn't re-render the component.","line":178,"column":4,"nodeType":"ArrayExpression","endLine":178,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[3557,3578],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'clearTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'clearTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":182,"column":4,"nodeType":"ArrayExpression","endLine":182,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[3650,3664],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has duplicate dependencies: 'stableAppendChild', 'stableCreateElement', 'stableError', 'stableInitializeMap', 'stableLoadMapboxWithRetry', 'stableLog', 'stableOn', 'stableSetError', 'stableSetStatus', and 'stableSetTimeout'. Either omit them or remove the dependency array.","line":228,"column":4,"nodeType":"ArrayExpression","endLine":228,"endColumn":739,"suggestions":[{"desc":"Update the dependencies array to be: [stableIncludes, stableSetError, stableSetStatus, stableInitializeMap, stableQuerySelector, stableCreateElement, stableAppendChild, stableLog, stableSetTimeout, stableError, stableLoadMapboxWithRetry, stableMap, stableAddControl, stableNavigationControl, stableMarker, stableSetLngLat, stableAddTo, stableOn, stableSetIsLoaded, stableClearTimeout]","fix":{"range":[4596,5331],"text":"[stableIncludes, stableSetError, stableSetStatus, stableInitializeMap, stableQuerySelector, stableCreateElement, stableAppendChild, stableLog, stableSetTimeout, stableError, stableLoadMapboxWithRetry, stableMap, stableAddControl, stableNavigationControl, stableMarker, stableSetLngLat, stableAddTo, stableOn, stableSetIsLoaded, stableClearTimeout]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\n\nexport default function TestMapboxFixedPage() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [status, setStatus] = useState('Initialisation...');\n\n  \nconst stableIncludes = useCallback(() => {\n  includes();\n}, [includes]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableInitializeMap = useCallback(() => {\n  initializeMap();\n}, [initializeMap]);\n\nconst stableQuerySelector = useCallback(() => {\n  querySelector();\n}, [querySelector]);\n\nconst stableCreateElement = useCallback(() => {\n  createElement();\n}, [createElement]);\n\nconst stableAppendChild = useCallback(() => {\n  appendChild();\n}, [appendChild]);\n\nconst stableCreateElement = useCallback(() => {\n  createElement();\n}, [createElement]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableSetTimeout = useCallback(() => {\n  setTimeout();\n}, [setTimeout]);\n\nconst stableInitializeMap = useCallback(() => {\n  initializeMap();\n}, [initializeMap]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableSetTimeout = useCallback(() => {\n  setTimeout();\n}, [setTimeout]);\n\nconst stableLoadMapboxWithRetry = useCallback(() => {\n  loadMapboxWithRetry();\n}, [loadMapboxWithRetry]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableAppendChild = useCallback(() => {\n  appendChild();\n}, [appendChild]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableMap = useCallback(() => {\n  Map();\n}, [Map]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableNavigationControl = useCallback(() => {\n  NavigationControl();\n}, [NavigationControl]);\n\nconst stableMarker = useCallback(() => {\n  Marker();\n}, [Marker]);\n\nconst stableSetLngLat = useCallback(() => {\n  setLngLat();\n}, [setLngLat]);\n\nconst stableAddTo = useCallback(() => {\n  addTo();\n}, [addTo]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetIsLoaded = useCallback(() => {\n  setIsLoaded();\n}, [setIsLoaded]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableSetStatus = useCallback(() => {\n  setStatus();\n}, [setStatus]);\n\nconst stableSetTimeout = useCallback(() => {\n  setTimeout();\n}, [setTimeout]);\n\nconst stableLoadMapboxWithRetry = useCallback(() => {\n  loadMapboxWithRetry();\n}, [loadMapboxWithRetry]);\n\nconst stableClearTimeout = useCallback(() => {\n  clearTimeout();\n}, [clearTimeout]);\n\nuseEffect(() => {\n  stableIncludes();\n  stableSetError();\n  stableSetStatus();\n  stableSetStatus();\n  stableSetStatus();\n  stableInitializeMap();\n  stableQuerySelector();\n  stableCreateElement();\n  stableAppendChild();\n  stableCreateElement();\n  stableLog();\n  stableSetStatus();\n  stableSetTimeout();\n  stableInitializeMap();\n  stableError();\n  stableSetStatus();\n  stableSetTimeout();\n  stableLoadMapboxWithRetry();\n  stableSetError();\n  stableSetStatus();\n  stableAppendChild();\n  stableSetError();\n  stableSetStatus();\n  stableMap();\n  stableAddControl();\n  stableNavigationControl();\n  stableMarker();\n  stableSetLngLat();\n  stableAddTo();\n  stableOn();\n  stableLog();\n  stableSetIsLoaded();\n  stableSetStatus();\n  stableOn();\n  stableError();\n  stableSetError();\n  stableSetStatus();\n  stableError();\n  stableSetError();\n  stableSetStatus();\n  stableSetTimeout();\n  stableLoadMapboxWithRetry();\n  stableClearTimeout();\n}, [stableIncludes, stableSetError, stableSetStatus, stableSetStatus, stableSetStatus, stableInitializeMap, stableQuerySelector, stableCreateElement, stableAppendChild, stableCreateElement, stableLog, stableSetStatus, stableSetTimeout, stableInitializeMap, stableError, stableSetStatus, stableSetTimeout, stableLoadMapboxWithRetry, stableSetError, stableSetStatus, stableAppendChild, stableSetError, stableSetStatus, stableMap, stableAddControl, stableNavigationControl, stableMarker, stableSetLngLat, stableAddTo, stableOn, stableLog, stableSetIsLoaded, stableSetStatus, stableOn, stableError, stableSetError, stableSetStatus, stableError, stableSetError, stableSetStatus, stableSetTimeout, stableLoadMapboxWithRetry, stableClearTimeout]);;\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-4 flex items-center justify-center\">\n        <div className=\"bg-white rounded-lg shadow-lg p-6 max-w-md\">\n          <div className=\"text-center\">\n            <div className=\"text-4xl mb-3\">❌</div>\n            <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Erreur de carte</h3>\n            <p className=\"text-red-600 text-sm mb-4\">{error}</p>\n            <p className=\"text-gray-600 text-sm\">Status: {status}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-3xl font-bold text-center mb-8 text-gray-800\">\n          🗺️ Test Carte Mapbox - Version Corrigée\n        </h1>\n        \n        {/* Status en temps réel */}\n        <div className=\"bg-white rounded-lg shadow p-4 mb-6\">\n          <h2 className=\"text-lg font-semibold mb-3\">📊 Status en Temps Réel</h2>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-1\">\n              <p className=\"text-sm text-gray-600\">Progression:</p>\n              <p className=\"font-semibold text-blue-600\">{status}</p>\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"text-sm text-gray-600\">Token:</p>\n              <p className=\"font-semibold text-green-600\">\n                {process.env.NEXT_PUBLIC_MAPBOX_TOKEN ? '✅ Configuré' : '❌ Manquant'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Carte */}\n        <div className=\"bg-white rounded-lg shadow p-4\">\n          <h2 className=\"text-lg font-semibold mb-3\">🗺️ Carte Interactive</h2>\n          \n          <div className=\"relative\" style={{ height: '500px' }}>\n            <div \n              ref={mapContainer} \n              className=\"w-full h-full rounded-lg\"\n              style={{ height: '500px' }}\n            />\n            \n            {!isLoaded && (\n              <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center rounded-lg\">\n                <div className=\"text-center\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n                  <p className=\"text-gray-600\">{status}</p>\n                </div>\n              </div>\n            )}\n            \n            {/* Overlay avec informations */}\n            <div className=\"absolute top-4 left-4 bg-white bg-opacity-90 p-3 rounded-lg shadow\">\n              <div className=\"text-sm\">\n                <p className=\"font-semibold text-gray-700\">📍 Centre</p>\n                <p className=\"text-blue-600\">Martinique (-61.55, 16.25)</p>\n              </div>\n            </div>\n            \n            <div className=\"absolute bottom-4 right-4 bg-white bg-opacity-90 p-3 rounded-lg shadow\">\n              <div className=\"text-sm\">\n                <p className=\"font-semibold text-gray-700\">🎯 Zoom</p>\n                <p className=\"text-green-600\">12</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n            <p className=\"text-blue-800 text-sm\">\n              <strong>Status Final:</strong> {isLoaded ? '✅ Carte chargée avec succès !' : '⏳ Chargement en cours...'}\n            </p>\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"mt-8 bg-green-50 rounded-lg border border-green-200 p-6\">\n          <h2 className=\"text-xl font-semibold mb-4 text-green-800\">✅ Instructions</h2>\n          <div className=\"space-y-3 text-green-700\">\n            <p><strong>1.</strong> Cette version inclut un système de retry automatique</p>\n            <p><strong>2.</strong> Le status se met à jour en temps réel</p>\n            <p><strong>3.</strong> Si la carte ne se charge pas, elle réessaiera 3 fois</p>\n            <p><strong>4.</strong> Ouvrez la console pour voir les logs détaillés</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-mapbox/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-maps/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-neighborhoods/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-page/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-popup-variants/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-quiz/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-real-map/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-real-mapbox/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-scratch-animations-simple/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-scratch-animations/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-scratch-comparison/page.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Identifier expected.","line":56,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport { useScratchAvailability } from \"@/hooks/useScratchAvailability\";\nimport SadEmojiRain from \"@/components/SadEmojiRain\";\nimport HappyEmojiRain from \"@/components/HappyEmojiRain\";\nimport MoneyEmojiRain from \"@/components/MoneyEmojiRain\";\n\n// Ancien code scratch (Version 1 - Canvas Custom) - AMÉLIORÉ\nfunction OldScratchCard() {\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  const containerRef = React.useRef<HTMLDivElement>(null);\n\n  // état\n  const [isWinner] = useState<boolean>(Math.random() > 0.5);\n  const [variation, setVariation] = useState<string>(\"\");\n  const [revealed, setRevealed] = useState(false);\n  const [popupVisible, setPopupVisible] = useState(false);\n  const [popupClosing, setPopupClosing] = useState(false);\n  const [prize, setPrize] = useState(\"\");\n  const [reward, setReward] = useState<{ type: string; amount: number }>({ type: \"none\", amount: 0 });\n\n  // État pour emojis\n  const [showSadEmojis, setShowSadEmojis] = useState(false);\n  const [showHappyEmojis, setShowHappyEmojis] = useState(false);\n  const [showMoneyEmojis, setShowMoneyEmojis] = useState(false);\n\n  const lastPos = React.useRef<{ x: number; y: number } | null>(null);\n  const lastCheck = React.useRef<number>(0);\n\n  const WIN_VARIATIONS = [\n    \"🎉 Bravo, tu repars avec une récompense !\",\n    \"🏆 C'est gagné !\",\n    \"✨ Quelle chance, tu as gagné !\",\n    \"💎 Jackpot, félicitations !\",\n  ];\n  const LOSE_VARIATIONS = [\n    \"😢 Pas de chance cette fois...\",\n    \"💔 Dommage, retente ta chance bientôt !\",\n    \"🙃 Ce n'est pas gagné aujourd'hui...\",\n    \"😔 Tu feras mieux la prochaine fois !\",\n  ];\n\n  function getRandomPrize(won: boolean) {\n    if (!won) return { type: \"none\", amount: 0 };\n    const POINTS = [50, 100, 200];\n    const REDUCTIONS = [5, 10, 15]; // en %\n    if (Math.random() < 0.5) {\n      return { type: \"points\", amount: POINTS[Math.floor(Math.random() * POINTS.length)] };\n    } else {\n      return { type: \"reduction\", amount: REDUCTIONS[Math.floor(Math.random() * REDUCTIONS.length)] };\n    }\n  }\n\n  // Init texte\n  React.\nconst stableSetVariation = useCallback(() => {\n  setVariation();\n}, [setVariation]);\n\nconst stableFloor = useCallback(() => {\n  floor();\n}, [floor]);\n\nconst stableRandom = useCallback(() => {\n  random();\n}, [random]);\n\nconst stableFloor = useCallback(() => {\n  floor();\n}, [floor]);\n\nconst stableRandom = useCallback(() => {\n  random();\n}, [random]);\n\nconst stableGetRandomPrize = useCallback(() => {\n  getRandomPrize();\n}, [getRandomPrize]);\n\nconst stableSetReward = useCallback(() => {\n  setReward();\n}, [setReward]);\n\nconst stableSetPrize = useCallback(() => {\n  setPrize();\n}, [setPrize]);\n\nconst stableUseEffect = useCallback(() => {\n  useEffect();\n}, [useEffect]);\n\nconst stableGetContext = useCallback(() => {\n  getContext();\n}, [getContext]);\n\nconst stableGetBoundingClientRect = useCallback(() => {\n  getBoundingClientRect();\n}, [getBoundingClientRect]);\n\nconst stableFillRect = useCallback(() => {\n  fillRect();\n}, [fillRect]);\n\nconst stableFloor = useCallback(() => {\n  floor();\n}, [floor]);\n\nconst stableFillText = useCallback(() => {\n  fillText();\n}, [fillText]);\n\nconst stableResize = useCallback(() => {\n  resize();\n}, [resize]);\n\nconst stableResizeObserver = useCallback(() => {\n  ResizeObserver();\n}, [ResizeObserver]);\n\nconst stableObserve = useCallback(() => {\n  observe();\n}, [observe]);\n\nconst stableDisconnect = useCallback(() => {\n  disconnect();\n}, [disconnect]);\n\nuseEffect(() => {\n  stableSetVariation();\n  stableFloor();\n  stableRandom();\n  stableFloor();\n  stableRandom();\n  stableGetRandomPrize();\n  stableSetReward();\n  stableSetPrize();\n  stableUseEffect();\n  stableGetContext();\n  stableGetBoundingClientRect();\n  stableFillRect();\n  stableFloor();\n  stableFillText();\n  stableResize();\n  stableResizeObserver();\n  stableObserve();\n  stableDisconnect();\n}, [stableSetVariation, stableFloor, stableRandom, stableFloor, stableRandom, stableGetRandomPrize, stableSetReward, stableSetPrize, stableUseEffect, stableGetContext, stableGetBoundingClientRect, stableFillRect, stableFloor, stableFillText, stableResize, stableResizeObserver, stableObserve, stableDisconnect]);;\n\n  // Scratch\n  const scratchAt = (x: number, y: number) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    ctx.globalCompositeOperation = \"destination-out\";\n    ctx.lineJoin = \"round\";\n    ctx.lineCap = \"round\";\n    ctx.lineWidth = 40;\n\n    ctx.beginPath();\n    if (lastPos.current) {\n      ctx.moveTo(lastPos.current.x, lastPos.current.y);\n      ctx.lineTo(x, y);\n    } else {\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + 0.1, y + 0.1);\n    }\n    ctx.stroke();\n\n    lastPos.current = { x, y };\n\n    const now = Date.now();\n    if (now - lastCheck.current > 200 && !revealed) {\n      lastCheck.current = now;\n      checkProgress();\n    }\n  };\n\n  const checkProgress = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    let transparent = 0;\n    // ⚡ Optimisation: on échantillonne 1 pixel sur 10\n    for (let i = 3; i < imageData.data.length; i += 40) {\n      if (imageData.data[i] === 0) transparent++;\n    }\n    const percent = transparent / (canvas.width * canvas.height / 10);\n\n    if (percent > 0.4 && !revealed) {\n      setRevealed(true);\n      setPopupVisible(true);\n\n      // 🎊 Déclenche les emojis selon le type de récompense\n      triggerEmojis();\n\n      setTimeout(() => {\n        setPopupClosing(true);\n        setTimeout(() => {\n          setPopupVisible(false);\n          setPopupClosing(false);\n        }, 1000);\n      }, 3000);\n    }\n  };\n\n  const triggerEmojis = () => {\n    if (reward.type === \"points\" && reward.amount >= 100) {\n      setShowMoneyEmojis(true);\n      setTimeout(() => setShowMoneyEmojis(false), 5000);\n    } else if (reward.type === \"points\" && reward.amount > 0) {\n      setShowHappyEmojis(true);\n      setTimeout(() => setShowHappyEmojis(false), 5000);\n    } else if (reward.type === \"reduction\" && reward.amount >= 10) {\n      setShowMoneyEmojis(true);\n      setTimeout(() => setShowMoneyEmojis(false), 5000);\n    } else if (reward.type === \"reduction\" && reward.amount > 0) {\n      setShowHappyEmojis(true);\n      setTimeout(() => setShowHappyEmojis(false), 5000);\n    } else {\n      setShowSadEmojis(true);\n      setTimeout(() => setShowSadEmojis(false), 5000);\n    }\n  };\n\n  const handleDown = (x: number, y: number) => {\n    lastPos.current = { x, y };\n    scratchAt(x, y);\n  };\n\n  const handleUp = () => {\n    lastPos.current = null;\n  };\n\n  const handleMove = (e: React.MouseEvent | React.TouchEvent) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    let x = 0, y = 0;\n    if (\"touches\" in e) {\n      x = e.touches[0].clientX - rect.left;\n      y = e.touches[0].clientY - rect.top;\n    } else {\n      x = e.clientX - rect.left;\n      y = e.clientY - rect.top;\n    }\n    scratchAt(x, y);\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center p-6 relative\">\n      <h2 className=\"text-lg font-bold mb-3 text-red-600\">🔴 ANCIEN CODE AMÉLIORÉ (Canvas + Emojis)</h2>\n\n      <div\n        ref={containerRef}\n        className=\"relative w-[300px] h-[180px] sm:w-[400px] sm:h-[240px] flex items-center justify-center rounded-lg overflow-hidden bg-white text-sm sm:text-base font-bold text-center p-2\"\n      >\n        {variation}\n        {!revealed && (\n          <canvas\n            ref={canvasRef}\n            className=\"absolute inset-0\"\n            onMouseMove={handleMove}\n            onMouseDown={(e) => {\n              const rect = e.currentTarget.getBoundingClientRect();\n              handleDown(e.clientX - rect.left, e.clientY - rect.top);\n            }}\n            onMouseUp={handleUp}\n            onTouchMove={handleMove}\n            onTouchStart={(e) => {\n              const rect = e.currentTarget.getBoundingClientRect();\n              const touch = e.touches[0];\n              handleDown(touch.clientX - rect.left, touch.clientY - rect.top);\n            }}\n            onTouchEnd={handleUp}\n          />\n        )}\n      </div>\n\n      {popupVisible && (\n        <div\n          className={`fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 \n            z-[9999] w-80 p-6 rounded-2xl shadow-2xl text-center\n            ${popupClosing ? \"animate-slide-out\" : \"animate-slide-in\"}\n            ${isWinner\n              ? \"bg-gradient-to-r from-yellow-200 via-yellow-300 to-yellow-400 text-gray-900\"\n              : \"bg-gradient-to-r from-red-400 to-red-600 text-white\"\n            }`}\n        >\n          <div className=\"text-4xl mb-2\">{isWinner ? \"🎉\" : \"💔\"}</div>\n          <h3 className=\"text-lg font-bold mb-2\">\n            {isWinner ? \"Félicitations !\" : \"Pas de chance...\"}\n          </h3>\n          <p className=\"text-sm mb-3\">{prize}</p>\n          <button\n            onClick={() => setPopupVisible(false)}\n            className=\"mt-2 px-4 py-2 bg-black/20 rounded-lg hover:bg-black/40\"\n          >\n            Fermer\n          </button>\n        </div>\n      )}\n\n      {/* Animations d'emojis */}\n      {showSadEmojis && <SadEmojiRain count={20} speedConfig={{ duration: 3, delay: 1.5 }} />}\n      {showHappyEmojis && <HappyEmojiRain count={20} speedConfig={{ duration: 3, delay: 1.5 }} />}\n      {showMoneyEmojis && <MoneyEmojiRain count={20} speedConfig={{ duration: 3, delay: 1.5 }} />}\n    </div>\n  );\n}\n\n// Nouveau code scratch (Version actuelle - Librairie)\nimport dynamic from \"next/dynamic\";\nimport confetti from \"canvas-confetti\";\n\nconst ScratchCard = dynamic(() => import(\"react-scratchcard-v2\"), { ssr: false });\n\nfunction NewScratchCard() {\n  const [showSadEmojis, setShowSadEmojis] = useState(false);\n  const [showHappyEmojis, setShowHappyEmojis] = useState(false);\n  const [showMoneyEmojis, setShowMoneyEmojis] = useState(false);\n  \n  const emojiConfig = {\n    count: 20,\n    speedConfig: { duration: 3, delay: 1.5 }\n  };\n\n  const reward = { type: 'points' as const, amount: 50, label: '+50 points' };\n\n  const settings = {\n    width: 320,\n    height: 200,\n    image: \"/scratch-overlay.png\",\n    finishPercent: 50,\n    onComplete: () => {\n      console.log(\"🎉 Scratch terminé :\", reward.label);\n      \n      confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } });\n      \n      if (reward.type === \"gift\" || reward.amount >= 50) {\n        setShowMoneyEmojis(true);\n        setTimeout(() => setShowMoneyEmojis(false), 5000);\n      } else if (reward.amount > 0) {\n        setShowHappyEmojis(true);\n        setTimeout(() => setShowHappyEmojis(false), 5000);\n      } else {\n        setShowSadEmojis(true);\n        setTimeout(() => setShowSadEmojis(false), 5000);\n      }\n    },\n  };\n\n  return (\n    <div className=\"p-6 bg-gray-100 rounded-xl shadow relative text-center\">\n      <h2 className=\"text-lg font-bold mb-3 text-green-600\">🟢 NOUVEAU CODE (Librairie)</h2>\n      <p className=\"text-gray-600 mb-4\">Grattez pour découvrir !</p>\n      <ScratchCard {...settings}>\n        <div className=\"w-full h-full flex items-center justify-center bg-white rounded-xl shadow\">\n          <p className=\"text-xl font-bold text-teal-600\">{reward.label}</p>\n        </div>\n      </ScratchCard>\n      \n      {showSadEmojis && <SadEmojiRain count={emojiConfig.count} speedConfig={emojiConfig.speedConfig} />}\n      {showHappyEmojis && <HappyEmojiRain count={emojiConfig.count} speedConfig={emojiConfig.speedConfig} />}\n      {showMoneyEmojis && <MoneyEmojiRain count={emojiConfig.count} speedConfig={emojiConfig.speedConfig} />}\n    </div>\n  );\n}\n\nexport default function TestScratchComparison() {\n  const { state, activate, markUsed, clear } = useScratchAvailability();\n\n  const resetOldCard = () => {\n    window.location.reload();\n  };\n\n  const resetNewCard = () => {\n    clear();\n    activate({ quizId: 'test', points: 50, label: '+50 points' });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            🎟️ Comparaison des Codes Scratch\n          </h1>\n          <p className=\"text-gray-600 max-w-2xl mx-auto\">\n            Testez côte à côte l&apos;ancien code (Canvas custom) et le nouveau code (Librairie react-scratchcard-v2)\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Ancien Code */}\n          <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n            <div className=\"mb-4\">\n              <h3 className=\"text-xl font-semibold text-red-600 mb-2\">\n                🔴 Ancien Code AMÉLIORÉ (Canvas + Emojis)\n              </h3>\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                <p>• ~250 lignes de code</p>\n                <p>• Gestion manuelle des événements</p>\n                <p>• Calculs optimisés (échantillonnage)</p>\n                <p>• Animations d&apos;emojis intégrées</p>\n                <p>• Système de récompenses avancé</p>\n                <p>• Bouton de fermeture popup</p>\n              </div>\n            </div>\n            <OldScratchCard />\n            <button \n              onClick={resetOldCard}\n              className=\"mt-4 px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition\"\n            >\n              🔄 Réinitialiser\n            </button>\n          </div>\n\n          {/* Nouveau Code */}\n          <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n            <div className=\"mb-4\">\n              <h3 className=\"text-xl font-semibold text-green-600 mb-2\">\n                🟢 Nouveau Code (Librairie)\n              </h3>\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                <p>• ~80 lignes de code</p>\n                <p>• Librairie éprouvée</p>\n                <p>• Optimisations intégrées</p>\n                <p>• Configuration simple</p>\n                <p>• Animations confettis + emojis</p>\n              </div>\n            </div>\n            <NewScratchCard />\n            <button \n              onClick={resetNewCard}\n              className=\"mt-4 px-4 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition\"\n            >\n              🔄 Réinitialiser\n            </button>\n          </div>\n        </div>\n\n        {/* Comparaison détaillée */}\n        <div className=\"mt-12 bg-white rounded-2xl shadow-lg p-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6 text-center\">\n            📊 Analyse Comparative\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-red-600 mb-4\">❌ Ancien Code - Problèmes</h3>\n              <ul className=\"space-y-2 text-sm text-gray-600\">\n                <li>• Code complexe et difficile à maintenir</li>\n                <li>• Gestion manuelle des événements mouse/touch</li>\n                <li>• Calculs de pourcentage intensifs</li>\n                <li>• ResizeObserver avec logique custom</li>\n                <li>• Animations CSS inline avec styled-jsx</li>\n                <li>• Gestion d&apos;état complexe</li>\n                <li>• Bugs potentiels sur mobile</li>\n                <li>• Performance dégradée</li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-semibold text-green-600 mb-4\">✅ Nouveau Code - Avantages</h3>\n              <ul className=\"space-y-2 text-sm text-gray-600\">\n                <li>• Code simple et lisible</li>\n                <li>• Librairie testée et éprouvée</li>\n                <li>• Optimisations de performance intégrées</li>\n                <li>• Configuration déclarative</li>\n                <li>• Animations confettis + emojis</li>\n                <li>• Gestion d&apos;état simplifiée</li>\n                <li>• Compatibilité mobile native</li>\n                <li>• Maintenance réduite</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"mt-8 bg-blue-50 rounded-2xl p-6\">\n          <h3 className=\"text-lg font-semibold text-blue-900 mb-3\">🎯 Instructions de Test</h3>\n          <div className=\"text-sm text-blue-800 space-y-2\">\n            <p>1. <strong>Testez l&apos;ancien code :</strong> Grattez la zone grise pour révéler le contenu</p>\n            <p>2. <strong>Testez le nouveau code :</strong> Grattez l&apos;image overlay pour révéler les points</p>\n            <p>3. <strong>Comparez :</strong> Fluidité, réactivité, animations</p>\n            <p>4. <strong>Mobile :</strong> Testez sur mobile pour voir la différence</p>\n            <p>5. <strong>Performance :</strong> Ouvrez les DevTools pour comparer les performances</p>\n          </div>\n        </div>\n      </div>\n\n      <style jsx>{`\n        @keyframes slideInBounce {\n          0% {\n            transform: translate(-50%, -200%);\n            opacity: 0;\n          }\n          50% {\n            transform: translate(-50%, -50%);\n            opacity: 1;\n          }\n          70% {\n            transform: translate(-50%, -55%);\n          }\n          100% {\n            transform: translate(-50%, -50%);\n          }\n        }\n        @keyframes slideOutUp {\n          0% {\n            transform: translate(-50%, -200%);\n            opacity: 1;\n          }\n          100% {\n            transform: translate(-50%, -200%);\n            opacity: 0;\n          }\n        }\n        .animate-slide-in {\n          animation: slideInBounce 1.2s ease-out forwards;\n        }\n        .animate-slide-out {\n          animation: slideOutUp 1s ease-in forwards;\n        }\n      `}</style>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-scratch-fixed/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-scratch-simple-fixed/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-scratch-simple/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-scratch-stable/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-scratch-with-emojis/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-search/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-simple-map/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-simple-mapbox/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-simple-working/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-simple/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapboxgl' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'error'. Either exclude it or remove the dependency array. Outer scope values like 'error' aren't valid dependencies because mutating them doesn't re-render the component.","line":13,"column":4,"nodeType":"ArrayExpression","endLine":13,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[286,293],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'Map'. Either exclude it or remove the dependency array. Outer scope values like 'Map' aren't valid dependencies because mutating them doesn't re-render the component.","line":17,"column":4,"nodeType":"ArrayExpression","endLine":17,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[347,352],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'Marker'. Either exclude it or remove the dependency array. Outer scope values like 'Marker' aren't valid dependencies because mutating them doesn't re-render the component.","line":21,"column":4,"nodeType":"ArrayExpression","endLine":21,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[412,420],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setLngLat'. Either exclude it or remove the dependency array. Outer scope values like 'setLngLat' aren't valid dependencies because mutating them doesn't re-render the component.","line":25,"column":4,"nodeType":"ArrayExpression","endLine":25,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[486,497],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addTo'. Either exclude it or remove the dependency array. Outer scope values like 'addTo' aren't valid dependencies because mutating them doesn't re-render the component.","line":29,"column":4,"nodeType":"ArrayExpression","endLine":29,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[555,562],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'remove'. Either exclude it or remove the dependency array. Outer scope values like 'remove' aren't valid dependencies because mutating them doesn't re-render the component.","line":33,"column":4,"nodeType":"ArrayExpression","endLine":33,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[622,630],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nexport default function TestSimplePage() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n\n  \nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableMap = useCallback(() => {\n  Map();\n}, [Map]);\n\nconst stableMarker = useCallback(() => {\n  Marker();\n}, [Marker]);\n\nconst stableSetLngLat = useCallback(() => {\n  setLngLat();\n}, [setLngLat]);\n\nconst stableAddTo = useCallback(() => {\n  addTo();\n}, [addTo]);\n\nconst stableRemove = useCallback(() => {\n  remove();\n}, [remove]);\n\nuseEffect(() => {\n  stableError();\n  stableMap();\n  stableMarker();\n  stableSetLngLat();\n  stableAddTo();\n  stableRemove();\n}, [stableError, stableMap, stableMarker, stableSetLngLat, stableAddTo, stableRemove]);;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-3xl font-bold text-center mb-8 text-gray-800\">\n          🗺️ Test Simple Mapbox\n        </h1>\n        \n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Carte Mapbox Basique</h2>\n          <div \n            ref={mapContainer} \n            style={{ \n              width: \"100%\", \n              height: \"500px\", \n              border: \"2px solid #10b981\",\n              borderRadius: \"8px\"\n            }} \n          />\n          <p className=\"text-gray-600 mt-4 text-center\">\n            Si vous voyez une carte avec un marqueur vert sur Paris, Mapbox fonctionne ! 🎉\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-simulated-map/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-threshold-fix/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-ultra-simple/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/app/test-working-map/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'includes'. Either exclude it or remove the dependency array. Outer scope values like 'includes' aren't valid dependencies because mutating them doesn't re-render the component.","line":13,"column":4,"nodeType":"ArrayExpression","endLine":13,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[343,353],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'initializeMap'. Either exclude it or remove the dependency array. Outer scope values like 'initializeMap' aren't valid dependencies because mutating them doesn't re-render the component.","line":21,"column":4,"nodeType":"ArrayExpression","endLine":21,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[501,516],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'querySelector'. Either exclude it or remove the dependency array. Outer scope values like 'querySelector' aren't valid dependencies because mutating them doesn't re-render the component.","line":25,"column":4,"nodeType":"ArrayExpression","endLine":25,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[590,605],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'createElement'. Either exclude it or remove the dependency array. Outer scope values like 'createElement' aren't valid dependencies because mutating them doesn't re-render the component.","line":29,"column":4,"nodeType":"ArrayExpression","endLine":29,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[679,694],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'appendChild'. Either exclude it or remove the dependency array. Outer scope values like 'appendChild' aren't valid dependencies because mutating them doesn't re-render the component.","line":33,"column":4,"nodeType":"ArrayExpression","endLine":33,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[764,777],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'createElement'. Either exclude it or remove the dependency array. Outer scope values like 'createElement' aren't valid dependencies because mutating them doesn't re-render the component.","line":37,"column":4,"nodeType":"ArrayExpression","endLine":37,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[851,866],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'log'. Either exclude it or remove the dependency array. Outer scope values like 'log' aren't valid dependencies because mutating them doesn't re-render the component.","line":41,"column":4,"nodeType":"ArrayExpression","endLine":41,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[920,925],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'setTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":45,"column":4,"nodeType":"ArrayExpression","endLine":45,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[993,1005],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'initializeMap'. Either exclude it or remove the dependency array. Outer scope values like 'initializeMap' aren't valid dependencies because mutating them doesn't re-render the component.","line":49,"column":4,"nodeType":"ArrayExpression","endLine":49,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1079,1094],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'appendChild'. Either exclude it or remove the dependency array. Outer scope values like 'appendChild' aren't valid dependencies because mutating them doesn't re-render the component.","line":61,"column":4,"nodeType":"ArrayExpression","endLine":61,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1303,1316],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'Map'. Either exclude it or remove the dependency array. Outer scope values like 'Map' aren't valid dependencies because mutating them doesn't re-render the component.","line":69,"column":4,"nodeType":"ArrayExpression","endLine":69,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1444,1449],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addControl'. Either exclude it or remove the dependency array. Outer scope values like 'addControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":73,"column":4,"nodeType":"ArrayExpression","endLine":73,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1517,1529],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'NavigationControl'. Either exclude it or remove the dependency array. Outer scope values like 'NavigationControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":77,"column":4,"nodeType":"ArrayExpression","endLine":77,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1611,1630],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'Marker'. Either exclude it or remove the dependency array. Outer scope values like 'Marker' aren't valid dependencies because mutating them doesn't re-render the component.","line":81,"column":4,"nodeType":"ArrayExpression","endLine":81,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1690,1698],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setLngLat'. Either exclude it or remove the dependency array. Outer scope values like 'setLngLat' aren't valid dependencies because mutating them doesn't re-render the component.","line":85,"column":4,"nodeType":"ArrayExpression","endLine":85,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1764,1775],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addTo'. Either exclude it or remove the dependency array. Outer scope values like 'addTo' aren't valid dependencies because mutating them doesn't re-render the component.","line":89,"column":4,"nodeType":"ArrayExpression","endLine":89,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1833,1840],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'on'. Either exclude it or remove the dependency array. Outer scope values like 'on' aren't valid dependencies because mutating them doesn't re-render the component.","line":93,"column":4,"nodeType":"ArrayExpression","endLine":93,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1892,1896],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'log'. Either exclude it or remove the dependency array. Outer scope values like 'log' aren't valid dependencies because mutating them doesn't re-render the component.","line":97,"column":4,"nodeType":"ArrayExpression","endLine":97,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1950,1955],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'on'. Either exclude it or remove the dependency array. Outer scope values like 'on' aren't valid dependencies because mutating them doesn't re-render the component.","line":105,"column":4,"nodeType":"ArrayExpression","endLine":105,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2090,2094],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'setTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":125,"column":4,"nodeType":"ArrayExpression","endLine":125,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2440,2452],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'loadMapbox'. Either exclude it or remove the dependency array. Outer scope values like 'loadMapbox' aren't valid dependencies because mutating them doesn't re-render the component.","line":129,"column":4,"nodeType":"ArrayExpression","endLine":129,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2520,2532],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'clearTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'clearTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":133,"column":4,"nodeType":"ArrayExpression","endLine":133,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2604,2618],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has duplicate dependencies: 'stableAppendChild', 'stableCreateElement', 'stableError', 'stableInitializeMap', 'stableLog', 'stableOn', 'stableSetError', and 'stableSetTimeout'. Either omit them or remove the dependency array.","line":167,"column":4,"nodeType":"ArrayExpression","endLine":167,"endColumn":515,"suggestions":[{"desc":"Update the dependencies array to be: [stableIncludes, stableSetError, stableInitializeMap, stableQuerySelector, stableCreateElement, stableAppendChild, stableLog, stableSetTimeout, stableError, stableMap, stableAddControl, stableNavigationControl, stableMarker, stableSetLngLat, stableAddTo, stableOn, stableSetIsLoaded, stableLoadMapbox, stableClearTimeout]","fix":{"range":[3278,3789],"text":"[stableIncludes, stableSetError, stableInitializeMap, stableQuerySelector, stableCreateElement, stableAppendChild, stableLog, stableSetTimeout, stableError, stableMap, stableAddControl, stableNavigationControl, stableMarker, stableSetLngLat, stableAddTo, stableOn, stableSetIsLoaded, stableLoadMapbox, stableClearTimeout]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\n\nexport default function TestWorkingMapPage() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  \nconst stableIncludes = useCallback(() => {\n  includes();\n}, [includes]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableInitializeMap = useCallback(() => {\n  initializeMap();\n}, [initializeMap]);\n\nconst stableQuerySelector = useCallback(() => {\n  querySelector();\n}, [querySelector]);\n\nconst stableCreateElement = useCallback(() => {\n  createElement();\n}, [createElement]);\n\nconst stableAppendChild = useCallback(() => {\n  appendChild();\n}, [appendChild]);\n\nconst stableCreateElement = useCallback(() => {\n  createElement();\n}, [createElement]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetTimeout = useCallback(() => {\n  setTimeout();\n}, [setTimeout]);\n\nconst stableInitializeMap = useCallback(() => {\n  initializeMap();\n}, [initializeMap]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableAppendChild = useCallback(() => {\n  appendChild();\n}, [appendChild]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableMap = useCallback(() => {\n  Map();\n}, [Map]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableNavigationControl = useCallback(() => {\n  NavigationControl();\n}, [NavigationControl]);\n\nconst stableMarker = useCallback(() => {\n  Marker();\n}, [Marker]);\n\nconst stableSetLngLat = useCallback(() => {\n  setLngLat();\n}, [setLngLat]);\n\nconst stableAddTo = useCallback(() => {\n  addTo();\n}, [addTo]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetIsLoaded = useCallback(() => {\n  setIsLoaded();\n}, [setIsLoaded]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableSetTimeout = useCallback(() => {\n  setTimeout();\n}, [setTimeout]);\n\nconst stableLoadMapbox = useCallback(() => {\n  loadMapbox();\n}, [loadMapbox]);\n\nconst stableClearTimeout = useCallback(() => {\n  clearTimeout();\n}, [clearTimeout]);\n\nuseEffect(() => {\n  stableIncludes();\n  stableSetError();\n  stableInitializeMap();\n  stableQuerySelector();\n  stableCreateElement();\n  stableAppendChild();\n  stableCreateElement();\n  stableLog();\n  stableSetTimeout();\n  stableInitializeMap();\n  stableError();\n  stableSetError();\n  stableAppendChild();\n  stableSetError();\n  stableMap();\n  stableAddControl();\n  stableNavigationControl();\n  stableMarker();\n  stableSetLngLat();\n  stableAddTo();\n  stableOn();\n  stableLog();\n  stableSetIsLoaded();\n  stableOn();\n  stableError();\n  stableSetError();\n  stableError();\n  stableSetError();\n  stableSetTimeout();\n  stableLoadMapbox();\n  stableClearTimeout();\n}, [stableIncludes, stableSetError, stableInitializeMap, stableQuerySelector, stableCreateElement, stableAppendChild, stableCreateElement, stableLog, stableSetTimeout, stableInitializeMap, stableError, stableSetError, stableAppendChild, stableSetError, stableMap, stableAddControl, stableNavigationControl, stableMarker, stableSetLngLat, stableAddTo, stableOn, stableLog, stableSetIsLoaded, stableOn, stableError, stableSetError, stableError, stableSetError, stableSetTimeout, stableLoadMapbox, stableClearTimeout]);;\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-4 flex items-center justify-center\">\n        <div className=\"bg-white rounded-lg shadow-lg p-6 max-w-md\">\n          <div className=\"text-center\">\n            <div className=\"text-4xl mb-3\">❌</div>\n            <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Erreur de carte</h3>\n            <p className=\"text-red-600 text-sm\">{error}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-2xl font-bold text-center mb-6 text-gray-800\">\n          🗺️ Test Carte Fonctionnelle\n        </h1>\n        \n        <div className=\"bg-white rounded-lg shadow p-4\">\n          <h2 className=\"text-lg font-semibold mb-3\">Carte Mapbox</h2>\n          \n          <div className=\"relative\" style={{ height: '500px' }}>\n            <div \n              ref={mapContainer} \n              className=\"w-full h-full rounded-lg\"\n              style={{ height: '500px' }}\n            />\n            \n            {!isLoaded && (\n              <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center rounded-lg\">\n                <div className=\"text-center\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n                  <p className=\"text-gray-600\">Chargement de la carte...</p>\n                </div>\n              </div>\n            )}\n            \n            {/* Overlay avec informations */}\n            <div className=\"absolute top-4 left-4 bg-white bg-opacity-90 p-3 rounded-lg shadow\">\n              <div className=\"text-sm\">\n                <p className=\"font-semibold text-gray-700\">📍 Centre</p>\n                <p className=\"text-blue-600\">Martinique (-61.55, 16.25)</p>\n              </div>\n            </div>\n            \n            <div className=\"absolute bottom-4 right-4 bg-white bg-opacity-90 p-3 rounded-lg shadow\">\n              <div className=\"text-sm\">\n                <p className=\"font-semibold text-gray-700\">🎯 Zoom</p>\n                <p className=\"text-green-600\">12</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mt-3 p-3 bg-blue-50 rounded\">\n            <p className=\"text-blue-800 text-sm\">\n              <strong>Status:</strong> {isLoaded ? '✅ Carte chargée avec succès !' : '⏳ Chargement en cours...'}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/AIInsightsADM.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'fetch'. Either exclude it or remove the dependency array. Outer scope values like 'fetch' aren't valid dependencies because mutating them doesn't re-render the component.","line":10,"column":4,"nodeType":"ArrayExpression","endLine":10,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[242,249],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'json'. Either exclude it or remove the dependency array. Outer scope values like 'json' aren't valid dependencies because mutating them doesn't re-render the component.","line":14,"column":4,"nodeType":"ArrayExpression","endLine":14,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[305,311],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'error'. Either exclude it or remove the dependency array. Outer scope values like 'error' aren't valid dependencies because mutating them doesn't re-render the component.","line":22,"column":4,"nodeType":"ArrayExpression","endLine":22,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[452,459],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'fetchInsights'. Either exclude it or remove the dependency array. Outer scope values like 'fetchInsights' aren't valid dependencies because mutating them doesn't re-render the component.","line":30,"column":4,"nodeType":"ArrayExpression","endLine":30,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[616,631],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a duplicate dependency: 'stableSetInsights'. Either omit it or remove the dependency array.","line":39,"column":4,"nodeType":"ArrayExpression","endLine":39,"endColumn":101,"suggestions":[{"desc":"Update the dependencies array to be: [stableFetch, stableJson, stableSetInsights, stableError, stableFetchInsights]","fix":{"range":[777,874],"text":"[stableFetch, stableJson, stableSetInsights, stableError, stableFetchInsights]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useState } from \"react\";\n\nexport default function AIInsightsADM() {\n  const [insights, setInsights] = useState<string>(\"Chargement des analyses...\");\n\n  \nconst stableFetch = useCallback(() => {\n  fetch();\n}, [fetch]);\n\nconst stableJson = useCallback(() => {\n  json();\n}, [json]);\n\nconst stableSetInsights = useCallback(() => {\n  setInsights();\n}, [setInsights]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetInsights = useCallback(() => {\n  setInsights();\n}, [setInsights]);\n\nconst stableFetchInsights = useCallback(() => {\n  fetchInsights();\n}, [fetchInsights]);\n\nuseEffect(() => {\n  stableFetch();\n  stableJson();\n  stableSetInsights();\n  stableError();\n  stableSetInsights();\n  stableFetchInsights();\n}, [stableFetch, stableJson, stableSetInsights, stableError, stableSetInsights, stableFetchInsights]);;\n\n  return (\n    <section className=\"bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200 rounded-xl shadow p-6\">\n      <h2 className=\"text-lg font-semibold mb-4\">🤖 Analyse Stratégique ADM</h2>\n      <div className=\"space-y-3 text-gray-700 whitespace-pre-line\">\n        {insights.split(\"\\n\").map((line, idx) => (\n          <p key={idx}>{line}</p>\n        ))}\n      </div>\n    </section>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/AIInsightsBox.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'fetch'. Either exclude it or remove the dependency array. Outer scope values like 'fetch' aren't valid dependencies because mutating them doesn't re-render the component.","line":10,"column":4,"nodeType":"ArrayExpression","endLine":10,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[240,247],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'json'. Either exclude it or remove the dependency array. Outer scope values like 'json' aren't valid dependencies because mutating them doesn't re-render the component.","line":14,"column":4,"nodeType":"ArrayExpression","endLine":14,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[303,309],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'error'. Either exclude it or remove the dependency array. Outer scope values like 'error' aren't valid dependencies because mutating them doesn't re-render the component.","line":22,"column":4,"nodeType":"ArrayExpression","endLine":22,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[447,454],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'fetchInsight'. Either exclude it or remove the dependency array. Outer scope values like 'fetchInsight' aren't valid dependencies because mutating them doesn't re-render the component.","line":30,"column":4,"nodeType":"ArrayExpression","endLine":30,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[606,620],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a duplicate dependency: 'stableSetInsight'. Either omit it or remove the dependency array.","line":39,"column":4,"nodeType":"ArrayExpression","endLine":39,"endColumn":98,"suggestions":[{"desc":"Update the dependencies array to be: [stableFetch, stableJson, stableSetInsight, stableError, stableFetchInsight]","fix":{"range":[763,857],"text":"[stableFetch, stableJson, stableSetInsight, stableError, stableFetchInsight]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useState } from \"react\";\n\nexport default function AIInsightsBox() {\n  const [insight, setInsight] = useState<string>(\"Chargement de l'analyse...\");\n\n  \nconst stableFetch = useCallback(() => {\n  fetch();\n}, [fetch]);\n\nconst stableJson = useCallback(() => {\n  json();\n}, [json]);\n\nconst stableSetInsight = useCallback(() => {\n  setInsight();\n}, [setInsight]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetInsight = useCallback(() => {\n  setInsight();\n}, [setInsight]);\n\nconst stableFetchInsight = useCallback(() => {\n  fetchInsight();\n}, [fetchInsight]);\n\nuseEffect(() => {\n  stableFetch();\n  stableJson();\n  stableSetInsight();\n  stableError();\n  stableSetInsight();\n  stableFetchInsight();\n}, [stableFetch, stableJson, stableSetInsight, stableError, stableSetInsight, stableFetchInsight]);;\n\n  return (\n    <section className=\"bg-gradient-to-r from-emerald-50 to-teal-50 border border-emerald-200 rounded-xl shadow p-6\">\n      <h2 className=\"text-lg font-semibold mb-2\">🤖 Analyse IA</h2>\n      <p className=\"text-gray-700\">{insight}</p>\n    </section>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/AdminDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":16,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'from'. Either exclude it or remove the dependency array. Outer scope values like 'from' aren't valid dependencies because mutating them doesn't re-render the component.","line":25,"column":4,"nodeType":"ArrayExpression","endLine":25,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[649,655],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'select'. Either exclude it or remove the dependency array. Outer scope values like 'select' aren't valid dependencies because mutating them doesn't re-render the component.","line":29,"column":4,"nodeType":"ArrayExpression","endLine":29,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[715,723],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'from'. Either exclude it or remove the dependency array. Outer scope values like 'from' aren't valid dependencies because mutating them doesn't re-render the component.","line":33,"column":4,"nodeType":"ArrayExpression","endLine":33,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[779,785],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'select'. Either exclude it or remove the dependency array. Outer scope values like 'select' aren't valid dependencies because mutating them doesn't re-render the component.","line":37,"column":4,"nodeType":"ArrayExpression","endLine":37,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[845,853],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'from'. Either exclude it or remove the dependency array. Outer scope values like 'from' aren't valid dependencies because mutating them doesn't re-render the component.","line":41,"column":4,"nodeType":"ArrayExpression","endLine":41,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[909,915],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'select'. Either exclude it or remove the dependency array. Outer scope values like 'select' aren't valid dependencies because mutating them doesn't re-render the component.","line":45,"column":4,"nodeType":"ArrayExpression","endLine":45,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[975,983],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'error'. Either exclude it or remove the dependency array. Outer scope values like 'error' aren't valid dependencies because mutating them doesn't re-render the component.","line":61,"column":4,"nodeType":"ArrayExpression","endLine":61,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1308,1315],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'load'. Either exclude it or remove the dependency array. Outer scope values like 'load' aren't valid dependencies because mutating them doesn't re-render the component.","line":69,"column":4,"nodeType":"ArrayExpression","endLine":69,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1451,1457],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has duplicate dependencies: 'stableFrom' and 'stableSelect'. Either omit them or remove the dependency array.","line":84,"column":4,"nodeType":"ArrayExpression","endLine":84,"endColumn":188,"suggestions":[{"desc":"Update the dependencies array to be: [stableFrom, stableSelect, stableSetGlobalStats, stableSetTodayStats, stableSetWeekStats, stableError, stableSetLoading, stableLoad]","fix":{"range":[1714,1898],"text":"[stableFrom, stableSelect, stableSetGlobalStats, stableSetTodayStats, stableSetWeekStats, stableError, stableSetLoading, stableLoad]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Legend,\n} from \"recharts\";\n\nexport default function AdminDashboard() {\n  const supabase = createClientComponentClient();\n  const [globalStats, setGlobalStats] = useState<unknown[]>([]);\n  const [todayStats, setTodayStats] = useState<unknown[]>([]);\n  const [weekStats, setWeekStats] = useState<unknown[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  \nconst stableFrom = useCallback(() => {\n  from();\n}, [from]);\n\nconst stableSelect = useCallback(() => {\n  select();\n}, [select]);\n\nconst stableFrom = useCallback(() => {\n  from();\n}, [from]);\n\nconst stableSelect = useCallback(() => {\n  select();\n}, [select]);\n\nconst stableFrom = useCallback(() => {\n  from();\n}, [from]);\n\nconst stableSelect = useCallback(() => {\n  select();\n}, [select]);\n\nconst stableSetGlobalStats = useCallback(() => {\n  setGlobalStats();\n}, [setGlobalStats]);\n\nconst stableSetTodayStats = useCallback(() => {\n  setTodayStats();\n}, [setTodayStats]);\n\nconst stableSetWeekStats = useCallback(() => {\n  setWeekStats();\n}, [setWeekStats]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetLoading = useCallback(() => {\n  setLoading();\n}, [setLoading]);\n\nconst stableLoad = useCallback(() => {\n  load();\n}, [load]);\n\nuseEffect(() => {\n  stableFrom();\n  stableSelect();\n  stableFrom();\n  stableSelect();\n  stableFrom();\n  stableSelect();\n  stableSetGlobalStats();\n  stableSetTodayStats();\n  stableSetWeekStats();\n  stableError();\n  stableSetLoading();\n  stableLoad();\n}, [stableFrom, stableSelect, stableFrom, stableSelect, stableFrom, stableSelect, stableSetGlobalStats, stableSetTodayStats, stableSetWeekStats, stableError, stableSetLoading, stableLoad]);;\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-xl\">Chargement des statistiques...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-8\">\n      <h1 className=\"text-3xl font-bold\">📊 Tableau de bord Admin</h1>\n\n      {/* Vue Globale */}\n      <section>\n        <h2 className=\"text-xl font-semibold mb-2\">Vue Globale</h2>\n        <pre className=\"bg-gray-100 p-4 rounded\">{JSON.stringify(globalStats, null, 2)}</pre>\n      </section>\n\n      {/* Stats du Jour */}\n      <section>\n        <h2 className=\"text-xl font-semibold mb-2\">Stats du Jour</h2>\n        <pre className=\"bg-gray-100 p-4 rounded\">{JSON.stringify(todayStats, null, 2)}</pre>\n      </section>\n\n      {/* Stats 7 derniers jours */}\n      <section>\n        <h2 className=\"text-xl font-semibold mb-4\">Stats des 7 derniers jours</h2>\n\n        {weekStats.length === 0 ? (\n          <p className=\"text-gray-500\">Pas encore de données</p>\n        ) : (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={weekStats}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"badge\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"plays_week\" fill=\"#3b82f6\" name=\"Tickets joués\" />\n              <Bar dataKey=\"wins_week\" fill=\"#22c55e\" name=\"Gagnants\" />\n              <Bar dataKey=\"loses_week\" fill=\"#ef4444\" name=\"Perdants\" />\n            </BarChart>\n          </ResponsiveContainer>\n        )}\n      </section>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/AdvancedSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/AttractionQualitySection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/BannerMint.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/BasicMap.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'includes'. Either exclude it or remove the dependency array. Outer scope values like 'includes' aren't valid dependencies because mutating them doesn't re-render the component.","line":26,"column":4,"nodeType":"ArrayExpression","endLine":26,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[629,639],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'createElement'. Either exclude it or remove the dependency array. Outer scope values like 'createElement' aren't valid dependencies because mutating them doesn't re-render the component.","line":38,"column":4,"nodeType":"ArrayExpression","endLine":38,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[879,894],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'appendChild'. Either exclude it or remove the dependency array. Outer scope values like 'appendChild' aren't valid dependencies because mutating them doesn't re-render the component.","line":42,"column":4,"nodeType":"ArrayExpression","endLine":42,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[964,977],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'createElement'. Either exclude it or remove the dependency array. Outer scope values like 'createElement' aren't valid dependencies because mutating them doesn't re-render the component.","line":46,"column":4,"nodeType":"ArrayExpression","endLine":46,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1051,1066],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'log'. Either exclude it or remove the dependency array. Outer scope values like 'log' aren't valid dependencies because mutating them doesn't re-render the component.","line":50,"column":4,"nodeType":"ArrayExpression","endLine":50,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1120,1125],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'appendChild'. Either exclude it or remove the dependency array. Outer scope values like 'appendChild' aren't valid dependencies because mutating them doesn't re-render the component.","line":62,"column":4,"nodeType":"ArrayExpression","endLine":62,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1361,1374],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'loadMapbox'. Either exclude it or remove the dependency array. Outer scope values like 'loadMapbox' aren't valid dependencies because mutating them doesn't re-render the component.","line":74,"column":4,"nodeType":"ArrayExpression","endLine":74,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1581,1593],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has duplicate dependencies: 'stableAppendChild', 'stableCreateElement', 'stableSetError', and 'stableSetMapboxReady'. Either omit them or remove the dependency array.","line":90,"column":4,"nodeType":"ArrayExpression","endLine":90,"endColumn":234,"suggestions":[{"desc":"Update the dependencies array to be: [stableIncludes, stableSetError, stableSetMapboxReady, stableCreateElement, stableAppendChild, stableLog, stableError, stableLoadMapbox]","fix":{"range":[1900,2130],"text":"[stableIncludes, stableSetError, stableSetMapboxReady, stableCreateElement, stableAppendChild, stableLog, stableError, stableLoadMapbox]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\n\ninterface BasicMapProps {\n  className?: string;\n  height?: string;\n  center?: [number, number];\n  zoom?: number;\n}\n\nexport default function BasicMap({ \n  className = \"\", \n  height = \"400px\",\n  center = [-61.55, 16.25], // Martinique par défaut\n  zoom = 12\n}: BasicMapProps) {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [mapboxReady, setMapboxReady] = useState(false);\n\n  \nconst stableIncludes = useCallback(() => {\n  includes();\n}, [includes]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableSetMapboxReady = useCallback(() => {\n  setMapboxReady();\n}, [setMapboxReady]);\n\nconst stableCreateElement = useCallback(() => {\n  createElement();\n}, [createElement]);\n\nconst stableAppendChild = useCallback(() => {\n  appendChild();\n}, [appendChild]);\n\nconst stableCreateElement = useCallback(() => {\n  createElement();\n}, [createElement]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetMapboxReady = useCallback(() => {\n  setMapboxReady();\n}, [setMapboxReady]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableAppendChild = useCallback(() => {\n  appendChild();\n}, [appendChild]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableLoadMapbox = useCallback(() => {\n  loadMapbox();\n}, [loadMapbox]);\n\nuseEffect(() => {\n  stableIncludes();\n  stableSetError();\n  stableSetMapboxReady();\n  stableCreateElement();\n  stableAppendChild();\n  stableCreateElement();\n  stableLog();\n  stableSetMapboxReady();\n  stableSetError();\n  stableAppendChild();\n  stableError();\n  stableSetError();\n  stableLoadMapbox();\n}, [stableIncludes, stableSetError, stableSetMapboxReady, stableCreateElement, stableAppendChild, stableCreateElement, stableLog, stableSetMapboxReady, stableSetError, stableAppendChild, stableError, stableSetError, stableLoadMapbox]);;\n\n  useEffect(() => {\n    if (!mapboxReady || !mapContainer.current) return;\n\n    const token = process.env.NEXT_PUBLIC_MAPBOX_TOKEN;\n    if (!token) return;\n\n    try {\n      const mapboxgl = (window as unknown).mapboxgl;\n      if (!mapboxgl) {\n        setError('Mapbox GL JS non disponible');\n        return;\n      }\n\n      mapboxgl.accessToken = token;\n\n      // Initialiser la carte\n      const map = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/streets-v12',\n        center: center,\n        zoom: zoom,\n        attributionControl: false\n      });\n\n      // Ajouter des contrôles\n      map.addControl(new mapboxgl.NavigationControl(), 'top-right');\n\n      // Marqueur principal\n      new mapboxgl.Marker({ color: '#10b981' })\n        .setLngLat(center)\n        .addTo(map);\n\n      // Événements de la carte\n      map.on('load', () => {\n        console.log('Carte chargée avec succès');\n        setIsLoaded(true);\n      });\n\n      map.on('error', (e: unknown) => {\n        console.error('Erreur Mapbox:', e);\n        setError('Erreur lors du chargement de la carte');\n      });\n\n    } catch (err) {\n      console.error('Erreur d\\'initialisation Mapbox:', err);\n      setError('Impossible d\\'initialiser la carte');\n    }\n  }, [mapboxReady, center, zoom]);\n\n  if (error) {\n    return (\n      <div \n        className={`bg-gradient-to-br from-red-50 to-orange-50 rounded-lg border border-red-200 flex items-center justify-center ${className}`}\n        style={{ height }}\n      >\n        <div className=\"text-center p-6\">\n          <div className=\"text-4xl mb-3\">❌</div>\n          <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Erreur de carte</h3>\n          <p className=\"text-red-600 text-sm\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`relative ${className}`} style={{ height }}>\n      <div \n        ref={mapContainer} \n        className=\"w-full h-full rounded-lg\"\n        style={{ height }}\n      />\n      \n      {!isLoaded && (\n        <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center rounded-lg\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n            <p className=\"text-gray-600\">\n              {!mapboxReady ? 'Chargement de Mapbox...' : 'Chargement de la carte...'}\n            </p>\n          </div>\n        </div>\n      )}\n      \n      {/* Overlay avec informations */}\n      <div className=\"absolute top-4 left-4 bg-white bg-opacity-90 p-3 rounded-lg shadow\">\n        <div className=\"text-sm\">\n          <p className=\"font-semibold text-gray-700\">📍 Centre</p>\n          <p className=\"text-blue-600\">Martinique ({center[0]}, {center[1]})</p>\n        </div>\n      </div>\n      \n      <div className=\"absolute bottom-4 right-4 bg-white bg-opacity-90 p-3 rounded-lg shadow\">\n        <div className=\"text-sm\">\n          <p className=\"font-semibold text-gray-700\">🎯 Zoom</p>\n          <p className=\"text-green-600\">{zoom}</p>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/CarteQuartier.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'setTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":35,"column":4,"nodeType":"ArrayExpression","endLine":35,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1060,1072],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'Map'. Either exclude it or remove the dependency array. Outer scope values like 'Map' aren't valid dependencies because mutating them doesn't re-render the component.","line":39,"column":4,"nodeType":"ArrayExpression","endLine":39,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1126,1131],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'MapboxDraw'. Either exclude it or remove the dependency array. Outer scope values like 'MapboxDraw' aren't valid dependencies because mutating them doesn't re-render the component.","line":47,"column":4,"nodeType":"ArrayExpression","endLine":47,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1282,1294],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addControl'. Either exclude it or remove the dependency array. Outer scope values like 'addControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":51,"column":4,"nodeType":"ArrayExpression","endLine":51,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1362,1374],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'on'. Either exclude it or remove the dependency array. Outer scope values like 'on' aren't valid dependencies because mutating them doesn't re-render the component.","line":55,"column":4,"nodeType":"ArrayExpression","endLine":55,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1426,1430],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'fetch'. Either exclude it or remove the dependency array. Outer scope values like 'fetch' aren't valid dependencies because mutating them doesn't re-render the component.","line":59,"column":4,"nodeType":"ArrayExpression","endLine":59,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1488,1495],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'json'. Either exclude it or remove the dependency array. Outer scope values like 'json' aren't valid dependencies because mutating them doesn't re-render the component.","line":63,"column":4,"nodeType":"ArrayExpression","endLine":63,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1551,1557],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'error'. Either exclude it or remove the dependency array. Outer scope values like 'error' aren't valid dependencies because mutating them doesn't re-render the component.","line":75,"column":4,"nodeType":"ArrayExpression","endLine":75,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1772,1779],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'clearTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'clearTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":83,"column":4,"nodeType":"ArrayExpression","endLine":83,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1934,1948],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'remove'. Either exclude it or remove the dependency array. Outer scope values like 'remove' aren't valid dependencies because mutating them doesn't re-render the component.","line":87,"column":4,"nodeType":"ArrayExpression","endLine":87,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2008,2016],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a duplicate dependency: 'stableSetMapError'. Either omit it or remove the dependency array.","line":105,"column":4,"nodeType":"ArrayExpression","endLine":105,"endColumn":243,"suggestions":[{"desc":"Update the dependencies array to be: [stableSetMapError, stableSetTimeout, stableMap, stableMapboxDraw, stableAddControl, stableOn, stableFetch, stableJson, stableSetZones, stableSetQuartier, stableError, stableClearTimeout, stableRemove]","fix":{"range":[2340,2579],"text":"[stableSetMapError, stableSetTimeout, stableMap, stableMapboxDraw, stableAddControl, stableOn, stableFetch, stableJson, stableSetZones, stableSetQuartier, stableError, stableClearTimeout, stableRemove]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\n\nmapboxgl.accessToken = process.env.NEXT_PUBLIC_MAPBOX_TOKEN!;\n\ntype AreaOption = {\n  value: string;\n  label: string;\n  type: \"adresse\" | \"quartier\";\n  coordinates: [number, number];\n};\n\nexport default function CarteQuartier() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const mapRef = useRef<mapboxgl.Map | null>(null);\n  const draw = useRef<MapboxDraw | null>(null);\n\n  const [zones, setZones] = useState<AreaOption[]>([]);\n  const [quartier, setQuartier] = useState<GeoJSON.Polygon | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<unknown[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [mapError, setMapError] = useState<string | null>(null);\n\n  \nconst stableSetMapError = useCallback(() => {\n  setMapError();\n}, [setMapError]);\n\nconst stableSetTimeout = useCallback(() => {\n  setTimeout();\n}, [setTimeout]);\n\nconst stableMap = useCallback(() => {\n  Map();\n}, [Map]);\n\nconst stableSetMapError = useCallback(() => {\n  setMapError();\n}, [setMapError]);\n\nconst stableMapboxDraw = useCallback(() => {\n  MapboxDraw();\n}, [MapboxDraw]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableFetch = useCallback(() => {\n  fetch();\n}, [fetch]);\n\nconst stableJson = useCallback(() => {\n  json();\n}, [json]);\n\nconst stableSetZones = useCallback(() => {\n  setZones();\n}, [setZones]);\n\nconst stableSetQuartier = useCallback(() => {\n  setQuartier();\n}, [setQuartier]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetMapError = useCallback(() => {\n  setMapError();\n}, [setMapError]);\n\nconst stableClearTimeout = useCallback(() => {\n  clearTimeout();\n}, [clearTimeout]);\n\nconst stableRemove = useCallback(() => {\n  remove();\n}, [remove]);\n\nuseEffect(() => {\n  stableSetMapError();\n  stableSetTimeout();\n  stableMap();\n  stableSetMapError();\n  stableMapboxDraw();\n  stableAddControl();\n  stableOn();\n  stableFetch();\n  stableJson();\n  stableSetZones();\n  stableSetQuartier();\n  stableError();\n  stableSetMapError();\n  stableClearTimeout();\n  stableRemove();\n}, [stableSetMapError, stableSetTimeout, stableMap, stableSetMapError, stableMapboxDraw, stableAddControl, stableOn, stableFetch, stableJson, stableSetZones, stableSetQuartier, stableError, stableSetMapError, stableClearTimeout, stableRemove]);;\n\n  // Fonction de recherche d'adresses\n  const searchAddresses = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults([]);\n      return;\n    }\n\n    setIsSearching(true);\n    try {\n      const res = await fetch(\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(query)}.json?access_token=${mapboxgl.accessToken}&country=GP&language=fr&limit=5`\n      );\n      const data = await res.json();\n      setSearchResults(data.features || []);\n    } catch (error) {\n      console.error(\"Erreur lors de la recherche:\", error);\n      setSearchResults([]);\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Ajouter une adresse depuis les résultats de recherche\n  const addAddressFromSearch = (feature: unknown) => {\n    const [lng, lat] = feature.center;\n    const label = feature.place_name;\n\n    const newZone: AreaOption = {\n      value: `${lng},${lat}`,\n      label,\n      type: \"adresse\",\n      coordinates: [lng, lat],\n    };\n\n    setZones((prev) => [...prev, newZone]);\n\n    // Centrer la carte sur l'adresse\n    if (mapRef.current) {\n      mapRef.current.flyTo({\n        center: [lng, lat],\n        zoom: 15\n      });\n    }\n\n    // Ajouter un marqueur sur la carte\n    if (mapRef.current) {\n      new mapboxgl.Marker()\n        .setLngLat([lng, lat])\n        .addTo(mapRef.current);\n    }\n\n    setSearchQuery(\"\");\n    setSearchResults([]);\n  };\n\n  // ✅ Générer un quartier auto avec les points\n  const createAutoQuartier = () => {\n    if (zones.length < 3) {\n      alert(\"Ajoutez au moins 3 adresses pour créer un quartier.\");\n      return;\n    }\n\n    // Petit algo Convex Hull (version simplifiée)\n    const points = zones.map((z) => z.coordinates);\n    const polygon: GeoJSON.Polygon = {\n      type: \"Polygon\",\n      coordinates: [[...points, points[0]]], // ferme le polygone\n    };\n\n    setQuartier(polygon);\n\n    if (mapRef.current) {\n      // Supprime l'ancien quartier\n      if (mapRef.current.getSource(\"quartier-auto\")) {\n        mapRef.current.removeLayer(\"quartier-auto-fill\");\n        mapRef.current.removeSource(\"quartier-auto\");\n      }\n\n      // Ajoute le nouveau quartier\n      mapRef.current.addSource(\"quartier-auto\", {\n        type: \"geojson\",\n        data: polygon,\n      });\n\n      mapRef.current.addLayer({\n        id: \"quartier-auto-fill\",\n        type: \"fill\",\n        source: \"quartier-auto\",\n        layout: {},\n        paint: {\n          \"fill-color\": \"#17BFA0\",\n          \"fill-opacity\": 0.3,\n        },\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <h2 className=\"text-lg font-semibold\">Créer un quartier</h2>\n\n      {/* Barre de recherche */}\n      <div className=\"relative\">\n        <div className=\"flex gap-2\">\n          <input\n            type=\"text\"\n            value={searchQuery}\n            onChange={(e) => {\n              setSearchQuery(e.target.value);\n              searchAddresses(e.target.value);\n            }}\n            placeholder=\"Rechercher une adresse à Pointe-à-Pitre...\"\n            className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n          <button\n            onClick={() => searchAddresses(searchQuery)}\n            disabled={isSearching}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400\"\n          >\n            {isSearching ? \"⏳\" : \"🔍\"}\n          </button>\n        </div>\n\n        {/* Résultats de recherche */}\n        {searchResults.length > 0 && (\n          <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto\">\n            {searchResults.map((result, index) => (\n              <button\n                key={index}\n                onClick={() => addAddressFromSearch(result)}\n                className=\"w-full px-3 py-2 text-left hover:bg-gray-100 border-b border-gray-100 last:border-b-0\"\n              >\n                <div className=\"text-sm font-medium text-gray-900\">\n                  {result.place_name}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  {result.properties?.category || \"Adresse\"}\n                </div>\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Liste des adresses ajoutées */}\n      {zones.length > 0 && (\n        <div className=\"space-y-2\">\n          <h3 className=\"text-sm font-medium text-gray-700\">\n            Adresses ajoutées ({zones.length}) :\n          </h3>\n          <div className=\"flex flex-wrap gap-2\">\n            {zones.map((z) => (\n              <span\n                key={z.value}\n                className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm flex items-center gap-1\"\n              >\n                📍 {z.label}\n                <button\n                  onClick={() => setZones(prev => prev.filter(item => item.value !== z.value))}\n                  className=\"ml-1 text-red-500 hover:text-red-700\"\n                >\n                  ×\n                </button>\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Actions */}\n      <div className=\"flex gap-2\">\n        <button\n          onClick={createAutoQuartier}\n          className=\"px-4 py-2 bg-green-600 text-white rounded\"\n        >\n          Créer quartier automatiquement\n        </button>\n        <button\n          onClick={() => {\n            setZones([]);\n            setQuartier(null);\n            if (mapRef.current?.getSource(\"quartier-auto\")) {\n              mapRef.current.removeLayer(\"quartier-auto-fill\");\n              mapRef.current.removeSource(\"quartier-auto\");\n            }\n            if (draw.current) {\n              draw.current.deleteAll();\n            }\n          }}\n          className=\"px-4 py-2 bg-red-500 text-white rounded\"\n        >\n          Effacer tout\n        </button>\n      </div>\n\n      {/* Quartier affiché */}\n      {quartier && (\n        <div className=\"p-2 bg-green-100 text-green-800 rounded\">\n          ✅ Quartier créé ({zones.length} adresses)\n        </div>\n      )}\n\n      {/* Carte */}\n      {mapError ? (\n        <div className=\"w-full h-[600px] rounded-lg shadow bg-red-50 border border-red-200 flex items-center justify-center\">\n          <div className=\"text-center p-6\">\n            <div className=\"text-red-600 text-lg mb-2\">⚠️ Erreur de carte</div>\n            <div className=\"text-red-800\">{mapError}</div>\n            <div className=\"text-sm text-red-600 mt-2\">\n              Pour obtenir un token Mapbox gratuit : \n              <br />\n              1. Allez sur <a href=\"https://mapbox.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline\">mapbox.com</a>\n              <br />\n              2. Créez un compte gratuit\n              <br />\n              3. Copiez votre token public dans .env.local\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div ref={mapContainer} className=\"w-full h-[600px] rounded-lg shadow\" />\n      )}\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/CarteQuartierFinal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'setTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":100,"column":4,"nodeType":"ArrayExpression","endLine":100,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2943,2955],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'log'. Either exclude it or remove the dependency array. Outer scope values like 'log' aren't valid dependencies because mutating them doesn't re-render the component.","line":108,"column":4,"nodeType":"ArrayExpression","endLine":108,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[3095,3100],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'clearTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'clearTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":112,"column":4,"nodeType":"ArrayExpression","endLine":112,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[3172,3186],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\n\ntype AreaOption = {\n  value: string;\n  label: string;\n  type: \"adresse\" | \"quartier\";\n  coordinates: [number, number];\n};\n\nexport default function CarteQuartierFinal() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const [zones, setZones] = useState<AreaOption[]>([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<unknown[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [quartier, setQuartier] = useState<GeoJSON.Polygon | null>(null);\n\n  // Fonction de recherche d'adresses\n  const searchAddresses = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults([]);\n      return;\n    }\n\n    setIsSearching(true);\n    try {\n      // Simulation de recherche pour la démo\n      const mockResults = [\n        {\n          place_name: `Rue ${query}, Pointe-à-Pitre, Guadeloupe`,\n          center: [-61.5314 + Math.random() * 0.01, 16.2412 + Math.random() * 0.01]\n        },\n        {\n          place_name: `Avenue ${query}, Pointe-à-Pitre, Guadeloupe`,\n          center: [-61.5314 + Math.random() * 0.01, 16.2412 + Math.random() * 0.01]\n        },\n        {\n          place_name: `Place ${query}, Pointe-à-Pitre, Guadeloupe`,\n          center: [-61.5314 + Math.random() * 0.01, 16.2412 + Math.random() * 0.01]\n        },\n        {\n          place_name: `Boulevard ${query}, Pointe-à-Pitre, Guadeloupe`,\n          center: [-61.5314 + Math.random() * 0.01, 16.2412 + Math.random() * 0.01]\n        }\n      ];\n      \n      setSearchResults(mockResults);\n    } catch (error) {\n      console.error(\"Erreur lors de la recherche:\", error);\n      setSearchResults([]);\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Ajouter une adresse depuis les résultats de recherche\n  const addAddressFromSearch = (feature: unknown) => {\n    const [lng, lat] = feature.center;\n    const label = feature.place_name;\n\n    const newZone: AreaOption = {\n      value: `${lng},${lat}`,\n      label,\n      type: \"adresse\",\n      coordinates: [lng, lat],\n    };\n\n    setZones((prev) => [...prev, newZone]);\n    setSearchQuery(\"\");\n    setSearchResults([]);\n\n    console.log(`Adresse ajoutée: ${label} à ${lng}, ${lat}`);\n  };\n\n  // Créer un quartier automatiquement\n  const createAutoQuartier = () => {\n    if (zones.length < 3) {\n      alert(\"Ajoutez au moins 3 adresses pour créer un quartier.\");\n      return;\n    }\n    \n    // Créer un polygone simple avec les points\n    const points = zones.map((z) => z.coordinates);\n    const polygon: GeoJSON.Polygon = {\n      type: \"Polygon\",\n      coordinates: [[...points, points[0]]],\n    };\n    \n    setQuartier(polygon);\n    alert(`✅ Quartier créé avec ${zones.length} adresses !`);\n  };\n\n  // Initialiser la carte\n  \nconst stableSetTimeout = useCallback(() => {\n  setTimeout();\n}, [setTimeout]);\n\nconst stableSetMapLoaded = useCallback(() => {\n  setMapLoaded();\n}, [setMapLoaded]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableClearTimeout = useCallback(() => {\n  clearTimeout();\n}, [clearTimeout]);\n\nuseEffect(() => {\n  stableSetTimeout();\n  stableSetMapLoaded();\n  stableLog();\n  stableClearTimeout();\n}, [stableSetTimeout, stableSetMapLoaded, stableLog, stableClearTimeout]);;\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <h2 className=\"text-lg font-semibold text-blue-800\">🗺️ Créer un quartier</h2>\n\n      {/* Barre de recherche */}\n      <div className=\"relative\">\n        <div className=\"flex gap-2\">\n          <input\n            type=\"text\"\n            value={searchQuery}\n            onChange={(e) => {\n              setSearchQuery(e.target.value);\n              searchAddresses(e.target.value);\n            }}\n            placeholder=\"Rechercher une adresse à Pointe-à-Pitre...\"\n            className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n          <button\n            onClick={() => searchAddresses(searchQuery)}\n            disabled={isSearching}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400\"\n          >\n            {isSearching ? \"⏳\" : \"🔍\"}\n          </button>\n        </div>\n\n        {/* Résultats de recherche */}\n        {searchResults.length > 0 && (\n          <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto\">\n            {searchResults.map((result, index) => (\n              <button\n                key={index}\n                onClick={() => addAddressFromSearch(result)}\n                className=\"w-full px-3 py-2 text-left hover:bg-gray-100 border-b border-gray-100 last:border-b-0\"\n              >\n                <div className=\"text-sm font-medium text-gray-900\">\n                  {result.place_name}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  Adresse\n                </div>\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Liste des adresses ajoutées */}\n      {zones.length > 0 && (\n        <div className=\"space-y-2\">\n          <h3 className=\"text-sm font-medium text-gray-700\">\n            📍 Adresses ajoutées ({zones.length}) :\n          </h3>\n          <div className=\"flex flex-wrap gap-2\">\n            {zones.map((z) => (\n              <span\n                key={z.value}\n                className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm flex items-center gap-1\"\n              >\n                📍 {z.label}\n                <button\n                  onClick={() => setZones(prev => prev.filter(item => item.value !== z.value))}\n                  className=\"ml-1 text-red-500 hover:text-red-700\"\n                >\n                  ×\n                </button>\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Actions */}\n      <div className=\"flex gap-2\">\n        <button\n          onClick={createAutoQuartier}\n          className=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\"\n        >\n          ✅ Créer quartier automatiquement\n        </button>\n        <button\n          onClick={() => {\n            setZones([]);\n            setQuartier(null);\n          }}\n          className=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\"\n        >\n          🗑️ Effacer tout\n        </button>\n      </div>\n\n      {/* Quartier créé */}\n      {quartier && (\n        <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n          <div className=\"flex items-center\">\n            <div className=\"text-green-500 text-xl mr-2\">✅</div>\n            <div>\n              <h3 className=\"font-semibold text-green-800\">Quartier créé !</h3>\n              <p className=\"text-green-700 text-sm\">\n                {zones.length} adresses incluses dans le quartier\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Zone de carte */}\n      <div ref={mapContainer} className=\"w-full h-[600px] rounded-lg shadow bg-gray-100 border-2 border-dashed border-gray-300 flex items-center justify-center\">\n        {!mapLoaded ? (\n          <div className=\"text-center text-gray-500\">\n            <div className=\"text-4xl mb-4 animate-spin\">⏳</div>\n            <div className=\"text-lg font-semibold mb-2\">Chargement de la carte...</div>\n            <div className=\"text-sm\">Initialisation de Mapbox</div>\n          </div>\n        ) : (\n          <div className=\"text-center text-gray-500\">\n            <div className=\"text-4xl mb-4\">🗺️</div>\n            <div className=\"text-lg font-semibold mb-2\">Carte Mapbox</div>\n            <div className=\"text-sm\">\n              {zones.length > 0 ? (\n                <>\n                  <div>📍 {zones.length} adresse{zones.length > 1 ? 's' : ''} ajoutée{zones.length > 1 ? 's' : ''}</div>\n                  <div className=\"mt-2 text-xs\">\n                    Carte interactive avec marqueurs\n                  </div>\n                  {quartier && (\n                    <div className=\"mt-2 text-xs text-green-600\">\n                      🔷 Quartier défini\n                    </div>\n                  )}\n                </>\n              ) : (\n                <div>Utilisez la barre de recherche pour ajouter des adresses</div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Instructions */}\n      <div className=\"bg-blue-50 p-4 rounded-lg\">\n        <h3 className=\"font-semibold text-blue-800 mb-2\">📝 Instructions :</h3>\n        <ul className=\"text-sm text-blue-700 space-y-1\">\n          <li>1. Tapez une adresse dans la barre de recherche</li>\n          <li>2. Cliquez sur un résultat pour l&apos;ajouter</li>\n          <li>3. Ajoutez au moins 3 adresses</li>\n          <li>4. Cliquez sur &quot;Créer quartier automatiquement&quot;</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/CarteQuartierMapbox.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'setTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":87,"column":4,"nodeType":"ArrayExpression","endLine":87,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2445,2457],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'log'. Either exclude it or remove the dependency array. Outer scope values like 'log' aren't valid dependencies because mutating them doesn't re-render the component.","line":95,"column":4,"nodeType":"ArrayExpression","endLine":95,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2597,2602],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'clearTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'clearTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":99,"column":4,"nodeType":"ArrayExpression","endLine":99,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2674,2688],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\n\ntype AreaOption = {\n  value: string;\n  label: string;\n  type: \"adresse\" | \"quartier\";\n  coordinates: [number, number];\n};\n\nexport default function CarteQuartierMapbox() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const mapRef = useRef<unknown>(null);\n  const [zones, setZones] = useState<AreaOption[]>([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<unknown[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [mapLoaded, setMapLoaded] = useState(false);\n\n  // Fonction de recherche d'adresses\n  const searchAddresses = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults([]);\n      return;\n    }\n\n    setIsSearching(true);\n    try {\n      // Simulation de recherche pour la démo\n      const mockResults = [\n        {\n          place_name: `Rue ${query}, Pointe-à-Pitre, Guadeloupe`,\n          center: [-61.5314 + Math.random() * 0.01, 16.2412 + Math.random() * 0.01]\n        },\n        {\n          place_name: `Avenue ${query}, Pointe-à-Pitre, Guadeloupe`,\n          center: [-61.5314 + Math.random() * 0.01, 16.2412 + Math.random() * 0.01]\n        }\n      ];\n      \n      setSearchResults(mockResults);\n    } catch (error) {\n      console.error(\"Erreur lors de la recherche:\", error);\n      setSearchResults([]);\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Ajouter une adresse depuis les résultats de recherche\n  const addAddressFromSearch = (feature: unknown) => {\n    const [lng, lat] = feature.center;\n    const label = feature.place_name;\n\n    const newZone: AreaOption = {\n      value: `${lng},${lat}`,\n      label,\n      type: \"adresse\",\n      coordinates: [lng, lat],\n    };\n\n    setZones((prev) => [...prev, newZone]);\n    setSearchQuery(\"\");\n    setSearchResults([]);\n\n    // Ajouter un marqueur sur la carte si elle est chargée\n    if (mapRef.current && mapLoaded) {\n      // Simulation d'ajout de marqueur\n      console.log(`Marqueur ajouté à ${lng}, ${lat}`);\n    }\n  };\n\n  // Créer un quartier automatiquement\n  const createAutoQuartier = () => {\n    if (zones.length < 3) {\n      alert(\"Ajoutez au moins 3 adresses pour créer un quartier.\");\n      return;\n    }\n    alert(`Quartier créé avec ${zones.length} adresses !`);\n  };\n\n  // Initialiser la carte\n  \nconst stableSetTimeout = useCallback(() => {\n  setTimeout();\n}, [setTimeout]);\n\nconst stableSetMapLoaded = useCallback(() => {\n  setMapLoaded();\n}, [setMapLoaded]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableClearTimeout = useCallback(() => {\n  clearTimeout();\n}, [clearTimeout]);\n\nuseEffect(() => {\n  stableSetTimeout();\n  stableSetMapLoaded();\n  stableLog();\n  stableClearTimeout();\n}, [stableSetTimeout, stableSetMapLoaded, stableLog, stableClearTimeout]);;\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <h2 className=\"text-lg font-semibold\">Créer un quartier</h2>\n\n      {/* Barre de recherche */}\n      <div className=\"relative\">\n        <div className=\"flex gap-2\">\n          <input\n            type=\"text\"\n            value={searchQuery}\n            onChange={(e) => {\n              setSearchQuery(e.target.value);\n              searchAddresses(e.target.value);\n            }}\n            placeholder=\"Rechercher une adresse à Pointe-à-Pitre...\"\n            className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n          <button\n            onClick={() => searchAddresses(searchQuery)}\n            disabled={isSearching}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400\"\n          >\n            {isSearching ? \"⏳\" : \"🔍\"}\n          </button>\n        </div>\n\n        {/* Résultats de recherche */}\n        {searchResults.length > 0 && (\n          <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto\">\n            {searchResults.map((result, index) => (\n              <button\n                key={index}\n                onClick={() => addAddressFromSearch(result)}\n                className=\"w-full px-3 py-2 text-left hover:bg-gray-100 border-b border-gray-100 last:border-b-0\"\n              >\n                <div className=\"text-sm font-medium text-gray-900\">\n                  {result.place_name}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  Adresse\n                </div>\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Liste des adresses ajoutées */}\n      {zones.length > 0 && (\n        <div className=\"space-y-2\">\n          <h3 className=\"text-sm font-medium text-gray-700\">\n            Adresses ajoutées ({zones.length}) :\n          </h3>\n          <div className=\"flex flex-wrap gap-2\">\n            {zones.map((z) => (\n              <span\n                key={z.value}\n                className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm flex items-center gap-1\"\n              >\n                📍 {z.label}\n                <button\n                  onClick={() => setZones(prev => prev.filter(item => item.value !== z.value))}\n                  className=\"ml-1 text-red-500 hover:text-red-700\"\n                >\n                  ×\n                </button>\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Actions */}\n      <div className=\"flex gap-2\">\n        <button\n          onClick={createAutoQuartier}\n          className=\"px-4 py-2 bg-green-600 text-white rounded\"\n        >\n          Créer quartier automatiquement\n        </button>\n        <button\n          onClick={() => {\n            setZones([]);\n          }}\n          className=\"px-4 py-2 bg-red-500 text-white rounded\"\n        >\n          Effacer tout\n        </button>\n      </div>\n\n      {/* Zone de carte */}\n      <div ref={mapContainer} className=\"w-full h-[600px] rounded-lg shadow bg-gray-100 border-2 border-dashed border-gray-300 flex items-center justify-center\">\n        {!mapLoaded ? (\n          <div className=\"text-center text-gray-500\">\n            <div className=\"text-4xl mb-4 animate-spin\">⏳</div>\n            <div className=\"text-lg font-semibold mb-2\">Chargement de la carte...</div>\n            <div className=\"text-sm\">Initialisation de Mapbox</div>\n          </div>\n        ) : (\n          <div className=\"text-center text-gray-500\">\n            <div className=\"text-4xl mb-4\">🗺️</div>\n            <div className=\"text-lg font-semibold mb-2\">Carte Mapbox</div>\n            <div className=\"text-sm\">\n              {zones.length > 0 ? (\n                <>\n                  <div>📍 {zones.length} adresse{zones.length > 1 ? 's' : ''} ajoutée{zones.length > 1 ? 's' : ''}</div>\n                  <div className=\"mt-2 text-xs\">\n                    Carte interactive avec marqueurs\n                  </div>\n                </>\n              ) : (\n                <div>Utilisez la barre de recherche pour ajouter des adresses</div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Instructions */}\n      <div className=\"bg-blue-50 p-4 rounded-lg\">\n        <h3 className=\"font-semibold text-blue-800 mb-2\">📝 Instructions :</h3>\n        <ul className=\"text-sm text-blue-700 space-y-1\">\n          <li>1. Tapez une adresse dans la barre de recherche</li>\n          <li>2. Cliquez sur un résultat pour l&apos;ajouter</li>\n          <li>3. Ajoutez au moins 3 adresses</li>\n          <li>4. Cliquez sur &quot;Créer quartier automatiquement&quot;</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/CarteQuartierSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/CarteQuartierV2.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapRef' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":14,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'startsWith'. Either exclude it or remove the dependency array. Outer scope values like 'startsWith' aren't valid dependencies because mutating them doesn't re-render the component.","line":30,"column":4,"nodeType":"ArrayExpression","endLine":30,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[864,876],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a duplicate dependency: 'stableSetMapError'. Either omit it or remove the dependency array.","line":40,"column":4,"nodeType":"ArrayExpression","endLine":40,"endColumn":60,"suggestions":[{"desc":"Update the dependencies array to be: [stableSetMapError, stableStartsWith]","fix":{"range":[1052,1108],"text":"[stableSetMapError, stableStartsWith]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\n\ntype AreaOption = {\n  value: string;\n  label: string;\n  type: \"adresse\" | \"quartier\";\n  coordinates: [number, number];\n};\n\nexport default function CarteQuartierV2() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const mapRef = useRef<unknown>(null);\n  const [zones, setZones] = useState<AreaOption[]>([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<unknown[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [mapError, setMapError] = useState<string | null>(null);\n\n  // Vérifier le token Mapbox\n  \nconst stableSetMapError = useCallback(() => {\n  setMapError();\n}, [setMapError]);\n\nconst stableStartsWith = useCallback(() => {\n  startsWith();\n}, [startsWith]);\n\nconst stableSetMapError = useCallback(() => {\n  setMapError();\n}, [setMapError]);\n\nuseEffect(() => {\n  stableSetMapError();\n  stableStartsWith();\n  stableSetMapError();\n}, [stableSetMapError, stableStartsWith, stableSetMapError]);;\n\n  // Fonction de recherche d'adresses\n  const searchAddresses = async (query: string) => {\n    if (!query.trim()) {\n      setSearchResults([]);\n      return;\n    }\n\n    setIsSearching(true);\n    try {\n      // Simulation de recherche pour la démo\n      const mockResults = [\n        {\n          place_name: `Rue ${query}, Pointe-à-Pitre, Guadeloupe`,\n          center: [-61.5314 + Math.random() * 0.01, 16.2412 + Math.random() * 0.01]\n        },\n        {\n          place_name: `Avenue ${query}, Pointe-à-Pitre, Guadeloupe`,\n          center: [-61.5314 + Math.random() * 0.01, 16.2412 + Math.random() * 0.01]\n        },\n        {\n          place_name: `Place ${query}, Pointe-à-Pitre, Guadeloupe`,\n          center: [-61.5314 + Math.random() * 0.01, 16.2412 + Math.random() * 0.01]\n        }\n      ];\n      \n      setSearchResults(mockResults);\n    } catch (error) {\n      console.error(\"Erreur lors de la recherche:\", error);\n      setSearchResults([]);\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  // Ajouter une adresse depuis les résultats de recherche\n  const addAddressFromSearch = (feature: unknown) => {\n    const [lng, lat] = feature.center;\n    const label = feature.place_name;\n\n    const newZone: AreaOption = {\n      value: `${lng},${lat}`,\n      label,\n      type: \"adresse\",\n      coordinates: [lng, lat],\n    };\n\n    setZones((prev) => [...prev, newZone]);\n    setSearchQuery(\"\");\n    setSearchResults([]);\n\n    console.log(`Adresse ajoutée: ${label} à ${lng}, ${lat}`);\n  };\n\n  // Créer un quartier automatiquement\n  const createAutoQuartier = () => {\n    if (zones.length < 3) {\n      alert(\"Ajoutez au moins 3 adresses pour créer un quartier.\");\n      return;\n    }\n    alert(`✅ Quartier créé avec ${zones.length} adresses !`);\n  };\n\n  // Initialiser la carte\n  useEffect(() => {\n    if (!mapContainer.current || mapError) return;\n\n    // Simulation de chargement de Mapbox\n    const timer = setTimeout(() => {\n      setMapLoaded(true);\n      console.log(\"Carte Mapbox chargée (simulation)\");\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, [mapError]);\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <h2 className=\"text-lg font-semibold text-blue-800\">🗺️ Créer un quartier</h2>\n\n      {/* Message d'erreur si problème de token */}\n      {mapError && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <div className=\"flex items-center\">\n            <div className=\"text-red-500 text-xl mr-2\">⚠️</div>\n            <div>\n              <h3 className=\"font-semibold text-red-800\">Erreur de configuration</h3>\n              <p className=\"text-red-700 text-sm\">{mapError}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Barre de recherche */}\n      <div className=\"relative\">\n        <div className=\"flex gap-2\">\n          <input\n            type=\"text\"\n            value={searchQuery}\n            onChange={(e) => {\n              setSearchQuery(e.target.value);\n              searchAddresses(e.target.value);\n            }}\n            placeholder=\"Rechercher une adresse à Pointe-à-Pitre...\"\n            className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n          <button\n            onClick={() => searchAddresses(searchQuery)}\n            disabled={isSearching}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400\"\n          >\n            {isSearching ? \"⏳\" : \"🔍\"}\n          </button>\n        </div>\n\n        {/* Résultats de recherche */}\n        {searchResults.length > 0 && (\n          <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto\">\n            {searchResults.map((result, index) => (\n              <button\n                key={index}\n                onClick={() => addAddressFromSearch(result)}\n                className=\"w-full px-3 py-2 text-left hover:bg-gray-100 border-b border-gray-100 last:border-b-0\"\n              >\n                <div className=\"text-sm font-medium text-gray-900\">\n                  {result.place_name}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  Adresse\n                </div>\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Liste des adresses ajoutées */}\n      {zones.length > 0 && (\n        <div className=\"space-y-2\">\n          <h3 className=\"text-sm font-medium text-gray-700\">\n            📍 Adresses ajoutées ({zones.length}) :\n          </h3>\n          <div className=\"flex flex-wrap gap-2\">\n            {zones.map((z) => (\n              <span\n                key={z.value}\n                className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm flex items-center gap-1\"\n              >\n                📍 {z.label}\n                <button\n                  onClick={() => setZones(prev => prev.filter(item => item.value !== z.value))}\n                  className=\"ml-1 text-red-500 hover:text-red-700\"\n                >\n                  ×\n                </button>\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Actions */}\n      <div className=\"flex gap-2\">\n        <button\n          onClick={createAutoQuartier}\n          className=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\"\n        >\n          ✅ Créer quartier automatiquement\n        </button>\n        <button\n          onClick={() => {\n            setZones([]);\n          }}\n          className=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\"\n        >\n          🗑️ Effacer tout\n        </button>\n      </div>\n\n      {/* Zone de carte */}\n      <div ref={mapContainer} className=\"w-full h-[600px] rounded-lg shadow bg-gray-100 border-2 border-dashed border-gray-300 flex items-center justify-center\">\n        {mapError ? (\n          <div className=\"text-center text-red-500\">\n            <div className=\"text-4xl mb-4\">⚠️</div>\n            <div className=\"text-lg font-semibold mb-2\">Erreur de configuration</div>\n            <div className=\"text-sm\">{mapError}</div>\n          </div>\n        ) : !mapLoaded ? (\n          <div className=\"text-center text-gray-500\">\n            <div className=\"text-4xl mb-4 animate-spin\">⏳</div>\n            <div className=\"text-lg font-semibold mb-2\">Chargement de la carte...</div>\n            <div className=\"text-sm\">Initialisation de Mapbox</div>\n          </div>\n        ) : (\n          <div className=\"text-center text-gray-500\">\n            <div className=\"text-4xl mb-4\">🗺️</div>\n            <div className=\"text-lg font-semibold mb-2\">Carte Mapbox</div>\n            <div className=\"text-sm\">\n              {zones.length > 0 ? (\n                <>\n                  <div>📍 {zones.length} adresse{zones.length > 1 ? 's' : ''} ajoutée{zones.length > 1 ? 's' : ''}</div>\n                  <div className=\"mt-2 text-xs\">\n                    Carte interactive avec marqueurs\n                  </div>\n                </>\n              ) : (\n                <div>Utilisez la barre de recherche pour ajouter des adresses</div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Instructions */}\n      <div className=\"bg-blue-50 p-4 rounded-lg\">\n        <h3 className=\"font-semibold text-blue-800 mb-2\">📝 Instructions :</h3>\n        <ul className=\"text-sm text-blue-700 space-y-1\">\n          <li>1. Tapez une adresse dans la barre de recherche</li>\n          <li>2. Cliquez sur un résultat pour l&apos;ajouter</li>\n          <li>3. Ajoutez au moins 3 adresses</li>\n          <li>4. Cliquez sur &quot;Créer quartier automatiquement&quot;</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/CarteQuartierWorking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/CollectiviteDescriptive.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/CollectiviteExplicative.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/CollectivitePredictive.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ComparisonChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/CompleteMap.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'center' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":233,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":233,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\n\ninterface CompleteMapProps {\n  className?: string;\n  height?: string;\n  center?: [number, number];\n  zoom?: number;\n}\n\nexport default function CompleteMap({ \n  className = \"\", \n  height = \"600px\",\n  center = [-61.55, 16.25], // Martinique par défaut\n  zoom = 12\n}: CompleteMapProps) {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<unknown>(null);\n  const draw = useRef<unknown>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [status, setStatus] = useState('Initialisation...');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState<unknown[]>([]);\n  const [selectedArea, setSelectedArea] = useState<unknown>(null);\n  const [streets, setStreets] = useState<unknown[]>([]);\n  const [drawingMode, setDrawingMode] = useState('simple_select');\n  const [isDrawingActive, setIsDrawingActive] = useState(false);\n\n  useEffect(() => {\n    const token = process.env.NEXT_PUBLIC_MAPBOX_TOKEN;\n    \n    if (!token || token.includes('your_real_token_here')) {\n      setError('Token Mapbox manquant ou invalide');\n      setStatus('❌ Token manquant');\n      return;\n    }\n\n    setStatus('✅ Token trouvé, chargement de Mapbox...');\n\n    // Timeout de sécurité\n    const fallbackTimer = setTimeout(() => {\n      if (!isLoaded) {\n        setStatus('⏳ Timeout - affichage du fallback');\n        setError('Mapbox n\\'a pas pu se charger');\n      }\n    }, 10000);\n\n    // Charger Mapbox\n    const loadMapbox = () => {\n      if ((window as unknown).mapboxgl) {\n        setStatus('✅ Mapbox déjà chargé, initialisation...');\n        initializeMap();\n        return;\n      }\n\n      // Charger le CSS\n      const cssLink = document.createElement('link');\n      cssLink.rel = 'stylesheet';\n      cssLink.href = 'https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css';\n      cssLink.crossOrigin = 'anonymous';\n      document.head.appendChild(cssLink);\n\n      // Charger le JS\n      const script = document.createElement('script');\n      script.src = 'https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js';\n      script.async = true;\n      script.crossOrigin = 'anonymous';\n      \n      script.onload = () => {\n        console.log('Mapbox GL JS chargé avec succès');\n        setStatus('✅ Mapbox chargé, initialisation de la carte...');\n        clearTimeout(fallbackTimer);\n        initializeMap();\n      };\n\n      script.onerror = () => {\n        console.error('Erreur chargement Mapbox');\n        setStatus('❌ Erreur de chargement');\n        setError('Impossible de charger Mapbox GL JS');\n        clearTimeout(fallbackTimer);\n      };\n\n      document.head.appendChild(script);\n    };\n\n    const initializeMap = () => {\n      if (!mapContainer.current) return;\n\n      try {\n        const mapboxgl = (window as unknown).mapboxgl;\n        if (!mapboxgl) {\n          setError('Mapbox GL JS non disponible');\n          setStatus('❌ Mapbox non disponible');\n          return;\n        }\n\n        setStatus('✅ Initialisation de la carte...');\n        mapboxgl.accessToken = token;\n\n        // Initialiser la carte\n        map.current = new mapboxgl.Map({\n          container: mapContainer.current,\n          style: 'mapbox://styles/mapbox/streets-v12',\n          center: center,\n          zoom: zoom,\n          attributionControl: false\n        });\n\n        // Ajouter des contrôles\n        map.current.addControl(new mapboxgl.NavigationControl(), 'top-right');\n        map.current.addControl(new mapboxgl.FullscreenControl(), 'top-right');\n\n        // Marqueur principal\n        new mapboxgl.Marker({ color: '#10b981' })\n          .setLngLat(center)\n          .addTo(map.current);\n\n        // Événements de la carte\n        map.current.on('load', () => {\n          console.log('Carte chargée avec succès !');\n          setIsLoaded(true);\n          setStatus('✅ Carte chargée avec succès !');\n          initializeDrawing();\n        });\n\n        map.current.on('error', (e: unknown) => {\n          console.error('Erreur Mapbox:', e);\n          setError('Erreur lors du chargement de la carte');\n          setStatus('❌ Erreur de carte');\n        });\n\n      } catch (err) {\n        console.error('Erreur d\\'initialisation Mapbox:', err);\n        setError('Impossible d\\'initialiser la carte');\n        setStatus('❌ Erreur d\\'initialisation');\n      }\n    };\n\n    const initializeDrawing = () => {\n      if (!map.current) return;\n\n      try {\n        // Charger Mapbox Draw\n        const drawScript = document.createElement('script');\n        drawScript.src = 'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.4.3/mapbox-gl-draw.js';\n        drawScript.onload = () => {\n          const MapboxDraw = (window as unknown).MapboxDraw;\n          \n          // Initialiser Mapbox Draw\n          draw.current = new MapboxDraw({\n            displayControlsDefault: false,\n            controls: {\n              polygon: true,\n              rectangle: true,\n              circle: true,\n              line_string: true,\n              trash: true\n            },\n            defaultMode: 'simple_select'\n          });\n\n          map.current.addControl(draw.current, 'top-left');\n\n          // Événements de dessin\n          map.current.on('draw.create', (e: unknown) => {\n            console.log('Forme créée:', e);\n            handleAreaSelection(e.features[0]);\n          });\n\n          map.current.on('draw.update', (e: unknown) => {\n            console.log('Forme mise à jour:', e);\n            handleAreaSelection(e.features[0]);\n          });\n\n          map.current.on('draw.delete', () => {\n            console.log('Forme supprimée');\n            setSelectedArea(null);\n            setStreets([]);\n          });\n\n          setStatus('✅ Outils de dessin chargés !');\n        };\n\n        drawScript.onerror = () => {\n          console.error('Erreur chargement Mapbox Draw');\n          setStatus('⚠️ Outils de dessin non disponibles');\n        };\n\n        document.head.appendChild(drawScript);\n\n        // Charger le CSS de Mapbox Draw\n        const drawCss = document.createElement('link');\n        drawCss.rel = 'stylesheet';\n        drawCss.href = 'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.4.3/mapbox-gl-draw.css';\n        document.head.appendChild(drawCss);\n\n      } catch (err) {\n        console.error('Erreur initialisation dessin:', err);\n      }\n    };\n\n    const handleAreaSelection = (feature: unknown) => {\n      if (!feature || !map.current) return;\n\n      setSelectedArea(feature);\n      \n      // Obtenir les coordonnées de la zone sélectionnée\n      const coordinates = feature.geometry.coordinates[0];\n      \n      // Calculer les limites de la zone\n      const lngs = coordinates.map((coord: unknown) => coord[0]);\n      const lats = coordinates.map((coord: unknown) => coord[1]);\n      \n      const bounds = [\n        [Math.min(...lngs), Math.min(...lats)], // Sud-Ouest\n        [Math.max(...lngs), Math.max(...lats)]  // Nord-Est\n      ];\n\n      // Rechercher les rues dans cette zone\n      searchStreetsInArea(bounds);\n    };\n\n    const searchStreetsInArea = async (bounds: unknown) => {\n      if (!map.current) return;\n\n      try {\n        setStatus('🔍 Recherche des rues dans la zone...');\n        \n        // Utiliser l'API de géocodage inversé de Mapbox\n        const [sw, ne] = bounds;\n        const center = [\n          (sw[0] + ne[0]) / 2,\n          (sw[1] + ne[1]) / 2\n        ];\n\n        // Requête pour obtenir les rues\n        const response = await fetch(\n          `https://api.mapbox.com/geocoding/v5/mapbox.places/street.json?bbox=${sw[0]},${sw[1]},${ne[0]},${ne[1]}&access_token=${process.env.NEXT_PUBLIC_MAPBOX_TOKEN}`\n        );\n\n        if (response.ok) {\n          const data = await response.json();\n          const streetFeatures = data.features.filter((feature: unknown) => \n            feature.place_type.includes('street') || \n            feature.place_type.includes('road')\n          );\n          \n          setStreets(streetFeatures);\n          setStatus(`✅ ${streetFeatures.length} rues trouvées dans la zone`);\n          \n          // Afficher les rues sur la carte\n          displayStreetsOnMap(streetFeatures);\n        } else {\n          console.error('Erreur API géocodage');\n          setStatus('❌ Erreur lors de la recherche des rues');\n        }\n      } catch (err) {\n        console.error('Erreur recherche rues:', err);\n        setStatus('❌ Erreur lors de la recherche des rues');\n      }\n    };\n\n    const displayStreetsOnMap = (streetFeatures: unknown[]) => {\n      if (!map.current || !streetFeatures.length) return;\n\n      // Supprimer les anciennes sources\n      if (map.current.getSource('streets')) {\n        map.current.removeLayer('streets');\n        map.current.removeSource('streets');\n      }\n\n      // Ajouter les rues comme source\n      map.current.addSource('streets', {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: streetFeatures\n        }\n      });\n\n      // Ajouter le style des rues\n      map.current.addLayer({\n        id: 'streets',\n        type: 'circle',\n        source: 'streets',\n        paint: {\n          'circle-color': '#ff6b6b',\n          'circle-radius': 6,\n          'circle-stroke-width': 2,\n          'circle-stroke-color': '#ffffff'\n        }\n      });\n\n      // Ajouter les labels des rues\n      map.current.addLayer({\n        id: 'street-labels',\n        type: 'symbol',\n        source: 'streets',\n        layout: {\n          'text-field': ['get', 'text'],\n          'text-font': ['Open Sans Regular', 'Arial Unicode MS Regular'],\n          'text-size': 12,\n          'text-offset': [0, 1.5],\n          'text-anchor': 'top'\n        },\n        paint: {\n          'text-color': '#333333',\n          'text-halo-color': '#ffffff',\n          'text-halo-width': 2\n        }\n      });\n    };\n\n    // Délai pour s'assurer que le DOM est prêt\n    const timer = setTimeout(() => {\n      loadMapbox();\n    }, 1000);\n\n    return () => {\n      clearTimeout(timer);\n      clearTimeout(fallbackTimer);\n    };\n  }, [center, zoom, isLoaded]);\n\n  const handleSearch = async () => {\n    if (!searchQuery.trim() || !map.current) return;\n\n    try {\n      setStatus('🔍 Recherche en cours...');\n      \n      const response = await fetch(\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(searchQuery)}.json?access_token=${process.env.NEXT_PUBLIC_MAPBOX_TOKEN}&country=MQ&limit=5`\n      );\n\n      if (response.ok) {\n        const data = await response.json();\n        setSearchResults(data.features);\n        setStatus(`✅ ${data.features.length} résultats trouvés`);\n      } else {\n        console.error('Erreur recherche');\n        setStatus('❌ Erreur lors de la recherche');\n      }\n    } catch (err) {\n      console.error('Erreur recherche:', err);\n      setStatus('❌ Erreur lors de la recherche');\n    }\n  };\n\n  const handleResultClick = (result: unknown) => {\n    if (!map.current) return;\n\n    const [lng, lat] = result.center;\n    map.current.flyTo({ center: [lng, lat], zoom: 16 });\n    \n    // Ajouter un marqueur\n    new (window as unknown).mapboxgl.Marker({ color: '#3b82f6' })\n      .setLngLat([lng, lat])\n      .setPopup(new (window as unknown).mapboxgl.Popup().setHTML(`\n        <div class=\"p-2\">\n          <h3 class=\"font-semibold\">${result.place_name}</h3>\n          <p class=\"text-sm text-gray-600\">${result.properties?.category || 'Lieu'}</p>\n        </div>\n      `))\n      .addTo(map.current);\n  };\n\n  const activateDrawingMode = (mode: string) => {\n    if (!draw.current) return;\n    \n    setDrawingMode(mode);\n    setIsDrawingActive(true);\n    draw.current.changeMode(mode);\n    setStatus(`✅ Mode ${mode} activé - Dessinez sur la carte`);\n  };\n\n  const deactivateDrawing = () => {\n    if (!draw.current) return;\n    \n    setIsDrawingActive(false);\n    draw.current.changeMode('simple_select');\n    setStatus('✅ Mode dessin désactivé');\n  };\n\n  const clearAllDrawings = () => {\n    if (!draw.current) return;\n    \n    draw.current.deleteAll();\n    setSelectedArea(null);\n    setStreets([]);\n    setStatus('✅ Tous les dessins supprimés');\n  };\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-4 flex items-center justify-center\">\n        <div className=\"bg-white rounded-lg shadow-lg p-6 max-w-md\">\n          <div className=\"text-center\">\n            <div className=\"text-4xl mb-3\">❌</div>\n            <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Erreur de carte</h3>\n            <p className=\"text-red-600 text-sm mb-4\">{error}</p>\n            <p className=\"text-gray-600 text-sm\">Status: {status}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`relative ${className}`} style={{ height }}>\n      {/* Barre de recherche */}\n      <div className=\"absolute top-4 left-4 right-4 z-10\">\n        <div className=\"bg-white rounded-lg shadow-lg p-4\">\n          <div className=\"flex space-x-2\">\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n              placeholder=\"Rechercher un lieu...\"\n              className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n            <button\n              onClick={handleSearch}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              🔍\n            </button>\n          </div>\n          \n          {/* Résultats de recherche */}\n          {searchResults.length > 0 && (\n            <div className=\"mt-2 max-h-40 overflow-y-auto\">\n              {searchResults.map((result, index) => (\n                <div\n                  key={index}\n                  onClick={() => handleResultClick(result)}\n                  className=\"p-2 hover:bg-gray-100 cursor-pointer border-b border-gray-200 last:border-b-0\"\n                >\n                  <p className=\"text-sm font-medium\">{result.place_name}</p>\n                  <p className=\"text-xs text-gray-500\">{result.properties?.category || 'Lieu'}</p>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Barre d'outils de dessin */}\n      <div className=\"absolute top-4 right-4 z-10\">\n        <div className=\"bg-white rounded-lg shadow-lg p-4\">\n          <h3 className=\"font-semibold text-gray-700 mb-3\">🛠️ Outils de dessin</h3>\n          \n          <div className=\"space-y-2\">\n            {/* Boutons de mode de dessin */}\n            <div className=\"grid grid-cols-2 gap-2\">\n              <button\n                onClick={() => activateDrawingMode('draw_rectangle')}\n                className={`px-3 py-2 text-sm rounded-md transition-colors ${\n                  drawingMode === 'draw_rectangle' && isDrawingActive\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }`}\n              >\n                📐 Rectangle\n              </button>\n              \n              <button\n                onClick={() => activateDrawingMode('draw_circle')}\n                className={`px-3 py-2 text-sm rounded-md transition-colors ${\n                  drawingMode === 'draw_circle' && isDrawingActive\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }`}\n              >\n                ⭕ Cercle\n              </button>\n              \n              <button\n                onClick={() => activateDrawingMode('draw_polygon')}\n                className={`px-3 py-2 text-sm rounded-md transition-colors ${\n                  drawingMode === 'draw_polygon' && isDrawingActive\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }`}\n              >\n                🔷 Polygone\n              </button>\n              \n              <button\n                onClick={() => activateDrawingMode('draw_line_string')}\n                className={`px-3 py-2 text-sm rounded-md transition-colors ${\n                  drawingMode === 'draw_line_string' && isDrawingActive\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }`}\n              >\n                📏 Ligne\n              </button>\n            </div>\n            \n            {/* Boutons de contrôle */}\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={deactivateDrawing}\n                className=\"flex-1 px-3 py-2 text-sm bg-gray-500 text-white rounded-md hover:bg-gray-600\"\n              >\n                ✋ Arrêter\n              </button>\n              \n              <button\n                onClick={clearAllDrawings}\n                className=\"flex-1 px-3 py-2 text-sm bg-red-500 text-white rounded-md hover:bg-red-600\"\n              >\n                🗑️ Effacer\n              </button>\n            </div>\n            \n            {/* Indicateur de mode actif */}\n            {isDrawingActive && (\n              <div className=\"text-xs text-blue-600 font-medium text-center\">\n                Mode actif: {drawingMode}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Carte */}\n      <div \n        ref={mapContainer} \n        className=\"w-full h-full rounded-lg\"\n        style={{ height }}\n      />\n      \n      {!isLoaded && (\n        <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center rounded-lg\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n            <p className=\"text-gray-600\">{status}</p>\n          </div>\n        </div>\n      )}\n\n      {/* Panneau d'informations */}\n      <div className=\"absolute bottom-4 right-4 bg-white bg-opacity-90 p-4 rounded-lg shadow max-w-sm\">\n        <h3 className=\"font-semibold text-gray-700 mb-2\">📊 Informations</h3>\n        <div className=\"space-y-1 text-sm\">\n          <p><strong>Status:</strong> {status}</p>\n          <p><strong>Zone sélectionnée:</strong> {selectedArea ? 'Oui' : 'Non'}</p>\n          <p><strong>Rues trouvées:</strong> {streets.length}</p>\n          <p><strong>Mode dessin:</strong> {isDrawingActive ? drawingMode : 'Inactif'}</p>\n        </div>\n        \n        {streets.length > 0 && (\n          <div className=\"mt-3 max-h-32 overflow-y-auto\">\n            <h4 className=\"font-semibold text-gray-700 mb-1\">Rues dans la zone:</h4>\n            {streets.slice(0, 5).map((street, index) => (\n              <p key={index} className=\"text-xs text-gray-600\">\n                • {street.place_name}\n              </p>\n            ))}\n            {streets.length > 5 && (\n              <p className=\"text-xs text-gray-500\">\n                ... et {streets.length - 5} autres\n              </p>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Instructions */}\n      <div className=\"absolute bottom-4 left-4 bg-white bg-opacity-90 p-3 rounded-lg shadow max-w-xs\">\n        <h4 className=\"font-semibold text-gray-700 mb-1\">📝 Instructions</h4>\n        <ul className=\"text-xs text-gray-600 space-y-1\">\n          <li>• Utilisez la barre de recherche</li>\n          <li>• Cliquez sur un outil de dessin</li>\n          <li>• Dessinez sur la carte</li>\n          <li>• Les rues s&apos;afficheront automatiquement</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/DesignSystem.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/DesignSystemDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/DirectMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/DrawingMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/EmojiAllTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/EmojiDebugTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/EmojiExitTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/EmojiMajesticTest.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":13,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[553,606],"text":"\n        👑 DÉCLENCHER L&apos;ANIMATION MAJESTUEUSE\n      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[553,606],"text":"\n        👑 DÉCLENCHER L&lsquo;ANIMATION MAJESTUEUSE\n      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[553,606],"text":"\n        👑 DÉCLENCHER L&#39;ANIMATION MAJESTUEUSE\n      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[553,606],"text":"\n        👑 DÉCLENCHER L&rsquo;ANIMATION MAJESTUEUSE\n      "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { rainMajestic } from \"@/lib/emojiMajesticPresets\";\n\nexport default function EmojiMajesticTest() {\n  return (\n    <div className=\"flex flex-col gap-6 items-center p-6\">\n      <h2 className=\"text-2xl font-bold text-center mb-4\">👑 Animation Majestueuse</h2>\n      \n      <button \n        onClick={() => rainMajestic()} \n        className=\"px-8 py-4 rounded-xl bg-gradient-to-r from-purple-600 to-pink-600 text-white font-bold text-lg hover:from-purple-700 hover:to-pink-700 transition-all shadow-lg transform hover:scale-105\"\n      >\n        👑 DÉCLENCHER L'ANIMATION MAJESTUEUSE\n      </button>\n      \n      <div className=\"text-center text-sm text-gray-600 max-w-md\">\n        <p className=\"mb-2\"><strong>Caractéristiques :</strong></p>\n        <p>• Durée longue (4.2-6s) pour un effet majestueux</p>\n        <p>• Gros emojis premium (28-60px)</p>\n        <p>• Oscillation douce et entrée progressive</p>\n        <p>• Visibilité totale dès l&apos;apparition</p>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/EmojiRain.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isWinner' is assigned a value but never used. Allowed unused args must match /^_/u.","line":15,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isWinner' is assigned a value but never used. Allowed unused args must match /^_/u.","line":47,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isWinner' is assigned a value but never used. Allowed unused args must match /^_/u.","line":79,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":54}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\n\n/* ------------------------------\n   EmojiRain Components\n------------------------------ */\n\ninterface EmojiRainProps {\n  count?: number;\n  isWinner?: boolean;\n}\n\nexport function SadEmojiRain({ count = 35, isWinner = false }: EmojiRainProps) {\n  const emojis = [\"💔\", \"😢\", \"😭\", \"😔\", \"😞\", \"😟\", \"😕\", \"🙁\", \"☹️\", \"😿\"];\n  \n  return (\n    <div className=\"pointer-events-none fixed inset-0 z-[9998] overflow-hidden\">\n      {Array.from({ length: count }).map((_, i) => {\n        const startX = Math.random() * (typeof window !== 'undefined' ? window.innerWidth : 800);\n        \n        return (\n          <motion.div\n            key={i}\n            className=\"absolute text-3xl\"\n            initial={{ y: -50, x: startX }}\n            animate={{\n              y: (typeof window !== 'undefined' ? window.innerHeight : 600) + 100,\n              x: startX,\n              opacity: [1, 1, 0],\n            }}\n            transition={{\n              duration: 2 + Math.random() * 2,\n              delay: Math.random() * 0.5,\n              ease: \"easeOut\",\n            }}\n          >\n            {emojis[Math.floor(Math.random() * emojis.length)]}\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport function HappyEmojiRain({ count = 35, isWinner = true }: EmojiRainProps) {\n  const emojis = [\"🥳\", \"🎉\", \"😃\", \"😄\", \"😁\", \"🤗\", \"😊\", \"😍\", \"🤩\", \"✨\", \"🎊\", \"🎈\"];\n  \n  return (\n    <div className=\"pointer-events-none fixed inset-0 z-[9998] overflow-hidden\">\n      {Array.from({ length: count }).map((_, i) => {\n        const startX = Math.random() * (typeof window !== 'undefined' ? window.innerWidth : 800);\n        \n        return (\n          <motion.div\n            key={i}\n            className=\"absolute text-3xl\"\n            initial={{ y: -50, x: startX }}\n            animate={{\n              y: (typeof window !== 'undefined' ? window.innerHeight : 600) + 100,\n              x: startX,\n              opacity: [1, 1, 0],\n            }}\n            transition={{\n              duration: 2 + Math.random() * 2,\n              delay: Math.random() * 0.5,\n              ease: \"easeOut\",\n            }}\n          >\n            {emojis[Math.floor(Math.random() * emojis.length)]}\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport function MoneyEmojiRain({ count = 35, isWinner = true }: EmojiRainProps) {\n  const emojis = [\"💰\", \"🤑\", \"💵\", \"💎\", \"🏆\", \"⭐\", \"🌟\", \"💫\", \"✨\", \"🎯\", \"💸\", \"💳\"];\n  \n  return (\n    <div className=\"pointer-events-none fixed inset-0 z-[9998] overflow-hidden\">\n      {Array.from({ length: count }).map((_, i) => {\n        const startX = Math.random() * (typeof window !== 'undefined' ? window.innerWidth : 800);\n        \n        return (\n          <motion.div\n            key={i}\n            className=\"absolute text-3xl\"\n            initial={{ y: -50, x: startX }}\n            animate={{\n              y: (typeof window !== 'undefined' ? window.innerHeight : 600) + 100,\n              x: startX,\n              opacity: [1, 1, 0],\n            }}\n            transition={{\n              duration: 2 + Math.random() * 2,\n              delay: Math.random() * 0.5,\n              ease: \"easeOut\",\n            }}\n          >\n            {emojis[Math.floor(Math.random() * emojis.length)]}\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/EmojiSlowTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/EmojiSpeedDensityTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/EmojiSpeedTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/EmojiWowEntriesTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/EnhancedAdvancedSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/EnhancedMapboxMap.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Expression or comma expected.","line":29,"column":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\n\nexport default function EnhancedMapboxMap() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<unknown>(null);\n  const draw = useRef<unknown>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [drawnPolygons, setDrawnPolygons] = useState<unknown[]>([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n\n  \nconst stableIncludes = useCallback(() => {\n  includes();\n}, [includes]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableAll = useCallback(() => {\n  all();\n}, [all]);\n\nconst stableImport = useCallback(() => {\n  import();\n}, [import]);\n\nconst stableImport = useCallback(() => {\n  import();\n}, [import]);\n\nconst stableThen = useCallback(() => {\n  then();\n}, [then]);\n\nconst stableMap = useCallback(() => {\n  Map();\n}, [Map]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableNavigationControl = useCallback(() => {\n  NavigationControl();\n}, [NavigationControl]);\n\nconst stableDefault = useCallback(() => {\n  default();\n}, [default]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stablePrompt = useCallback(() => {\n  prompt();\n}, [prompt]);\n\nconst stableSetDrawnPolygons = useCallback(() => {\n  setDrawnPolygons();\n}, [setDrawnPolygons]);\n\nconst stableNow = useCallback(() => {\n  now();\n}, [now]);\n\nconst stableSetIsDrawing = useCallback(() => {\n  setIsDrawing();\n}, [setIsDrawing]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableSetDrawnPolygons = useCallback(() => {\n  setDrawnPolygons();\n}, [setDrawnPolygons]);\n\nconst stableSlice = useCallback(() => {\n  slice();\n}, [slice]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableSetIsDrawing = useCallback(() => {\n  setIsDrawing();\n}, [setIsDrawing]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableSetIsLoaded = useCallback(() => {\n  setIsLoaded();\n}, [setIsLoaded]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableCatch = useCallback(() => {\n  catch();\n}, [catch]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableRemove = useCallback(() => {\n  remove();\n}, [remove]);\n\nuseEffect(() => {\n  stableIncludes();\n  stableSetError();\n  stableAll();\n  stableImport();\n  stableImport();\n  stableThen();\n  stableMap();\n  stableAddControl();\n  stableNavigationControl();\n  stableDefault();\n  stableAddControl();\n  stableOn();\n  stablePrompt();\n  stableSetDrawnPolygons();\n  stableNow();\n  stableSetIsDrawing();\n  stableOn();\n  stableSetDrawnPolygons();\n  stableSlice();\n  stableOn();\n  stableSetIsDrawing();\n  stableOn();\n  stableSetIsLoaded();\n  stableLog();\n  stableOn();\n  stableError();\n  stableSetError();\n  stableError();\n  stableSetError();\n  stableCatch();\n  stableError();\n  stableSetError();\n  stableRemove();\n}, [stableIncludes, stableSetError, stableAll, stableImport, stableImport, stableThen, stableMap, stableAddControl, stableNavigationControl, stableDefault, stableAddControl, stableOn, stablePrompt, stableSetDrawnPolygons, stableNow, stableSetIsDrawing, stableOn, stableSetDrawnPolygons, stableSlice, stableOn, stableSetIsDrawing, stableOn, stableSetIsLoaded, stableLog, stableOn, stableError, stableSetError, stableError, stableSetError, stableCatch, stableError, stableSetError, stableRemove]);;\n\n  const startDrawing = () => {\n    if (draw.current) {\n      draw.current.changeMode('draw_polygon');\n      setIsDrawing(true);\n    }\n  };\n\n  const clearAll = () => {\n    if (draw.current) {\n      draw.current.deleteAll();\n      setDrawnPolygons([]);\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"h-96 bg-gradient-to-br from-red-50 to-orange-50 rounded-lg border border-red-200 flex items-center justify-center\">\n        <div className=\"text-center p-6\">\n          <div className=\"text-4xl mb-3\">❌</div>\n          <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Erreur de carte</h3>\n          <p className=\"text-red-600 text-sm\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Instructions améliorées */}\n      <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 p-4 rounded-lg border border-blue-200\">\n        <h3 className=\"font-semibold text-blue-800 mb-3 flex items-center\">\n          🗺️ Instructions de dessin\n        </h3>\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"font-medium text-blue-700 mb-2\">Méthode 1 : Contrôles de la carte</h4>\n            <ul className=\"text-sm text-blue-600 space-y-1\">\n              <li>• Cherchez les contrôles en haut à droite de la carte</li>\n              <li>• Cliquez sur l&apos;icône <span className=\"font-mono bg-blue-100 px-1 rounded\">□</span> (polygone)</li>\n              <li>• Dessinez en cliquant sur la carte</li>\n              <li>• Double-cliquez pour fermer</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium text-blue-700 mb-2\">Méthode 2 : Boutons ci-dessous</h4>\n            <ul className=\"text-sm text-blue-600 space-y-1\">\n              <li>• Utilisez le bouton &quot;🎨 Dessiner une zone&quot;</li>\n              <li>• Plus simple et plus visible</li>\n              <li>• Même fonctionnalité</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Boutons de contrôle */}\n      <div className=\"flex gap-3 flex-wrap\">\n        <button\n          onClick={startDrawing}\n          disabled={!isLoaded}\n          className={`px-4 py-2 rounded-lg font-medium transition ${\n            isDrawing\n              ? 'bg-orange-500 text-white'\n              : isLoaded\n              ? 'bg-blue-600 text-white hover:bg-blue-700'\n              : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n          }`}\n        >\n          {isDrawing ? '🎨 Dessin en cours...' : '🎨 Dessiner une zone'}\n        </button>\n        \n        <button\n          onClick={clearAll}\n          disabled={!isLoaded || drawnPolygons.length === 0}\n          className=\"px-4 py-2 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 disabled:bg-gray-300 disabled:text-gray-500 disabled:cursor-not-allowed transition\"\n        >\n          🗑️ Effacer tout\n        </button>\n\n        <div className=\"px-4 py-2 bg-gray-100 rounded-lg text-sm text-gray-600 flex items-center\">\n          📍 Zones créées: {drawnPolygons.length}\n        </div>\n      </div>\n\n      {/* Carte */}\n      <div className=\"h-96 border rounded-lg overflow-hidden relative\">\n        <div \n          ref={mapContainer} \n          className=\"w-full h-full\"\n        />\n        \n        {!isLoaded && (\n          <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n              <p className=\"text-gray-600\">Chargement de la carte...</p>\n            </div>\n          </div>\n        )}\n\n        {/* Indicateur de mode dessin */}\n        {isDrawing && (\n          <div className=\"absolute top-4 left-4 bg-orange-500 text-white px-3 py-2 rounded-lg shadow-lg\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"animate-pulse\">🎨</div>\n              <span className=\"font-medium\">Mode dessin actif</span>\n            </div>\n            <p className=\"text-xs mt-1 opacity-90\">Cliquez sur la carte pour dessiner</p>\n          </div>\n        )}\n      </div>\n\n      {/* Liste des polygones créés */}\n      {drawnPolygons.length > 0 && (\n        <div className=\"bg-white p-4 rounded-lg shadow border\">\n          <h3 className=\"font-semibold mb-3 text-gray-800\">📍 Quartiers créés ({drawnPolygons.length})</h3>\n          <div className=\"space-y-2\">\n            {drawnPolygons.map((polygon, index) => (\n              <div key={polygon.id} className=\"flex justify-between items-center p-3 bg-gradient-to-r from-green-50 to-blue-50 rounded border border-green-200\">\n                <div>\n                  <span className=\"font-medium text-gray-800\">{polygon.name}</span>\n                  <p className=\"text-xs text-gray-500 mt-1\">Zone #{index + 1}</p>\n                </div>\n                <button \n                  onClick={() => {\n                    setDrawnPolygons(prev => prev.filter((_, i) => i !== index));\n                    if (draw.current) {\n                      draw.current.deleteAll();\n                      drawnPolygons.forEach((p, i) => {\n                        if (i !== index) {\n                          draw.current.add(p.feature);\n                        }\n                      });\n                    }\n                  }}\n                  className=\"text-red-600 hover:text-red-800 text-sm font-medium px-2 py-1 rounded hover:bg-red-50 transition\"\n                >\n                  Supprimer\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/FiltresSegmentation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/FixedMacroView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapLoaded' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":60,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setMapLoaded' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":60,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":61,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setMapError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":61,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleCreate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":69,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport {\n  LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer,\n  BarChart, Bar, PieChart, Pie, Cell\n} from \"recharts\";\nimport SankeyChart from \"@/components/SankeyChart\";\nimport EnhancedAdvancedSettings from \"@/components/EnhancedAdvancedSettings\";\nimport ForceDrawingMap from \"@/components/ForceDrawingMap\";\n\n// ✅ Mock data\nconst traficData = [\n  { day: \"Lun\", scans: 320 },\n  { day: \"Mar\", scans: 250 },\n  { day: \"Mer\", scans: 400 },\n  { day: \"Jeu\", scans: 380 },\n  { day: \"Ven\", scans: 500 },\n  { day: \"Sam\", scans: 650 },\n  { day: \"Dim\", scans: 420 },\n];\n\nconst traficHoraire = [\n  { hour: \"8h\", scans: 50 },\n  { hour: \"12h\", scans: 200 },\n  { hour: \"16h\", scans: 180 },\n  { hour: \"20h\", scans: 120 },\n];\n\nconst reductionsData = [\n  { zone: \"Centre-ville\", used: 120 },\n  { zone: \"Quartier Nord\", used: 80 },\n  { zone: \"Zone Est\", used: 60 },\n];\n\nconst jeuxData = [\n  { name: \"Participants réguliers\", value: 300 },\n  { name: \"Occasionnels\", value: 150 },\n  { name: \"Nouveaux\", value: 50 },\n];\n\nconst COLORS = [\"#10B981\", \"#3B82F6\", \"#F59E0B\"];\n\nconst options = [\n  \"Trafic\",\n  \"Réductions\",\n  \"Jeux\",\n  \"Flux\",\n  \"Alertes\",\n  \"Classements\",\n  \"Segmentation\",\n  \"Simulation\",\n];\n\nexport default function FixedMacroView() {\n  const [selectedOptions, setSelectedOptions] = useState<string[]>([\"Trafic\"]);\n  const [zones, setZones] = useState<\n    { name: string; polygon: unknown; professions: Record<string, number> }[]\n  >([]);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [mapError, setMapError] = useState<string | null>(null);\n\n  const toggleOption = (opt: string) => {\n    setSelectedOptions((prev) =>\n      prev.includes(opt) ? prev.filter((o) => o !== opt) : [...prev, opt]\n    );\n  };\n\n  const handleCreate = (feature: unknown) => {\n    const name = prompt(\"Nom du quartier ?\");\n    if (!name) return;\n    const professions = {\n      Pizzeria: Math.floor(Math.random() * 5),\n      Coiffeur: Math.floor(Math.random() * 5),\n      Boutique: Math.floor(Math.random() * 5),\n    };\n    setZones([...zones, { name, polygon: feature, professions }]);\n  };\n\n  // Import du composant de carte avec dessin forcé\n  const SimpleMap = () => {\n    return <ForceDrawingMap />;\n  };\n\n  return (\n    <section className=\"space-y-8 relative\">\n      <EnhancedAdvancedSettings />\n      \n      {/* Choix du type d'analyse */}\n      <div>\n        <label className=\"text-sm font-medium\">🎛️ Choisir ce que vous voulez voir</label>\n        <div className=\"flex flex-wrap gap-2 mt-2\">\n          {options.map((opt) => (\n            <button\n              key={opt}\n              onClick={() => toggleOption(opt)}\n              className={`px-3 py-1 rounded-full border text-sm ${\n                selectedOptions.includes(opt)\n                  ? \"bg-emerald-600 text-white border-emerald-600\"\n                  : \"bg-white text-gray-700 border-gray-300\"\n              }`}\n            >\n              {opt}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Carte */}\n      <SimpleMap />\n\n      {/* Liste des quartiers enregistrés */}\n      {zones.length > 0 && (\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          {zones.map((z, index) => (\n            <div key={index} className=\"bg-white p-4 shadow rounded\">\n              <h3 className=\"font-semibold text-indigo-700\">{z.name}</h3>\n              <p className=\"text-gray-600\">Professions présentes :</p>\n              <ul className=\"ml-4 list-disc\">\n                {Object.entries(z.professions).map(([p, count]) => (\n                  <li key={p}>{p} : {count}</li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Blocs d'analyse */}\n      <div className=\"space-y-6\">\n        {selectedOptions.includes(\"Trafic\") && (\n          <>\n            <div className=\"bg-white p-4 shadow rounded-lg\">\n              <h3 className=\"font-semibold mb-2\">📈 Trafic journalier</h3>\n              <div className=\"h-48\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={traficData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"day\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line type=\"monotone\" dataKey=\"scans\" stroke=\"#10B981\" strokeWidth={2} />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n            <div className=\"bg-white p-4 shadow rounded-lg\">\n              <h3 className=\"font-semibold mb-2\">⏰ Répartition horaire</h3>\n              <div className=\"h-48\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={traficHoraire}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"hour\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"scans\" fill=\"#3B82F6\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n          </>\n        )}\n\n        {selectedOptions.includes(\"Réductions\") && (\n          <div className=\"bg-white p-4 shadow rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">🎟️ Réductions utilisées</h3>\n            <div className=\"h-48\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={reductionsData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"zone\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"used\" fill=\"#F59E0B\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        )}\n\n        {selectedOptions.includes(\"Jeux\") && (\n          <div className=\"bg-white p-4 shadow rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">🎲 Participation aux jeux</h3>\n            <div className=\"h-48\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie data={jeuxData} dataKey=\"value\" outerRadius={80} label>\n                    {jeuxData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        )}\n\n        {selectedOptions.includes(\"Flux\") && (\n          <div className=\"bg-white p-4 shadow rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">🔄 Flux commerciaux</h3>\n            <div className=\"h-80 flex items-center justify-center\">\n              <SankeyChart />\n            </div>\n          </div>\n        )}\n\n        {selectedOptions.includes(\"Alertes\") && (\n          <div className=\"bg-white p-4 shadow rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">⚠️ Alertes & Anomalies</h3>\n            <ul className=\"space-y-2\">\n              <li>🚧 Rue Centrale : -28% trafic (travaux)</li>\n              <li>🎉 Quartier Nord : +15% samedi (festival)</li>\n              <li>🌦️ Prévision pluie dimanche → baisse -20% attendue</li>\n            </ul>\n          </div>\n        )}\n\n        {selectedOptions.includes(\"Classements\") && (\n          <div className=\"bg-white p-4 shadow rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">🥇 Classements</h3>\n            <ol className=\"list-decimal ml-6 space-y-1\">\n              <li>Barber Black&Gold (320 scans)</li>\n              <li>Pizzeria Bella Vista (280 scans)</li>\n              <li>Boutique Chic (210 scans)</li>\n            </ol>\n          </div>\n        )}\n\n        {selectedOptions.includes(\"Segmentation\") && (\n          <div className=\"bg-white p-4 shadow rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">👥 Segmentation clients</h3>\n            <ul className=\"space-y-2 text-gray-700\">\n              <li>👩‍👩‍👧‍👦 Familles : 45%</li>\n              <li>👩 Jeunes : 35%</li>\n              <li>🧓 Seniors : 20%</li>\n            </ul>\n          </div>\n        )}\n\n        {selectedOptions.includes(\"Simulation\") && (\n          <div className=\"bg-white p-4 shadow rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">🔮 Simulation IA</h3>\n            <p className=\"text-gray-600\">\n              Scénario : Fermeture Rue Centrale 6 mois → -35% trafic zone, +15% report Quartier Est.\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/FluxInsights.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":17,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useState } from \"react\";\n\nexport default function FluxInsights({ links }: { links: unknown[] }) {\n  const [insights, setInsights] = useState<string>(\"Chargement...\");\n\n  useEffect(() => {\n    const fetchInsights = async () => {\n      try {\n        const res = await fetch(\"/api/insights/flux\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ links }),\n        });\n        const json = await res.json();\n        setInsights(json.insights || \"Pas d'analyse dispo.\");\n      } catch (err) {\n        setInsights(\"Erreur IA.\");\n      }\n    };\n    fetchInsights();\n  }, [links]);\n\n  return (\n    <div className=\"bg-emerald-50 border border-emerald-200 rounded p-4\">\n      <h3 className=\"font-semibold mb-2\">🤖 Analyse IA des flux</h3>\n      <div className=\"space-y-1 whitespace-pre-line text-gray-700\">{insights}</div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/FluxTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/FluxTransitions.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useState } from \"react\";\nimport SankeyChart from \"./SankeyChart\";\nimport FluxInsights from \"./FluxInsights\";\n\n// ✅ Mock Sankey data\nconst sankeyData = {\n  nodes: [\n    { name: \"Clients\" },\n    { name: \"Commerçants\" },\n    { name: \"Réductions\" },\n    { name: \"Tickets Diamant\" },\n  ],\n  links: [\n    { source: 0, target: 1, value: 120, percentage: 100 },\n    { source: 1, target: 2, value: 80, percentage: 67 },\n    { source: 1, target: 3, value: 40, percentage: 33 },\n  ],\n};\n\n// ✅ Section générique\nfunction Section({ title, children }: { title: string; children: React.ReactNode }) {\n  return (\n    <section className=\"bg-white shadow rounded-xl p-6 space-y-4\">\n      <h2 className=\"text-xl font-semibold\">{title}</h2>\n      {children}\n    </section>\n  );\n}\n\n// ✅ Section Flux & Transitions\nfunction FluxTransitions() {\n  console.log(\"GraphData reçu pour le Sankey :\", sankeyData);\n  \n  return (\n    <Section title=\"🔄 Flux & Transitions\">\n      <div className=\"h-80 w-full\">\n        <SankeyChart data={sankeyData} width={800} height={300} />\n      </div>\n      <FluxInsights links={sankeyData.links.map(link => ({\n        ...link,\n        source: sankeyData.nodes[link.source],\n        target: sankeyData.nodes[link.target]\n      }))} />\n    </Section>\n  );\n}\n\nexport default FluxTransitions;\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ForceDrawingMap.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2401,2404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2401,2404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'isLoaded'. Either include it or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [isLoaded, points.length]","fix":{"range":[2908,2923],"text":"[isLoaded, points.length]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":202,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\n\ninterface Point {\n  id: string;\n  lng: number;\n  lat: number;\n  label: string;\n}\n\nexport default function ForceDrawingMap() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<unknown>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [points, setPoints] = useState<Point[]>([]);\n  const [debugInfo, setDebugInfo] = useState<string>('Initialisation...');\n\n  useEffect(() => {\n    if (!mapContainer.current) return;\n\n    setDebugInfo('Chargement de Mapbox...');\n    \n    import('mapbox-gl').then((mapbox) => {\n      if (!mapContainer.current) return;\n\n      try {\n        const mapInstance = new mapbox.Map({\n          container: mapContainer.current,\n          style: 'mapbox://styles/mapbox/streets-v12',\n          center: [2.3522, 48.8566], // Paris\n          zoom: 13,\n          accessToken: process.env.NEXT_PUBLIC_MAPBOX_TOKEN || ''\n        });\n\n        mapInstance.addControl(new mapbox.NavigationControl(), 'top-right');\n        \n        mapInstance.on('load', () => {\n          setDebugInfo('✅ Carte chargée et prête');\n          setIsLoaded(true);\n        });\n\n        mapInstance.on('click', (e) => {\n          if (!isLoaded) return;\n          \n          const pointId = `point-${Date.now()}`;\n          const newPoint: Point = {\n            id: pointId,\n            lng: e.lngLat.lng,\n            lat: e.lngLat.lat,\n            label: `Point ${points.length + 1}`\n          };\n\n          setPoints(prev => [...prev, newPoint]);\n          setDebugInfo(`Point ajouté: ${newPoint.label}`);\n\n          // Créer un marqueur\n          const marker = new mapbox.Marker()\n            .setLngLat([e.lngLat.lng, e.lngLat.lat])\n            .setPopup(\n              new mapbox.Popup().setText(newPoint.label)\n            )\n            .addTo(mapInstance);\n\n          marker.getElement().addEventListener('click', () => {\n            marker.togglePopup();\n          });\n        });\n\n        mapInstance.on('error', (e) => {\n          console.error('Erreur Mapbox:', e);\n          setError(`Erreur de carte: ${e.error?.message || 'Erreur inconnue'}`);\n          setDebugInfo('❌ Erreur lors du chargement');\n        });\n\n        map.current = mapInstance;\n\n        return () => {\n          if (map.current) {\n            (map.current as any).remove();\n          }\n        };\n      } catch (err) {\n        console.error('Erreur lors de l\\'initialisation:', err);\n        setError(`Erreur d'initialisation: ${err instanceof Error ? err.message : 'Erreur inconnue'}`);\n        setDebugInfo('❌ Erreur lors de l\\'initialisation');\n      }\n    }).catch((err) => {\n      console.error('Erreur lors du chargement de Mapbox:', err);\n      setError(`Erreur de chargement: ${err.message}`);\n      setDebugInfo('❌ Erreur lors du chargement');\n    });\n  }, [points.length]);\n\n  const clearAllPoints = () => {\n    console.log('🗑️ Suppression de tous les points...');\n    setDebugInfo('Suppression de tous les points...');\n    \n    if (map.current) {\n      try {\n        // Supprimer tous les marqueurs de la carte\n        document.querySelectorAll('.mapboxgl-marker').forEach(marker => marker.remove());\n        setPoints([]);\n        setDebugInfo('✅ Tous les points supprimés');\n      } catch (err) {\n        console.error('❌ Erreur lors de la suppression:', err);\n        setDebugInfo('❌ Erreur lors de la suppression');\n      }\n    }\n  };\n\n  const removePoint = (pointId: string) => {\n    setPoints(prev => prev.filter(p => p.id !== pointId));\n    setDebugInfo(`Point supprimé`);\n  };\n\n  if (error) {\n    return (\n      <div className=\"h-96 bg-gradient-to-br from-red-50 to-orange-50 rounded-lg border border-red-200 flex items-center justify-center\">\n        <div className=\"text-center p-6\">\n          <div className=\"text-4xl mb-3\">❌</div>\n          <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Erreur de carte</h3>\n          <p className=\"text-red-600 text-sm\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Instructions simples */}\n      <div className=\"bg-gradient-to-r from-blue-50 to-green-50 p-4 rounded-lg border border-blue-200\">\n        <h3 className=\"font-semibold text-blue-800 mb-3 flex items-center\">\n          📍 Mode Points Bleus - Instructions\n        </h3>\n        <div className=\"space-y-2 text-sm text-blue-700\">\n          <p><strong>Étape 1:</strong> Attendez que &quot;✅ Carte chargée et prête&quot; apparaisse</p>\n          <p><strong>Étape 2:</strong> Cliquez directement sur la carte pour ajouter des points bleus</p>\n          <p><strong>Étape 3:</strong> Chaque clic ajoute un marqueur bleu avec popup</p>\n          <p><strong>Étape 4:</strong> Utilisez les boutons pour gérer vos points</p>\n        </div>\n      </div>\n\n      {/* Debug info */}\n      <div className=\"bg-yellow-50 p-3 rounded border border-yellow-200\">\n        <div className=\"text-sm font-medium text-yellow-800 mb-1\">🔍 Debug Info:</div>\n        <div className=\"text-xs text-yellow-700\">{debugInfo}</div>\n      </div>\n\n      {/* Boutons de contrôle */}\n      <div className=\"flex gap-3 flex-wrap\">\n        <button\n          onClick={clearAllPoints}\n          disabled={!isLoaded || points.length === 0}\n          className=\"px-4 py-2 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 disabled:bg-gray-300 disabled:text-gray-500 disabled:cursor-not-allowed transition\"\n        >\n          🗑️ Effacer tous les points\n        </button>\n\n        <div className=\"px-4 py-2 bg-gray-100 rounded-lg text-sm text-gray-600 flex items-center\">\n          📍 Points: {points.length}\n        </div>\n\n        <div className=\"px-4 py-2 bg-blue-100 rounded-lg text-sm text-blue-600 flex items-center\">\n          {isLoaded ? '✅ Prêt - Cliquez sur la carte' : '⏳ Chargement...'}\n        </div>\n      </div>\n\n      {/* Carte */}\n      <div className=\"h-96 border rounded-lg overflow-hidden relative\">\n        <div \n          ref={mapContainer} \n          className=\"w-full h-full\"\n        />\n        \n        {!isLoaded && (\n          <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n              <p className=\"text-gray-600\">Chargement de la carte...</p>\n            </div>\n          </div>\n        )}\n\n        {/* Instructions sur la carte */}\n        {isLoaded && (\n          <div className=\"absolute bottom-4 left-4 bg-white bg-opacity-95 p-3 rounded-lg shadow-lg text-xs\">\n            <div className=\"font-medium text-gray-700 mb-1\">Instructions:</div>\n            <div>1. Cliquez sur la carte</div>\n            <div>2. Un marqueur bleu apparaît</div>\n            <div>3. Cliquez sur le marqueur pour voir les détails</div>\n          </div>\n        )}\n      </div>\n\n      {/* Liste des points créés */}\n      {points.length > 0 && (\n        <div className=\"bg-white p-4 rounded-lg shadow border\">\n          <h3 className=\"font-semibold mb-3 text-gray-800\">📍 Points créés ({points.length})</h3>\n          <div className=\"space-y-2\">\n            {points.map((point, index) => (\n              <div key={point.id} className=\"flex justify-between items-center p-3 bg-gradient-to-r from-blue-50 to-green-50 rounded border border-blue-200\">\n                <div>\n                  <span className=\"font-medium text-gray-800\">{point.label}</span>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Coordonnées: {point.lng.toFixed(4)}, {point.lat.toFixed(4)}\n                  </p>\n                </div>\n                <button \n                  onClick={() => removePoint(point.id)}\n                  className=\"text-red-600 hover:text-red-800 text-sm font-medium px-2 py-1 rounded hover:bg-red-50 transition\"\n                >\n                  Supprimer\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/HappyEmojiRain.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/IACollectivite.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/IADescriptive.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/IAExplicative.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/IAPredictive.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/IAProfessionnelle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ImageUploader.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":22,"column":11,"nodeType":"JSXOpeningElement","endLine":22,"endColumn":76}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\n\nexport default function ImageUploader() {\n  const [preview, setPreview] = useState<string | null>(null);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const url = URL.createObjectURL(file);\n      setPreview(url);\n    }\n  };\n\n  return (\n    <div>\n      <input type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\n      {preview && (\n        <div>\n          <p>👀 Prévisualisation :</p>\n          <img src={preview} alt=\"preview\" style={{ maxWidth: \"300px\" }} />\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/InteractiveMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/InteractiveMapWithDraw.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isCreating' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'Map'. Either exclude it or remove the dependency array. Outer scope values like 'Map' aren't valid dependencies because mutating them doesn't re-render the component.","line":30,"column":4,"nodeType":"ArrayExpression","endLine":30,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[923,928],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addControl'. Either exclude it or remove the dependency array. Outer scope values like 'addControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":34,"column":4,"nodeType":"ArrayExpression","endLine":34,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[996,1008],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'NavigationControl'. Either exclude it or remove the dependency array. Outer scope values like 'NavigationControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":38,"column":4,"nodeType":"ArrayExpression","endLine":38,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1090,1109],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addControl'. Either exclude it or remove the dependency array. Outer scope values like 'addControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":42,"column":4,"nodeType":"ArrayExpression","endLine":42,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1177,1189],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'FullscreenControl'. Either exclude it or remove the dependency array. Outer scope values like 'FullscreenControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":46,"column":4,"nodeType":"ArrayExpression","endLine":46,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1271,1290],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'MapboxDraw'. Either exclude it or remove the dependency array. Outer scope values like 'MapboxDraw' aren't valid dependencies because mutating them doesn't re-render the component.","line":50,"column":4,"nodeType":"ArrayExpression","endLine":50,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1358,1370],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addControl'. Either exclude it or remove the dependency array. Outer scope values like 'addControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":54,"column":4,"nodeType":"ArrayExpression","endLine":54,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1438,1450],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'on'. Either exclude it or remove the dependency array. Outer scope values like 'on' aren't valid dependencies because mutating them doesn't re-render the component.","line":62,"column":4,"nodeType":"ArrayExpression","endLine":62,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1603,1607],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'fetch'. Either exclude it or remove the dependency array. Outer scope values like 'fetch' aren't valid dependencies because mutating them doesn't re-render the component.","line":66,"column":4,"nodeType":"ArrayExpression","endLine":66,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1665,1672],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'json'. Either exclude it or remove the dependency array. Outer scope values like 'json' aren't valid dependencies because mutating them doesn't re-render the component.","line":70,"column":4,"nodeType":"ArrayExpression","endLine":70,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1728,1734],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'alert'. Either exclude it or remove the dependency array. Outer scope values like 'alert' aren't valid dependencies because mutating them doesn't re-render the component.","line":74,"column":4,"nodeType":"ArrayExpression","endLine":74,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1792,1799],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'log'. Either exclude it or remove the dependency array. Outer scope values like 'log' aren't valid dependencies because mutating them doesn't re-render the component.","line":78,"column":4,"nodeType":"ArrayExpression","endLine":78,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1853,1858],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'on'. Either exclude it or remove the dependency array. Outer scope values like 'on' aren't valid dependencies because mutating them doesn't re-render the component.","line":86,"column":4,"nodeType":"ArrayExpression","endLine":86,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2014,2018],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'on'. Either exclude it or remove the dependency array. Outer scope values like 'on' aren't valid dependencies because mutating them doesn't re-render the component.","line":94,"column":4,"nodeType":"ArrayExpression","endLine":94,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2168,2172],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'remove'. Either exclude it or remove the dependency array. Outer scope values like 'remove' aren't valid dependencies because mutating them doesn't re-render the component.","line":102,"column":4,"nodeType":"ArrayExpression","endLine":102,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2336,2344],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has duplicate dependencies: 'stableAddControl' and 'stableOn'. Either omit them or remove the dependency array.","line":124,"column":4,"nodeType":"ArrayExpression","endLine":124,"endColumn":331,"suggestions":[{"desc":"Update the dependencies array to be: [stableMap, stableAddControl, stableNavigationControl, stableFullscreenControl, stableMapboxDraw, stableLoadNeighborhoods, stableOn, stableFetch, stableJson, stableAlert, stableLog, stableHandleZoneCreation, stableHandleZoneUpdate, stableHandleZoneDeletion, stableRemove]","fix":{"range":[2772,3099],"text":"[stableMap, stableAddControl, stableNavigationControl, stableFullscreenControl, stableMapboxDraw, stableLoadNeighborhoods, stableOn, stableFetch, stableJson, stableAlert, stableLog, stableHandleZoneCreation, stableHandleZoneUpdate, stableHandleZoneDeletion, stableRemove]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadNeighborhoods' function makes the dependencies of useCallback Hook (at line 58) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'loadNeighborhoods' in its own useCallback() Hook.","line":126,"column":9,"nodeType":"VariableDeclarator","endLine":137,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleZoneCreation' function makes the dependencies of useCallback Hook (at line 82) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'handleZoneCreation' in its own useCallback() Hook.","line":232,"column":9,"nodeType":"VariableDeclarator","endLine":244,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleZoneUpdate' function makes the dependencies of useCallback Hook (at line 90) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'handleZoneUpdate' in its own useCallback() Hook.","line":246,"column":9,"nodeType":"VariableDeclarator","endLine":251,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleZoneDeletion' function makes the dependencies of useCallback Hook (at line 98) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'handleZoneDeletion' in its own useCallback() Hook.","line":253,"column":9,"nodeType":"VariableDeclarator","endLine":258,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport mapboxgl from \"mapbox-gl\";\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport { useEffect, useRef, useState } from \"react\";\n\nmapboxgl.accessToken = process.env.NEXT_PUBLIC_MAPBOX_TOKEN!;\n\ninterface Neighborhood {\n  id: string;\n  name: string;\n  geometry: unknown;\n  created_at: string;\n  color: string;\n}\n\nexport default function InteractiveMapWithDraw() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const mapRef = useRef<mapboxgl.Map | null>(null);\n  const draw = useRef<MapboxDraw | null>(null);\n  const [neighborhoods, setNeighborhoods] = useState<Neighborhood[]>([]);\n  const [selectedNeighborhood, setSelectedNeighborhood] = useState<Neighborhood | null>(null);\n  const [isCreating, setIsCreating] = useState(false);\n\n  const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F'];\n\n  \nconst stableMap = useCallback(() => {\n  Map();\n}, [Map]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableNavigationControl = useCallback(() => {\n  NavigationControl();\n}, [NavigationControl]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableFullscreenControl = useCallback(() => {\n  FullscreenControl();\n}, [FullscreenControl]);\n\nconst stableMapboxDraw = useCallback(() => {\n  MapboxDraw();\n}, [MapboxDraw]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableLoadNeighborhoods = useCallback(() => {\n  loadNeighborhoods();\n}, [loadNeighborhoods]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableFetch = useCallback(() => {\n  fetch();\n}, [fetch]);\n\nconst stableJson = useCallback(() => {\n  json();\n}, [json]);\n\nconst stableAlert = useCallback(() => {\n  alert();\n}, [alert]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableHandleZoneCreation = useCallback(() => {\n  handleZoneCreation();\n}, [handleZoneCreation]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableHandleZoneUpdate = useCallback(() => {\n  handleZoneUpdate();\n}, [handleZoneUpdate]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableHandleZoneDeletion = useCallback(() => {\n  handleZoneDeletion();\n}, [handleZoneDeletion]);\n\nconst stableRemove = useCallback(() => {\n  remove();\n}, [remove]);\n\nuseEffect(() => {\n  stableMap();\n  stableAddControl();\n  stableNavigationControl();\n  stableAddControl();\n  stableFullscreenControl();\n  stableMapboxDraw();\n  stableAddControl();\n  stableLoadNeighborhoods();\n  stableOn();\n  stableFetch();\n  stableJson();\n  stableAlert();\n  stableLog();\n  stableHandleZoneCreation();\n  stableOn();\n  stableHandleZoneUpdate();\n  stableOn();\n  stableHandleZoneDeletion();\n  stableRemove();\n}, [stableMap, stableAddControl, stableNavigationControl, stableAddControl, stableFullscreenControl, stableMapboxDraw, stableAddControl, stableLoadNeighborhoods, stableOn, stableFetch, stableJson, stableAlert, stableLog, stableHandleZoneCreation, stableOn, stableHandleZoneUpdate, stableOn, stableHandleZoneDeletion, stableRemove]);;\n\n  const loadNeighborhoods = async () => {\n    try {\n      const response = await fetch('/api/neighborhoods');\n      if (response.ok) {\n        const data = await response.json();\n        setNeighborhoods(data.neighborhoods || []);\n        displayNeighborhoodsOnMap(data.neighborhoods || []);\n      }\n    } catch (err) {\n      console.error('Erreur chargement quartiers:', err);\n    }\n  };\n\n  const displayNeighborhoodsOnMap = (neighborhoods: Neighborhood[]) => {\n    if (!mapRef.current || !neighborhoods.length) return;\n\n    // Supprimer les anciennes sources\n    if (mapRef.current.getSource('neighborhoods')) {\n      mapRef.current.removeLayer('neighborhoods-fill');\n      mapRef.current.removeLayer('neighborhoods-stroke');\n      mapRef.current.removeSource('neighborhoods');\n    }\n\n    // Créer les features GeoJSON\n    const features = neighborhoods.map(neighborhood => ({\n      type: 'Feature',\n      properties: {\n        id: neighborhood.id,\n        name: neighborhood.name,\n        color: neighborhood.color\n      },\n      geometry: neighborhood.geometry\n    }));\n\n    // Ajouter les quartiers comme source\n    mapRef.current.addSource('neighborhoods', {\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: features\n      }\n    });\n\n    // Ajouter le style des quartiers\n    mapRef.current.addLayer({\n      id: 'neighborhoods-fill',\n      type: 'fill',\n      source: 'neighborhoods',\n      paint: {\n        'fill-color': ['get', 'color'],\n        'fill-opacity': 0.3\n      }\n    });\n\n    mapRef.current.addLayer({\n      id: 'neighborhoods-stroke',\n      type: 'line',\n      source: 'neighborhoods',\n      paint: {\n        'line-color': ['get', 'color'],\n        'line-width': 3\n      }\n    });\n\n    // Ajouter les labels\n    mapRef.current.addLayer({\n      id: 'neighborhoods-labels',\n      type: 'symbol',\n      source: 'neighborhoods',\n      layout: {\n        'text-field': ['get', 'name'],\n        'text-font': ['Open Sans Regular', 'Arial Unicode MS Regular'],\n        'text-size': 14,\n        'text-offset': [0, 0],\n        'text-anchor': 'center'\n      },\n      paint: {\n        'text-color': '#333333',\n        'text-halo-color': '#ffffff',\n        'text-halo-width': 2\n      }\n    });\n\n    // Événement de clic sur les quartiers\n    mapRef.current.on('click', 'neighborhoods-fill', (e: unknown) => {\n      const feature = e.features[0];\n      const neighborhood = neighborhoods.find(n => n.id === feature.properties.id);\n      if (neighborhood) {\n        setSelectedNeighborhood(neighborhood);\n      }\n    });\n\n    // Changer le curseur au survol\n    mapRef.current.on('mouseenter', 'neighborhoods-fill', () => {\n      if (mapRef.current) {\n        mapRef.current.getCanvas().style.cursor = 'pointer';\n      }\n    });\n\n    mapRef.current.on('mouseleave', 'neighborhoods-fill', () => {\n      if (mapRef.current) {\n        mapRef.current.getCanvas().style.cursor = '';\n      }\n    });\n  };\n\n  const handleZoneCreation = (feature: unknown) => {\n    setIsCreating(true);\n    const name = prompt('Nom du nouveau quartier:');\n    if (name && name.trim()) {\n      createNeighborhood(name.trim(), feature);\n    } else {\n      // Supprimer la forme si pas de nom\n      if (draw.current) {\n        draw.current.delete(feature.id);\n      }\n    }\n    setIsCreating(false);\n  };\n\n  const handleZoneUpdate = (feature: unknown) => {\n    const neighborhood = neighborhoods.find(n => n.id === feature.id);\n    if (neighborhood) {\n      updateNeighborhood(neighborhood.id, feature);\n    }\n  };\n\n  const handleZoneDeletion = (feature: unknown) => {\n    const neighborhood = neighborhoods.find(n => n.id === feature.id);\n    if (neighborhood) {\n      deleteNeighborhood(neighborhood.id);\n    }\n  };\n\n  const createNeighborhood = async (name: string, geometry: unknown) => {\n    try {\n      const newNeighborhood: Neighborhood = {\n        id: crypto.randomUUID(),\n        name: name,\n        geometry: geometry.geometry,\n        created_at: new Date().toISOString(),\n        color: colors[neighborhoods.length % colors.length]\n      };\n\n      const response = await fetch('/api/neighborhoods', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(newNeighborhood),\n      });\n\n      if (response.ok) {\n        const updatedNeighborhoods = [...neighborhoods, newNeighborhood];\n        setNeighborhoods(updatedNeighborhoods);\n        displayNeighborhoodsOnMap(updatedNeighborhoods);\n        alert(`✅ Quartier \"${name}\" créé avec succès !`);\n      } else {\n        alert('❌ Erreur lors de la création du quartier');\n      }\n    } catch (err) {\n      console.error('Erreur création quartier:', err);\n      alert('❌ Erreur lors de la création du quartier');\n    }\n  };\n\n  const updateNeighborhood = async (id: string, geometry: unknown) => {\n    try {\n      const response = await fetch(`/api/neighborhoods/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ geometry: geometry.geometry }),\n      });\n\n      if (response.ok) {\n        const updatedNeighborhoods = neighborhoods.map(n => \n          n.id === id ? { ...n, geometry: geometry.geometry } : n\n        );\n        setNeighborhoods(updatedNeighborhoods);\n        displayNeighborhoodsOnMap(updatedNeighborhoods);\n        alert('✅ Quartier mis à jour !');\n      }\n    } catch (err) {\n      console.error('Erreur mise à jour quartier:', err);\n    }\n  };\n\n  const deleteNeighborhood = async (id: string) => {\n    try {\n      const response = await fetch(`/api/neighborhoods/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        const updatedNeighborhoods = neighborhoods.filter(n => n.id !== id);\n        setNeighborhoods(updatedNeighborhoods);\n        displayNeighborhoodsOnMap(updatedNeighborhoods);\n        alert('✅ Quartier supprimé !');\n      }\n    } catch (err) {\n      console.error('Erreur suppression quartier:', err);\n    }\n  };\n\n  const activateDrawingMode = (mode: string) => {\n    if (!draw.current) return;\n    draw.current.changeMode(mode);\n  };\n\n  const clearAllDrawings = () => {\n    if (!draw.current) return;\n    draw.current.deleteAll();\n  };\n\n  return (\n    <div className=\"relative\">\n      <h2 className=\"text-lg font-semibold mb-2\">Carte Interactive Complète</h2>\n      \n      {/* Barre d'outils */}\n      <div className=\"absolute top-4 left-4 z-10 bg-white rounded-lg shadow-lg p-4\">\n        <h3 className=\"font-semibold text-gray-700 mb-3\">🛠️ Outils</h3>\n        \n        <div className=\"flex flex-wrap gap-2\">\n          <button\n            onClick={() => activateDrawingMode('draw_point')}\n            className=\"px-3 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n          >\n            📍 Point\n          </button>\n          \n          <button\n            onClick={() => activateDrawingMode('draw_line_string')}\n            className=\"px-3 py-2 text-sm bg-green-600 text-white rounded-md hover:bg-green-700\"\n          >\n            📏 Ligne\n          </button>\n          \n          <button\n            onClick={() => activateDrawingMode('draw_polygon')}\n            className=\"px-3 py-2 text-sm bg-purple-600 text-white rounded-md hover:bg-purple-700\"\n          >\n            🔷 Polygone\n          </button>\n          \n          <button\n            onClick={() => activateDrawingMode('draw_rectangle')}\n            className=\"px-3 py-2 text-sm bg-orange-600 text-white rounded-md hover:bg-orange-700\"\n          >\n            📐 Rectangle\n          </button>\n          \n          <button\n            onClick={() => activateDrawingMode('draw_circle')}\n            className=\"px-3 py-2 text-sm bg-pink-600 text-white rounded-md hover:bg-pink-700\"\n          >\n            ⭕ Cercle\n          </button>\n          \n          <button\n            onClick={clearAllDrawings}\n            className=\"px-3 py-2 text-sm bg-red-600 text-white rounded-md hover:bg-red-700\"\n          >\n            🗑️ Effacer\n          </button>\n        </div>\n      </div>\n\n      {/* Panneau des quartiers */}\n      <div className=\"absolute top-4 right-4 z-10 bg-white rounded-lg shadow-lg p-4 max-w-sm max-h-64 overflow-y-auto\">\n        <h3 className=\"font-semibold text-gray-700 mb-2\">🏘️ Quartiers ({neighborhoods.length})</h3>\n        \n        {neighborhoods.length === 0 ? (\n          <p className=\"text-sm text-gray-500\">Aucun quartier créé</p>\n        ) : (\n          <div className=\"space-y-2\">\n            {neighborhoods.map((neighborhood) => (\n              <div\n                key={neighborhood.id}\n                className={`p-2 rounded cursor-pointer transition-colors ${\n                  selectedNeighborhood?.id === neighborhood.id\n                    ? 'bg-blue-100 border border-blue-300'\n                    : 'bg-gray-50 hover:bg-gray-100'\n                }`}\n                onClick={() => setSelectedNeighborhood(neighborhood)}\n              >\n                <div className=\"flex items-center gap-2\">\n                  <div\n                    className=\"w-3 h-3 rounded-full\"\n                    style={{ backgroundColor: neighborhood.color }}\n                  ></div>\n                  <span className=\"text-sm font-medium\">{neighborhood.name}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Panneau d'actions pour le quartier sélectionné */}\n      {selectedNeighborhood && (\n        <div className=\"absolute bottom-4 left-4 z-10 bg-white rounded-lg shadow-lg p-4 max-w-xs\">\n          <h4 className=\"font-semibold text-gray-700 mb-2\">Quartier sélectionné</h4>\n          <p className=\"text-sm text-gray-600 mb-3\">{selectedNeighborhood.name}</p>\n          \n          <div className=\"space-y-2\">\n            <button\n              onClick={() => setSelectedNeighborhood(null)}\n              className=\"w-full px-3 py-2 text-sm bg-gray-500 text-white rounded-md hover:bg-gray-600\"\n            >\n              ✋ Désélectionner\n            </button>\n          </div>\n        </div>\n      )}\n\n      <div ref={mapContainer} className=\"w-full h-[600px] rounded-lg shadow\" />\n    </div>\n  );\n}\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/InteractiveOfferDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/InteractiveOfferQuiz.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'onComplete', 'points', 'score', and 'total'. Either include them or remove the dependency array. If 'onComplete' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":107,"column":6,"nodeType":"ArrayExpression","endLine":107,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [finished, onComplete, points, score, total]","fix":{"range":[4029,4039],"text":"[finished, onComplete, points, score, total]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/KonpanyaImpactSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/LangToggle.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'getItem'. Either exclude it or remove the dependency array. Outer scope values like 'getItem' aren't valid dependencies because mutating them doesn't re-render the component.","line":10,"column":4,"nodeType":"ArrayExpression","endLine":10,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[203,212],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useState, useEffect } from \"react\";\n\nexport default function LangToggle() {\n  const [lang, setLang] = useState(\"fr\");\n\n  \nconst stableGetItem = useCallback(() => {\n  getItem();\n}, [getItem]);\n\nconst stableSetLang = useCallback(() => {\n  setLang();\n}, [setLang]);\n\nuseEffect(() => {\n  stableGetItem();\n  stableSetLang();\n}, [stableGetItem, stableSetLang]);;\n\n  const changeLang = (newLang: string) => {\n    setLang(newLang);\n    localStorage.setItem(\"lang\", newLang);\n    document.cookie = `lang=${newLang}; path=/; max-age=31536000`;\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"flex gap-2\">\n      {[\"fr\", \"en\", \"gcf\", \"es\"].map((l) => (\n        <button\n          key={l}\n          onClick={() => changeLang(l)}\n          className={`px-2 py-1 text-xs rounded ${\n            lang === l ? \"bg-blue-500 text-white\" : \"bg-gray-200\"\n          }`}\n        >\n          {l.toUpperCase()}\n        </button>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/LocalFlowsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/LocaleSwitch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/MacroView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/MacroViewWithMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/MapboxMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/MiniQuiz.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/MoneyEmojiRain.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/NeighborhoodCreator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isCreating' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":36,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newNeighborhoodName' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":37,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'colors'. Either include it or remove the dependency array.","line":410,"column":6,"nodeType":"ArrayExpression","endLine":410,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [center, zoom, isLoaded, neighborhoods, colors]","fix":{"range":[12894,12933],"text":"[center, zoom, isLoaded, neighborhoods, colors]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\nimport ZoneAnalysisDashboard from './ZoneAnalysisDashboard';\n\ninterface NeighborhoodCreatorProps {\n  className?: string;\n  height?: string;\n  center?: [number, number];\n  zoom?: number;\n}\n\ninterface Neighborhood {\n  id: string;\n  name: string;\n  geometry: unknown;\n  created_at: string;\n  color: string;\n}\n\nexport default function NeighborhoodCreator({ \n  className = \"\", \n  height = \"600px\",\n  center = [-61.55, 16.25], // Martinique par défaut\n  zoom = 12\n}: NeighborhoodCreatorProps) {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<unknown>(null);\n  const draw = useRef<unknown>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [status, setStatus] = useState('Initialisation...');\n  const [neighborhoods, setNeighborhoods] = useState<Neighborhood[]>([]);\n  const [selectedNeighborhood, setSelectedNeighborhood] = useState<Neighborhood | null>(null);\n  const [showAnalysis, setShowAnalysis] = useState(false);\n  const [isCreating, setIsCreating] = useState(false);\n  const [newNeighborhoodName, setNewNeighborhoodName] = useState('');\n\n  const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F'];\n\n  useEffect(() => {\n    const token = process.env.NEXT_PUBLIC_MAPBOX_TOKEN;\n    \n    if (!token || token.includes('your_real_token_here')) {\n      setError('Token Mapbox manquant ou invalide');\n      setStatus('❌ Token manquant');\n      return;\n    }\n\n    setStatus('✅ Token trouvé, chargement de Mapbox...');\n\n    const loadMapbox = () => {\n      if ((window as unknown).mapboxgl) {\n        setStatus('✅ Mapbox déjà chargé, initialisation...');\n        initializeMap();\n        return;\n      }\n\n      // Charger le CSS\n      const cssLink = document.createElement('link');\n      cssLink.rel = 'stylesheet';\n      cssLink.href = 'https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css';\n      cssLink.crossOrigin = 'anonymous';\n      document.head.appendChild(cssLink);\n\n      // Charger le JS\n      const script = document.createElement('script');\n      script.src = 'https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js';\n      script.async = true;\n      script.crossOrigin = 'anonymous';\n      \n      script.onload = () => {\n        console.log('Mapbox GL JS chargé avec succès');\n        setStatus('✅ Mapbox chargé, initialisation de la carte...');\n        initializeMap();\n      };\n\n      script.onerror = () => {\n        console.error('Erreur chargement Mapbox');\n        setStatus('❌ Erreur de chargement');\n        setError('Impossible de charger Mapbox GL JS');\n      };\n\n      document.head.appendChild(script);\n    };\n\n    const initializeMap = () => {\n      if (!mapContainer.current) return;\n\n      try {\n        const mapboxgl = (window as unknown).mapboxgl;\n        if (!mapboxgl) {\n          setError('Mapbox GL JS non disponible');\n          setStatus('❌ Mapbox non disponible');\n          return;\n        }\n\n        setStatus('✅ Initialisation de la carte...');\n        mapboxgl.accessToken = token;\n\n        // Initialiser la carte\n        map.current = new mapboxgl.Map({\n          container: mapContainer.current,\n          style: 'mapbox://styles/mapbox/streets-v12',\n          center: center,\n          zoom: zoom,\n          attributionControl: false\n        });\n\n        // Ajouter des contrôles\n        map.current.addControl(new mapboxgl.NavigationControl(), 'top-right');\n        map.current.addControl(new mapboxgl.FullscreenControl(), 'top-right');\n\n        // Événements de la carte\n        map.current.on('load', () => {\n          console.log('Carte chargée avec succès !');\n          setIsLoaded(true);\n          setStatus('✅ Carte chargée avec succès !');\n          initializeDrawing();\n          loadExistingNeighborhoods();\n        });\n\n        map.current.on('error', (e: unknown) => {\n          console.error('Erreur Mapbox:', e);\n          setError('Erreur lors du chargement de la carte');\n          setStatus('❌ Erreur de carte');\n        });\n\n      } catch (err) {\n        console.error('Erreur d\\'initialisation Mapbox:', err);\n        setError('Impossible d\\'initialiser la carte');\n        setStatus('❌ Erreur d\\'initialisation');\n      }\n    };\n\n    const initializeDrawing = () => {\n      if (!map.current) return;\n\n      try {\n        // Charger Mapbox Draw\n        const drawScript = document.createElement('script');\n        drawScript.src = 'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.4.3/mapbox-gl-draw.js';\n        drawScript.onload = () => {\n          const MapboxDraw = (window as unknown).MapboxDraw;\n          \n          // Initialiser Mapbox Draw\n          draw.current = new MapboxDraw({\n            displayControlsDefault: false,\n            controls: {\n              polygon: true,\n              rectangle: true,\n              circle: true,\n              trash: true\n            },\n            defaultMode: 'simple_select'\n          });\n\n          map.current.addControl(draw.current, 'top-left');\n\n          // Événements de dessin\n          map.current.on('draw.create', (e: unknown) => {\n            console.log('Zone créée:', e);\n            handleZoneCreation(e.features[0]);\n          });\n\n          map.current.on('draw.update', (e: unknown) => {\n            console.log('Zone mise à jour:', e);\n            handleZoneUpdate(e.features[0]);\n          });\n\n          map.current.on('draw.delete', (e: unknown) => {\n            console.log('Zone supprimée:', e);\n            handleZoneDeletion(e.features[0]);\n          });\n\n          setStatus('✅ Outils de dessin chargés !');\n        };\n\n        drawScript.onerror = () => {\n          console.error('Erreur chargement Mapbox Draw');\n          setStatus('⚠️ Outils de dessin non disponibles');\n        };\n\n        document.head.appendChild(drawScript);\n\n        // Charger le CSS de Mapbox Draw\n        const drawCss = document.createElement('link');\n        drawCss.rel = 'stylesheet';\n        drawCss.href = 'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.4.3/mapbox-gl-draw.css';\n        document.head.appendChild(drawCss);\n\n      } catch (err) {\n        console.error('Erreur initialisation dessin:', err);\n      }\n    };\n\n    const loadExistingNeighborhoods = async () => {\n      try {\n        const response = await fetch('/api/neighborhoods');\n        if (response.ok) {\n          const data = await response.json();\n          setNeighborhoods(data.neighborhoods || []);\n          displayNeighborhoodsOnMap(data.neighborhoods || []);\n        }\n      } catch (err) {\n        console.error('Erreur chargement quartiers:', err);\n      }\n    };\n\n    const displayNeighborhoodsOnMap = (neighborhoods: Neighborhood[]) => {\n      if (!map.current || !neighborhoods.length) return;\n\n      // Supprimer les anciennes sources\n      if (map.current.getSource('neighborhoods')) {\n        map.current.removeLayer('neighborhoods-fill');\n        map.current.removeLayer('neighborhoods-stroke');\n        map.current.removeSource('neighborhoods');\n      }\n\n      // Créer les features GeoJSON\n      const features = neighborhoods.map(neighborhood => ({\n        type: 'Feature',\n        properties: {\n          id: neighborhood.id,\n          name: neighborhood.name,\n          color: neighborhood.color\n        },\n        geometry: neighborhood.geometry\n      }));\n\n      // Ajouter les quartiers comme source\n      map.current.addSource('neighborhoods', {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: features\n        }\n      });\n\n      // Ajouter le style des quartiers\n      map.current.addLayer({\n        id: 'neighborhoods-fill',\n        type: 'fill',\n        source: 'neighborhoods',\n        paint: {\n          'fill-color': ['get', 'color'],\n          'fill-opacity': 0.3\n        }\n      });\n\n      map.current.addLayer({\n        id: 'neighborhoods-stroke',\n        type: 'line',\n        source: 'neighborhoods',\n        paint: {\n          'line-color': ['get', 'color'],\n          'line-width': 3\n        }\n      });\n\n      // Ajouter les labels\n      map.current.addLayer({\n        id: 'neighborhoods-labels',\n        type: 'symbol',\n        source: 'neighborhoods',\n        layout: {\n          'text-field': ['get', 'name'],\n          'text-font': ['Open Sans Regular', 'Arial Unicode MS Regular'],\n          'text-size': 14,\n          'text-offset': [0, 0],\n          'text-anchor': 'center'\n        },\n        paint: {\n          'text-color': '#333333',\n          'text-halo-color': '#ffffff',\n          'text-halo-width': 2\n        }\n      });\n\n      // Événement de clic sur les quartiers\n      map.current.on('click', 'neighborhoods-fill', (e: unknown) => {\n        const feature = e.features[0];\n        const neighborhood = neighborhoods.find(n => n.id === feature.properties.id);\n        if (neighborhood) {\n          setSelectedNeighborhood(neighborhood);\n        }\n      });\n\n      // Changer le curseur au survol\n      map.current.on('mouseenter', 'neighborhoods-fill', () => {\n        map.current.getCanvas().style.cursor = 'pointer';\n      });\n\n      map.current.on('mouseleave', 'neighborhoods-fill', () => {\n        map.current.getCanvas().style.cursor = '';\n      });\n    };\n\n    const handleZoneCreation = (feature: unknown) => {\n      setIsCreating(true);\n      setNewNeighborhoodName('');\n      \n      // Afficher un modal pour nommer le quartier\n      const name = prompt('Nom du nouveau quartier:');\n      if (name && name.trim()) {\n        createNeighborhood(name.trim(), feature);\n      } else {\n        // Supprimer la forme si pas de nom\n        draw.current.delete(feature.id);\n      }\n      setIsCreating(false);\n    };\n\n    const handleZoneUpdate = (feature: unknown) => {\n      // Mettre à jour le quartier existant\n      const neighborhood = neighborhoods.find(n => n.id === feature.id);\n      if (neighborhood) {\n        updateNeighborhood(neighborhood.id, feature);\n      }\n    };\n\n    const handleZoneDeletion = (feature: unknown) => {\n      // Supprimer le quartier\n      const neighborhood = neighborhoods.find(n => n.id === feature.id);\n      if (neighborhood) {\n        deleteNeighborhood(neighborhood.id);\n      }\n    };\n\n    const createNeighborhood = async (name: string, geometry: unknown) => {\n      try {\n        const newNeighborhood: Neighborhood = {\n          id: crypto.randomUUID(),\n          name: name,\n          geometry: geometry.geometry,\n          created_at: new Date().toISOString(),\n          color: colors[neighborhoods.length % colors.length]\n        };\n\n        const response = await fetch('/api/neighborhoods', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(newNeighborhood),\n        });\n\n        if (response.ok) {\n          const updatedNeighborhoods = [...neighborhoods, newNeighborhood];\n          setNeighborhoods(updatedNeighborhoods);\n          displayNeighborhoodsOnMap(updatedNeighborhoods);\n          setStatus(`✅ Quartier \"${name}\" créé avec succès !`);\n        } else {\n          setStatus('❌ Erreur lors de la création du quartier');\n        }\n      } catch (err) {\n        console.error('Erreur création quartier:', err);\n        setStatus('❌ Erreur lors de la création du quartier');\n      }\n    };\n\n    const updateNeighborhood = async (id: string, geometry: unknown) => {\n      try {\n        const response = await fetch(`/api/neighborhoods/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ geometry: geometry.geometry }),\n        });\n\n        if (response.ok) {\n          const updatedNeighborhoods = neighborhoods.map(n => \n            n.id === id ? { ...n, geometry: geometry.geometry } : n\n          );\n          setNeighborhoods(updatedNeighborhoods);\n          displayNeighborhoodsOnMap(updatedNeighborhoods);\n          setStatus('✅ Quartier mis à jour !');\n        }\n      } catch (err) {\n        console.error('Erreur mise à jour quartier:', err);\n      }\n    };\n\n    const deleteNeighborhood = async (id: string) => {\n      try {\n        const response = await fetch(`/api/neighborhoods/${id}`, {\n          method: 'DELETE',\n        });\n\n        if (response.ok) {\n          const updatedNeighborhoods = neighborhoods.filter(n => n.id !== id);\n          setNeighborhoods(updatedNeighborhoods);\n          displayNeighborhoodsOnMap(updatedNeighborhoods);\n          setStatus('✅ Quartier supprimé !');\n        }\n      } catch (err) {\n        console.error('Erreur suppression quartier:', err);\n      }\n    };\n\n    // Délai pour s'assurer que le DOM est prêt\n    const timer = setTimeout(() => {\n      loadMapbox();\n    }, 1000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [center, zoom, isLoaded, neighborhoods]);\n\n  const activateDrawingMode = (mode: string) => {\n    if (!draw.current) return;\n    draw.current.changeMode(mode);\n    setStatus(`✅ Mode ${mode} activé - Dessinez un quartier sur la carte`);\n  };\n\n  const clearAllDrawings = () => {\n    if (!draw.current) return;\n    draw.current.deleteAll();\n    setStatus('✅ Tous les dessins supprimés');\n  };\n\n  const analyzeNeighborhood = () => {\n    if (selectedNeighborhood) {\n      setShowAnalysis(true);\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-4 flex items-center justify-center\">\n        <div className=\"bg-white rounded-lg shadow-lg p-6 max-w-md\">\n          <div className=\"text-center\">\n            <div className=\"text-4xl mb-3\">❌</div>\n            <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Erreur de carte</h3>\n            <p className=\"text-red-600 text-sm mb-4\">{error}</p>\n            <p className=\"text-gray-600 text-sm\">Status: {status}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`relative ${className}`} style={{ height }}>\n      {/* Barre d'outils */}\n      <div className=\"absolute top-4 left-4 right-4 z-10\">\n        <div className=\"bg-white rounded-lg shadow-lg p-4\">\n          <h3 className=\"font-semibold text-gray-700 mb-3\">🏘️ Créateur de Quartiers</h3>\n          \n          <div className=\"flex flex-wrap gap-2\">\n            <button\n              onClick={() => activateDrawingMode('draw_rectangle')}\n              className=\"px-3 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n            >\n              📐 Rectangle\n            </button>\n            \n            <button\n              onClick={() => activateDrawingMode('draw_polygon')}\n              className=\"px-3 py-2 text-sm bg-green-600 text-white rounded-md hover:bg-green-700\"\n            >\n              🔷 Polygone\n            </button>\n            \n            <button\n              onClick={() => activateDrawingMode('draw_circle')}\n              className=\"px-3 py-2 text-sm bg-purple-600 text-white rounded-md hover:bg-purple-700\"\n            >\n              ⭕ Cercle\n            </button>\n            \n            <button\n              onClick={clearAllDrawings}\n              className=\"px-3 py-2 text-sm bg-red-600 text-white rounded-md hover:bg-red-700\"\n            >\n              🗑️ Effacer\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Carte */}\n      <div \n        ref={mapContainer} \n        className=\"w-full h-full rounded-lg\"\n        style={{ height }}\n      />\n      \n      {!isLoaded && (\n        <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center rounded-lg\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n            <p className=\"text-gray-600\">{status}</p>\n          </div>\n        </div>\n      )}\n\n      {/* Panneau des quartiers */}\n      <div className=\"absolute bottom-4 right-4 bg-white bg-opacity-90 p-4 rounded-lg shadow max-w-sm max-h-64 overflow-y-auto\">\n        <h3 className=\"font-semibold text-gray-700 mb-2\">🏘️ Quartiers ({neighborhoods.length})</h3>\n        \n        {neighborhoods.length === 0 ? (\n          <p className=\"text-sm text-gray-500\">Aucun quartier créé</p>\n        ) : (\n          <div className=\"space-y-2\">\n            {neighborhoods.map((neighborhood) => (\n              <div\n                key={neighborhood.id}\n                className={`p-2 rounded cursor-pointer transition-colors ${\n                  selectedNeighborhood?.id === neighborhood.id\n                    ? 'bg-blue-100 border border-blue-300'\n                    : 'bg-gray-50 hover:bg-gray-100'\n                }`}\n                onClick={() => setSelectedNeighborhood(neighborhood)}\n              >\n                <div className=\"flex items-center gap-2\">\n                  <div\n                    className=\"w-3 h-3 rounded-full\"\n                    style={{ backgroundColor: neighborhood.color }}\n                  ></div>\n                  <span className=\"text-sm font-medium\">{neighborhood.name}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Panneau d'actions pour le quartier sélectionné */}\n      {selectedNeighborhood && (\n        <div className=\"absolute bottom-4 left-4 bg-white bg-opacity-90 p-4 rounded-lg shadow max-w-xs\">\n          <h4 className=\"font-semibold text-gray-700 mb-2\">Quartier sélectionné</h4>\n          <p className=\"text-sm text-gray-600 mb-3\">{selectedNeighborhood.name}</p>\n          \n          <div className=\"space-y-2\">\n            <button\n              onClick={analyzeNeighborhood}\n              className=\"w-full px-3 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n            >\n              📊 Analyser\n            </button>\n            \n            <button\n              onClick={() => setSelectedNeighborhood(null)}\n              className=\"w-full px-3 py-2 text-sm bg-gray-500 text-white rounded-md hover:bg-gray-600\"\n            >\n              ✋ Désélectionner\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Instructions */}\n      <div className=\"absolute top-4 right-4 z-10\">\n        <div className=\"bg-white bg-opacity-90 p-3 rounded-lg shadow max-w-xs\">\n          <h4 className=\"font-semibold text-gray-700 mb-1\">📝 Instructions</h4>\n          <ul className=\"text-xs text-gray-600 space-y-1\">\n            <li>• Cliquez sur un outil de dessin</li>\n            <li>• Dessinez une zone sur la carte</li>\n            <li>• Donnez un nom au quartier</li>\n            <li>• Cliquez sur un quartier pour l&apos;analyser</li>\n          </ul>\n        </div>\n      </div>\n\n      {/* Modal d'analyse */}\n      {showAnalysis && selectedNeighborhood && (\n        <ZoneAnalysisDashboard\n          zoneData={{\n            name: selectedNeighborhood.name,\n            feature: {\n              type: 'Feature',\n              properties: { id: selectedNeighborhood.id },\n              geometry: selectedNeighborhood.geometry\n            }\n          }}\n          onClose={() => setShowAnalysis(false)}\n        />\n      )}\n    </div>\n  );\n}\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/PageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/Popup.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getRandomGradient' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport React from \"react\";\n\ntype PopupVariant =\n  | \"rect\"\n  | \"carre\"\n  | \"banniere\"\n  | \"header\"\n  | \"cercle\"\n  | \"luxe\"\n  | \"glass\";\n\ninterface PopupProps {\n  variant: PopupVariant;\n  title: string;\n  message: string;\n  onClose: () => void;\n}\n\n// Définir les dégradés\nconst gradients = [\n  \"from-cyan-200 via-sky-300 to-blue-400\",   // bleu lagon\n  \"from-pink-200 via-rose-300 to-orange-300\",// corail\n  \"from-green-200 via-emerald-300 to-teal-400\", // vert menthe\n  \"from-purple-200 via-indigo-300 to-blue-400\", // violet doux\n  \"from-yellow-200 via-orange-200 to-pink-200\", // pêche pastel\n];\n\n// Ajouter le Golden Ticket\nconst goldenTicket = \"from-yellow-300 via-yellow-400 to-yellow-500\";\n\n// Sélection aléatoire avec rareté\nfunction getRandomGradient() {\n  const chance = Math.random();\n  if (chance < 0.1) {\n    return { gradient: goldenTicket, isGolden: true };\n  }\n  return {\n    gradient: gradients[Math.floor(Math.random() * gradients.length)],\n    isGolden: false,\n  };\n}\n\nexport default function Popup({ variant, title, message, onClose }: PopupProps) {\n  if (variant === \"rect\") {\n    return (\n      <div className=\"fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\n        w-80 p-6 rounded-2xl shadow-xl text-center bg-white text-gray-900\">\n        <h3 className=\"text-lg font-bold\">{title}</h3>\n        <p className=\"text-sm mt-2\">{message}</p>\n        <button \n          onClick={onClose} \n          className=\"mt-4 px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-700 transition\"\n        >\n          Fermer\n        </button>\n      </div>\n    );\n  }\n\n  if (variant === \"carre\") {\n    return (\n      <div className=\"fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\n        w-72 h-72 rounded-3xl shadow-xl flex flex-col justify-center items-center bg-white text-gray-900\">\n        <h3 className=\"text-xl font-bold\">{title}</h3>\n        <p className=\"text-sm mt-2\">{message}</p>\n        <button \n          onClick={onClose} \n          className=\"mt-4 px-4 py-2 bg-gray-900 text-white rounded-xl hover:bg-gray-700 transition\"\n        >\n          Fermer\n        </button>\n      </div>\n    );\n  }\n\n  if (variant === \"banniere\") {\n    return (\n      <div className=\"fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\n        w-[360px] h-[160px] rounded-2xl shadow-xl flex items-center bg-white p-4\">\n        <div className=\"flex-1 flex justify-center text-4xl\">🎉</div>\n        <div className=\"flex-[2] text-left\">\n          <h3 className=\"text-lg font-bold text-gray-900\">{title}</h3>\n          <p className=\"text-sm text-gray-600\">{message}</p>\n          <button \n            onClick={onClose} \n            className=\"mt-3 px-3 py-1 bg-gray-900 text-white rounded-lg text-sm hover:bg-gray-700 transition\"\n          >\n            Fermer\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (variant === \"header\") {\n    return (\n      <div className=\"fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\n        w-80 rounded-xl shadow-xl overflow-hidden bg-white\">\n        <div className=\"bg-yellow-400 text-gray-900 font-bold text-center py-2\">{title}</div>\n        <div className=\"p-4 text-center\">\n          <p className=\"text-sm text-gray-700\">{message}</p>\n          <button \n            onClick={onClose} \n            className=\"mt-4 px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-700 transition\"\n          >\n            Fermer\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (variant === \"cercle\") {\n    return (\n      <div className=\"fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\n        w-64 h-64 rounded-full shadow-2xl bg-white\n        flex flex-col justify-center items-center text-center\">\n        <div className=\"text-5xl mb-2\">💎</div>\n        <h3 className=\"text-lg font-bold text-gray-900\">{title}</h3>\n        <p className=\"text-sm text-gray-700\">{message}</p>\n        <button \n          onClick={onClose} \n          className=\"mt-3 px-4 py-1 bg-gray-900 text-white rounded-full text-sm hover:bg-gray-700 transition\"\n        >\n          Fermer\n        </button>\n      </div>\n    );\n  }\n\n  if (variant === \"luxe\") {\n    return (\n      <div className=\"fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\n        w-80 p-6 rounded-xl shadow-xl text-center bg-white border-t-4 border-yellow-400\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">{title}</h3>\n        <p className=\"text-sm text-gray-600 mt-2\">{message}</p>\n        <button \n          onClick={onClose} \n          className=\"mt-4 px-4 py-2 bg-yellow-400 text-gray-900 rounded-lg font-bold hover:bg-yellow-500 transition\"\n        >\n          Fermer\n        </button>\n      </div>\n    );\n  }\n\n  if (variant === \"glass\") {\n    return (\n      <div className=\"fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\n        w-80 p-6 rounded-2xl shadow-xl text-center bg-white\n        backdrop-blur-xl border border-white/30\">\n        <h3 className=\"text-lg font-bold text-gray-900\">{title}</h3>\n        <p className=\"text-sm text-gray-700 mt-1\">{message}</p>\n        <button \n          onClick={onClose} \n          className=\"mt-4 px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-700 transition\"\n        >\n          Fermer\n        </button>\n      </div>\n    );\n  }\n\n  return null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/PrizePopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/PrizePopupFlip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/PrizePopupSlide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/PrizeToast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/QuartierCustom.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/QuartierMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/Quiz.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/RealMapboxMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/RealMapboxMapClick.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/RealWorkingMap.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Expression or comma expected.","line":26,"column":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from 'react';\n\nexport default function RealWorkingMap() {\n  const [isClient, setIsClient] = useState(false);\n  const [mapboxToken, setMapboxToken] = useState<string | null>(null);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [mapError, setMapError] = useState<string | null>(null);\n\n  \nconst stableSetIsClient = useCallback(() => {\n  setIsClient();\n}, [setIsClient]);\n\nconst stableSetMapboxToken = useCallback(() => {\n  setMapboxToken();\n}, [setMapboxToken]);\n\nconst stableIncludes = useCallback(() => {\n  includes();\n}, [includes]);\n\nconst stableImport = useCallback(() => {\n  import();\n}, [import]);\n\nconst stableThen = useCallback(() => {\n  then();\n}, [then]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetMapLoaded = useCallback(() => {\n  setMapLoaded();\n}, [setMapLoaded]);\n\nconst stableCatch = useCallback(() => {\n  catch();\n}, [catch]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetMapError = useCallback(() => {\n  setMapError();\n}, [setMapError]);\n\nuseEffect(() => {\n  stableSetIsClient();\n  stableSetMapboxToken();\n  stableIncludes();\n  stableImport();\n  stableThen();\n  stableLog();\n  stableSetMapLoaded();\n  stableCatch();\n  stableError();\n  stableSetMapError();\n}, [stableSetIsClient, stableSetMapboxToken, stableIncludes, stableImport, stableThen, stableLog, stableSetMapLoaded, stableCatch, stableError, stableSetMapError]);;\n\n  if (!isClient) {\n    return (\n      <div className=\"h-96 bg-gray-100 rounded-lg flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n          <p className=\"text-gray-600\">Initialisation...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!mapboxToken || mapboxToken.includes('your_real_token_here')) {\n    return (\n      <div className=\"h-96 bg-gradient-to-br from-red-50 to-orange-50 rounded-lg border border-red-200 flex items-center justify-center\">\n        <div className=\"text-center p-6\">\n          <div className=\"text-4xl mb-3\">🗺️</div>\n          <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Token Mapbox requis</h3>\n          <p className=\"text-red-600 text-sm mb-4\">\n            Configurez votre token Mapbox dans .env.local\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (mapError) {\n    return (\n      <div className=\"h-96 bg-gradient-to-br from-red-50 to-orange-50 rounded-lg border border-red-200 flex items-center justify-center\">\n        <div className=\"text-center p-6\">\n          <div className=\"text-4xl mb-3\">⚠️</div>\n          <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Erreur</h3>\n          <p className=\"text-red-600 text-sm mb-4\">{mapError}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!mapLoaded) {\n    return (\n      <div className=\"h-96 bg-gradient-to-br from-blue-50 to-indigo-100 rounded-lg border border-blue-200 flex items-center justify-center\">\n        <div className=\"text-center p-6\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n          <p className=\"text-blue-600\">Chargement de Mapbox GL JS...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Une fois que tout est chargé, on peut utiliser le composant Map\n  return <MapboxMapComponent token={mapboxToken} />;\n}\n\nfunction MapboxMapComponent({ token }: { token: string }) {\n  const [viewState, setViewState] = useState({\n    longitude: -61.55,\n    latitude: 16.25,\n    zoom: 11,\n  });\n\n  const [Map, setMap] = useState<unknown>(null);\n  const [Source, setSource] = useState<unknown>(null);\n  const [Layer, setLayer] = useState<unknown>(null);\n\n  \nconst stableImport = useCallback(() => {\n  import();\n}, [import]);\n\nconst stableThen = useCallback(() => {\n  then();\n}, [then]);\n\nconst stableSetMap = useCallback(() => {\n  setMap();\n}, [setMap]);\n\nconst stableSetSource = useCallback(() => {\n  setSource();\n}, [setSource]);\n\nconst stableSetLayer = useCallback(() => {\n  setLayer();\n}, [setLayer]);\n\nuseEffect(() => {\n  stableImport();\n  stableThen();\n  stableSetMap();\n  stableSetSource();\n  stableSetLayer();\n}, [stableImport, stableThen, stableSetMap, stableSetSource, stableSetLayer]);;\n\n  if (!Map || !Source || !Layer) {\n    return (\n      <div className=\"h-96 bg-gradient-to-br from-blue-50 to-indigo-100 rounded-lg border border-blue-200 flex items-center justify-center\">\n        <div className=\"text-center p-6\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n          <p className=\"text-blue-600\">Chargement des composants Mapbox...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-96 border rounded-lg overflow-hidden\">\n      <Map\n        mapboxApiAccessToken={token}\n        {...viewState}\n        onMove={(evt: unknown) => setViewState(evt.viewState)}\n        style={{ width: \"100%\", height: \"100%\" }}\n        mapStyle=\"mapbox://styles/mapbox/light-v11\"\n      >\n        <Source\n          id=\"my-data\"\n          type=\"geojson\"\n          data={{\n            type: \"FeatureCollection\",\n            features: [\n              {\n                type: \"Feature\",\n                geometry: {\n                  type: \"Point\",\n                  coordinates: [-61.55, 16.25],\n                },\n                properties: {\n                  title: \"Point d'intérêt\",\n                },\n              },\n            ],\n          }}\n        >\n          <Layer\n            id=\"point\"\n            type=\"circle\"\n            paint={{\n              \"circle-color\": \"#3B82F6\",\n              \"circle-radius\": 10,\n              \"circle-stroke-width\": 2,\n              \"circle-stroke-color\": \"#ffffff\",\n            }}\n          />\n        </Source>\n      </Map>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/RecommendationSection.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":123,"column":17,"nodeType":"JSXOpeningElement","endLine":127,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\n\ninterface Recommendation {\n  id: string;\n  title: string;\n  description: string;\n  image_url?: string;\n  score?: number;\n  category?: string;\n  merchant_id?: string;\n}\n\ninterface RecommendationResponse {\n  type: \"personnalisees\" | \"populaires\";\n  data: Recommendation[];\n}\n\ninterface RecommendationSectionProps {\n  clientId?: string;\n}\n\nexport default function RecommendationSection({ clientId }: RecommendationSectionProps) {\n  const [recommendations, setRecommendations] = useState<RecommendationResponse | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleRecommendationClick = async (recommendationId: string, merchantId?: string) => {\n    // Si pas de clientId, ne pas tracker le clic\n    if (!clientId) {\n      return;\n    }\n\n    try {\n      await fetch('/api/recommandations/track-click', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          recommendationId,\n          clientId,\n          merchantId,\n          action: 'click'\n        }),\n      });\n    } catch (error) {\n      console.error('Erreur lors du tracking du clic:', error);\n    }\n  };\n\n  useEffect(() => {\n    const fetchRecommendations = async () => {\n      // Si pas de clientId, ne pas charger les recommandations\n      if (!clientId) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        const response = await fetch(`/api/recommandations/${clientId}`);\n        \n        if (!response.ok) {\n          throw new Error(\"Erreur lors du chargement des recommandations\");\n        }\n        \n        const data = await response.json();\n        setRecommendations(data);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : \"Erreur inconnue\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRecommendations();\n  }, [clientId]);\n\n  // Si pas de clientId, ne pas afficher la section\n  if (!clientId) {\n    return null;\n  }\n\n  if (loading) {\n    return (\n      <section className=\"max-w-7xl mx-auto mt-10 px-4 sm:px-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-gray-200 rounded w-64 mb-4\"></div>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"bg-gray-200 rounded-xl h-32\"></div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (error || !recommendations) {\n    return null; // Ne pas afficher la section en cas d'erreur\n  }\n\n  const title = recommendations.type === \"personnalisees\" \n    ? \"🌟 Recommandé pour toi\" \n    : \"🌟 Les plus populaires dans ta communauté\";\n\n  return (\n    <section className=\"max-w-7xl mx-auto mt-10 px-4 sm:px-6\">\n      <h2 className=\"text-lg sm:text-xl font-semibold mb-4 sm:mb-6 text-[#212E40]\">\n        {title}\n      </h2>\n      \n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {recommendations.data.map((rec) => (\n          <div\n            key={rec.id}\n            className=\"bg-white rounded-xl shadow-md p-4 sm:p-6 hover:shadow-lg transition-shadow cursor-pointer\"\n            onClick={() => handleRecommendationClick(rec.id, rec.merchant_id)}\n          >\n            {rec.image_url && (\n              <div className=\"w-full h-32 bg-gray-200 rounded-lg mb-4 overflow-hidden\">\n                <img\n                  src={rec.image_url}\n                  alt={rec.title}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n            )}\n            \n            <h3 className=\"font-semibold text-[#212E40] mb-2 text-sm sm:text-base\">\n              {rec.title}\n            </h3>\n            \n            <p className=\"text-gray-600 text-xs sm:text-sm mb-3\">\n              {rec.description}\n            </p>\n            \n            {rec.category && (\n              <span className=\"inline-block px-2 py-1 bg-[#17BFA0] text-white text-xs rounded-full\">\n                {rec.category}\n              </span>\n            )}\n            \n            {rec.score && recommendations.type === \"personnalisees\" && (\n              <div className=\"mt-2 text-xs text-gray-500\">\n                Score: {rec.score.toFixed(1)}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/RecommendationsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ResultModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isExcellent' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":39,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isGood' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":40,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport Button from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Trophy, Star, Gift, Sparkles, CheckCircle } from \"lucide-react\";\nimport confetti from \"canvas-confetti\";\n\ninterface ResultModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  score: number;\n  totalQuestions: number;\n  pointsEarned: number;\n  reward?: {\n    type: 'points' | 'coupon';\n    amount?: number;\n    label: string;\n    description?: string;\n  };\n}\n\nexport default function ResultModal({\n  isOpen,\n  onClose,\n  score,\n  totalQuestions,\n  pointsEarned,\n  reward\n}: ResultModalProps) {\n  const percentage = Math.round((score / totalQuestions) * 100);\n  const isExcellent = percentage >= 80;\n  const isGood = percentage >= 60;\n\n  useEffect(() => {\n    if (isOpen) {\n      // Animation de confetti pour les bons scores\n      if (percentage >= 70) {\n        confetti({\n          particleCount: 150,\n          spread: 70,\n          origin: { y: 0.6 }\n        });\n      }\n    }\n  }, [isOpen, percentage]);\n\n  const getScoreMessage = () => {\n    if (percentage >= 90) return \"Parfait ! 🎯\";\n    if (percentage >= 80) return \"Excellent ! 🌟\";\n    if (percentage >= 70) return \"Très bien ! 👏\";\n    if (percentage >= 60) return \"Bien joué ! 👍\";\n    if (percentage >= 50) return \"Pas mal ! 💪\";\n    return \"Continuez à vous améliorer ! 📚\";\n  };\n\n  const getScoreColor = () => {\n    if (percentage >= 80) return \"text-green-600\";\n    if (percentage >= 60) return \"text-blue-600\";\n    if (percentage >= 40) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getScoreIcon = () => {\n    if (percentage >= 90) return <Trophy className=\"w-8 h-8 text-yellow-500\" />;\n    if (percentage >= 70) return <Star className=\"w-8 h-8 text-blue-500\" />;\n    return <CheckCircle className=\"w-8 h-8 text-green-500\" />;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md mx-auto\">\n        <DialogHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            {getScoreIcon()}\n          </div>\n          <DialogTitle className=\"text-2xl font-bold\">\n            {getScoreMessage()}\n          </DialogTitle>\n          <DialogDescription className=\"text-lg\">\n            Votre score : {score}/{totalQuestions}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Score détaillé */}\n          <Card>\n            <div className=\"p-4\">\n              <div className=\"text-center space-y-3\">\n                <div className={`text-3xl font-bold ${getScoreColor()}`}>\n                  {percentage}%\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                  <div\n                    className={`h-3 rounded-full transition-all duration-1000 ${\n                      percentage >= 80 ? 'bg-green-500' :\n                      percentage >= 60 ? 'bg-blue-500' :\n                      percentage >= 40 ? 'bg-yellow-500' : 'bg-red-500'\n                    }`}\n                    style={{ width: `${percentage}%` }}\n                  />\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  {score} bonnes réponses sur {totalQuestions} questions\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          {/* Points gagnés */}\n          <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 border-green-200\">\n            <div className=\"p-4\">\n              <div className=\"flex items-center justify-center gap-2\">\n                <Sparkles className=\"w-5 h-5 text-green-600\" />\n                <span className=\"text-lg font-semibold text-green-800\">\n                  +{pointsEarned} points gagnés !\n                </span>\n              </div>\n              <p className=\"text-sm text-green-700 text-center mt-1\">\n                Vos points ont été ajoutés à votre compte\n              </p>\n            </div>\n          </Card>\n\n          {/* Récompense bonus */}\n          {reward && (\n            <Card className=\"bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200\">\n              <div className=\"p-4\">\n                <div className=\"text-center space-y-2\">\n                  <div className=\"flex justify-center\">\n                    <Gift className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                  <h4 className=\"font-semibold text-purple-800\">Récompense bonus !</h4>\n                  <p className=\"text-sm text-purple-700\">\n                    {reward.description || reward.label}\n                  </p>\n                  {reward.type === 'points' && (\n                    <div className=\"inline-flex items-center gap-1 bg-purple-100 text-purple-800 px-3 py-1 rounded-full text-sm font-medium\">\n                      <Sparkles className=\"w-4 h-4\" />\n                      +{reward.amount} points bonus\n                    </div>\n                  )}\n                </div>\n              </div>\n            </Card>\n          )}\n\n          {/* Actions */}\n          <div className=\"flex gap-3\">\n            <Button\n              onClick={onClose}\n              className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n            >\n              Continuer\n            </Button>\n            {percentage < 70 && (\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  onClose();\n                  // Ici vous pourriez relancer le quiz\n                }}\n                className=\"flex-1\"\n              >\n                Rejouer\n              </Button>\n            )}\n          </div>\n\n          {/* Message d'encouragement */}\n          <div className=\"text-center\">\n            <p className=\"text-sm text-gray-600\">\n              {percentage >= 80 \n                ? \"Vous maîtrisez parfaitement le sujet ! 🎉\"\n                : percentage >= 60\n                ? \"Bonne compréhension, continuez comme ça ! 💪\"\n                : \"Chaque quiz est une occasion d'apprendre ! 📚\"\n              }\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ResultPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/RotatingSponsors.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setInterval'. Either exclude it or remove the dependency array. Outer scope values like 'setInterval' aren't valid dependencies because mutating them doesn't re-render the component.","line":60,"column":4,"nodeType":"ArrayExpression","endLine":60,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2358,2371],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'scrollBy'. Either exclude it or remove the dependency array. Outer scope values like 'scrollBy' aren't valid dependencies because mutating them doesn't re-render the component.","line":64,"column":4,"nodeType":"ArrayExpression","endLine":64,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2435,2445],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'scrollTo'. Either exclude it or remove the dependency array. Outer scope values like 'scrollTo' aren't valid dependencies because mutating them doesn't re-render the component.","line":68,"column":4,"nodeType":"ArrayExpression","endLine":68,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2509,2519],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'clearInterval'. Either exclude it or remove the dependency array. Outer scope values like 'clearInterval' aren't valid dependencies because mutating them doesn't re-render the component.","line":72,"column":4,"nodeType":"ArrayExpression","endLine":72,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2593,2608],"text":"[]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":96,"column":13,"nodeType":"JSXOpeningElement","endLine":101,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useState, useEffect, useRef } from \"react\";\nimport SponsorFlowModal from \"./SponsorFlowModal\";\n\nconst sponsors = [\n  {\n    id: \"mutuelle\",\n    title: \"Mutuelle Locale\",\n    description: \"Découvrez nos services de santé et gagnez des points !\",\n    image: \"/ads/mutuelle.png\",\n    videoSrc: \"/videos/mutuelle.mp4\",\n    quiz: [\n      { question: \"Quel est le rôle principal d'une mutuelle ?\", options: [\"Assurer les soins\", \"Vendre des produits\", \"Organiser du sport\"], correctIndex: 0 },\n      { question: \"Combien de repas équilibrés faut-il viser par jour ?\", options: [\"1\", \"2\", \"3\"], correctIndex: 2 },\n    ],\n  },\n  {\n    id: \"carrefour\",\n    title: \"Carrefour Bio\",\n    description: \"Goûtez aux saveurs bio locales avec Carrefour !\",\n    image: \"/ads/carrefour.png\",\n    videoSrc: \"/videos/carrefour.mp4\",\n    quiz: [\n      { question: \"Quelle est la certification bio en Europe ?\", options: [\"AB\", \"CE\", \"ISO\"], correctIndex: 0 },\n      { question: \"Les fruits bio contiennent-ils moins de pesticides ?\", options: [\"Oui\", \"Non\"], correctIndex: 0 },\n    ],\n  },\n  {\n    id: \"decathlon\",\n    title: \"Décathlon Sport\",\n    description: \"Bougez plus avec Décathlon, gagnez en énergie !\",\n    image: \"/ads/decathlon.png\",\n    videoSrc: \"/videos/decathlon.mp4\",\n    quiz: [\n      { question: \"Quelle activité est recommandée pour rester en forme ?\", options: [\"Regarder la TV\", \"Faire du sport\", \"Dormir toute la journée\"], correctIndex: 1 },\n      { question: \"Combien de minutes d'activité physique par jour ?\", options: [\"10\", \"30\", \"90\"], correctIndex: 1 },\n    ],\n  },\n  {\n    id: \"decathlon2\",\n    title: \"Décathlon Running\",\n    description: \"Cours avec style et gagne des points !\",\n    image: \"/ads/decathlon2.png\",\n    videoSrc: \"/videos/decathlon2.mp4\",\n    quiz: [\n      { question: \"Quel équipement est essentiel pour courir ?\", options: [\"Chaussures adaptées\", \"Casquette fashion\", \"Sac à dos lourd\"], correctIndex: 0 },\n      { question: \"Combien de fois par semaine est-il conseillé de courir ?\", options: [\"1\", \"3\", \"7\"], correctIndex: 1 },\n    ],\n  },\n];\n\nexport default function SponsorCarousel() {\n  const [openSponsor, setOpenSponsor] = useState<string | null>(null);\n  const carouselRef = useRef<HTMLDivElement>(null);\n\n  // 🔄 Auto défilement\n  \nconst stableSetInterval = useCallback(() => {\n  setInterval();\n}, [setInterval]);\n\nconst stableScrollBy = useCallback(() => {\n  scrollBy();\n}, [scrollBy]);\n\nconst stableScrollTo = useCallback(() => {\n  scrollTo();\n}, [scrollTo]);\n\nconst stableClearInterval = useCallback(() => {\n  clearInterval();\n}, [clearInterval]);\n\nuseEffect(() => {\n  stableSetInterval();\n  stableScrollBy();\n  stableScrollTo();\n  stableClearInterval();\n}, [stableSetInterval, stableScrollBy, stableScrollTo, stableClearInterval]);;\n\n  return (\n    <div className=\"w-full\">\n      <h2 className=\"text-xl font-bold text-center mb-4\">🎥 Vidéos Interactives</h2>\n\n      {/* Carrousel */}\n      <div\n        ref={carouselRef}\n        className=\"flex gap-4 overflow-x-auto scrollbar-hide snap-x snap-mandatory scroll-smooth px-2\"\n      >\n        {sponsors.map((s) => (\n          <div\n            key={s.id}\n            onClick={() => setOpenSponsor(s.id)}\n            className=\"snap-start flex-shrink-0 w-[85%] sm:w-[48%] lg:w-[30%] cursor-pointer rounded-xl overflow-hidden shadow-lg relative\"\n          >\n            <img\n              src={s.image}\n              alt={s.title}\n              className=\"w-full h-48 md:h-60 lg:h-72 object-cover\"\n              onError={(e) => (e.currentTarget.src = \"/ads/fallback.png\")}\n            />\n            <div className=\"absolute bottom-0 left-0 right-0 bg-black/50 text-white p-3\">\n              <h3 className=\"text-lg font-bold\">{s.title}</h3>\n              <p className=\"text-sm\">{s.description}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* 🎥 Modal sponsor */}\n      {sponsors.map((s) => (\n        <SponsorFlowModal\n          key={s.id}\n          open={openSponsor === s.id}\n          onClose={() => setOpenSponsor(null)}\n          sponsorName={s.title}\n          videoSrc={s.videoSrc}\n          quizQuestions={s.quiz}\n        />\n      ))}\n\n      <style jsx>{`\n        .scrollbar-hide::-webkit-scrollbar {\n          display: none;\n        }\n        .scrollbar-hide {\n          -ms-overflow-style: none;\n          scrollbar-width: none;\n        }\n      `}</style>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SadEmojiRain.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SankeyChart.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'forEach'. Either exclude it or remove the dependency array. Outer scope values like 'forEach' aren't valid dependencies because mutating them doesn't re-render the component.","line":11,"column":4,"nodeType":"ArrayExpression","endLine":11,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[207,216],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'createElementNS'. Either exclude it or remove the dependency array. Outer scope values like 'createElementNS' aren't valid dependencies because mutating them doesn't re-render the component.","line":15,"column":4,"nodeType":"ArrayExpression","endLine":15,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[294,311],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":19,"column":4,"nodeType":"ArrayExpression","endLine":19,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[383,397],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'toString'. Either exclude it or remove the dependency array. Outer scope values like 'toString' aren't valid dependencies because mutating them doesn't re-render the component.","line":23,"column":4,"nodeType":"ArrayExpression","endLine":23,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[461,471],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":27,"column":4,"nodeType":"ArrayExpression","endLine":27,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[543,557],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'toString'. Either exclude it or remove the dependency array. Outer scope values like 'toString' aren't valid dependencies because mutating them doesn't re-render the component.","line":31,"column":4,"nodeType":"ArrayExpression","endLine":31,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[621,631],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":35,"column":4,"nodeType":"ArrayExpression","endLine":35,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[703,717],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'toString'. Either exclude it or remove the dependency array. Outer scope values like 'toString' aren't valid dependencies because mutating them doesn't re-render the component.","line":39,"column":4,"nodeType":"ArrayExpression","endLine":39,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[781,791],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":43,"column":4,"nodeType":"ArrayExpression","endLine":43,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[863,877],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'toString'. Either exclude it or remove the dependency array. Outer scope values like 'toString' aren't valid dependencies because mutating them doesn't re-render the component.","line":47,"column":4,"nodeType":"ArrayExpression","endLine":47,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[941,951],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":51,"column":4,"nodeType":"ArrayExpression","endLine":51,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1023,1037],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":55,"column":4,"nodeType":"ArrayExpression","endLine":55,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1109,1123],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'appendChild'. Either exclude it or remove the dependency array. Outer scope values like 'appendChild' aren't valid dependencies because mutating them doesn't re-render the component.","line":59,"column":4,"nodeType":"ArrayExpression","endLine":59,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1193,1206],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'createElementNS'. Either exclude it or remove the dependency array. Outer scope values like 'createElementNS' aren't valid dependencies because mutating them doesn't re-render the component.","line":63,"column":4,"nodeType":"ArrayExpression","endLine":63,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1284,1301],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":67,"column":4,"nodeType":"ArrayExpression","endLine":67,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1373,1387],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'toString'. Either exclude it or remove the dependency array. Outer scope values like 'toString' aren't valid dependencies because mutating them doesn't re-render the component.","line":71,"column":4,"nodeType":"ArrayExpression","endLine":71,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1451,1461],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":75,"column":4,"nodeType":"ArrayExpression","endLine":75,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1533,1547],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'toString'. Either exclude it or remove the dependency array. Outer scope values like 'toString' aren't valid dependencies because mutating them doesn't re-render the component.","line":79,"column":4,"nodeType":"ArrayExpression","endLine":79,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1611,1621],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":83,"column":4,"nodeType":"ArrayExpression","endLine":83,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1693,1707],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":87,"column":4,"nodeType":"ArrayExpression","endLine":87,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1779,1793],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":91,"column":4,"nodeType":"ArrayExpression","endLine":91,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1865,1879],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":95,"column":4,"nodeType":"ArrayExpression","endLine":95,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1951,1965],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":99,"column":4,"nodeType":"ArrayExpression","endLine":99,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2037,2051],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'appendChild'. Either exclude it or remove the dependency array. Outer scope values like 'appendChild' aren't valid dependencies because mutating them doesn't re-render the component.","line":103,"column":4,"nodeType":"ArrayExpression","endLine":103,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2121,2134],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'forEach'. Either exclude it or remove the dependency array. Outer scope values like 'forEach' aren't valid dependencies because mutating them doesn't re-render the component.","line":107,"column":4,"nodeType":"ArrayExpression","endLine":107,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2196,2205],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'find'. Either exclude it or remove the dependency array. Outer scope values like 'find' aren't valid dependencies because mutating them doesn't re-render the component.","line":111,"column":4,"nodeType":"ArrayExpression","endLine":111,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2261,2267],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'find'. Either exclude it or remove the dependency array. Outer scope values like 'find' aren't valid dependencies because mutating them doesn't re-render the component.","line":115,"column":4,"nodeType":"ArrayExpression","endLine":115,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2323,2329],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'createElementNS'. Either exclude it or remove the dependency array. Outer scope values like 'createElementNS' aren't valid dependencies because mutating them doesn't re-render the component.","line":119,"column":4,"nodeType":"ArrayExpression","endLine":119,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2407,2424],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":123,"column":4,"nodeType":"ArrayExpression","endLine":123,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2496,2510],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":127,"column":4,"nodeType":"ArrayExpression","endLine":127,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2582,2596],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":131,"column":4,"nodeType":"ArrayExpression","endLine":131,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2668,2682],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'max'. Either exclude it or remove the dependency array. Outer scope values like 'max' aren't valid dependencies because mutating them doesn't re-render the component.","line":135,"column":4,"nodeType":"ArrayExpression","endLine":135,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2736,2741],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'toString'. Either exclude it or remove the dependency array. Outer scope values like 'toString' aren't valid dependencies because mutating them doesn't re-render the component.","line":139,"column":4,"nodeType":"ArrayExpression","endLine":139,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2805,2815],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":143,"column":4,"nodeType":"ArrayExpression","endLine":143,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2887,2901],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setAttribute'. Either exclude it or remove the dependency array. Outer scope values like 'setAttribute' aren't valid dependencies because mutating them doesn't re-render the component.","line":147,"column":4,"nodeType":"ArrayExpression","endLine":147,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2973,2987],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'appendChild'. Either exclude it or remove the dependency array. Outer scope values like 'appendChild' aren't valid dependencies because mutating them doesn't re-render the component.","line":151,"column":4,"nodeType":"ArrayExpression","endLine":151,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[3057,3070],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has duplicate dependencies: 'stableAppendChild', 'stableCreateElementNS', 'stableFind', 'stableForEach', 'stableSetAttribute', and 'stableToString'. Either omit them or remove the dependency array.","line":190,"column":4,"nodeType":"ArrayExpression","endLine":190,"endColumn":667,"suggestions":[{"desc":"Update the dependencies array to be: [stableForEach, stableCreateElementNS, stableSetAttribute, stableToString, stableAppendChild, stableFind, stableMax]","fix":{"range":[3902,4565],"text":"[stableForEach, stableCreateElementNS, stableSetAttribute, stableToString, stableAppendChild, stableFind, stableMax]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef } from 'react';\n\nexport default function SankeyChart() {\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  \nconst stableForEach = useCallback(() => {\n  forEach();\n}, [forEach]);\n\nconst stableCreateElementNS = useCallback(() => {\n  createElementNS();\n}, [createElementNS]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableToString = useCallback(() => {\n  toString();\n}, [toString]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableToString = useCallback(() => {\n  toString();\n}, [toString]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableToString = useCallback(() => {\n  toString();\n}, [toString]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableToString = useCallback(() => {\n  toString();\n}, [toString]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableAppendChild = useCallback(() => {\n  appendChild();\n}, [appendChild]);\n\nconst stableCreateElementNS = useCallback(() => {\n  createElementNS();\n}, [createElementNS]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableToString = useCallback(() => {\n  toString();\n}, [toString]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableToString = useCallback(() => {\n  toString();\n}, [toString]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableAppendChild = useCallback(() => {\n  appendChild();\n}, [appendChild]);\n\nconst stableForEach = useCallback(() => {\n  forEach();\n}, [forEach]);\n\nconst stableFind = useCallback(() => {\n  find();\n}, [find]);\n\nconst stableFind = useCallback(() => {\n  find();\n}, [find]);\n\nconst stableCreateElementNS = useCallback(() => {\n  createElementNS();\n}, [createElementNS]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableMax = useCallback(() => {\n  max();\n}, [max]);\n\nconst stableToString = useCallback(() => {\n  toString();\n}, [toString]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableSetAttribute = useCallback(() => {\n  setAttribute();\n}, [setAttribute]);\n\nconst stableAppendChild = useCallback(() => {\n  appendChild();\n}, [appendChild]);\n\nuseEffect(() => {\n  stableForEach();\n  stableCreateElementNS();\n  stableSetAttribute();\n  stableToString();\n  stableSetAttribute();\n  stableToString();\n  stableSetAttribute();\n  stableToString();\n  stableSetAttribute();\n  stableToString();\n  stableSetAttribute();\n  stableSetAttribute();\n  stableAppendChild();\n  stableCreateElementNS();\n  stableSetAttribute();\n  stableToString();\n  stableSetAttribute();\n  stableToString();\n  stableSetAttribute();\n  stableSetAttribute();\n  stableSetAttribute();\n  stableSetAttribute();\n  stableSetAttribute();\n  stableAppendChild();\n  stableForEach();\n  stableFind();\n  stableFind();\n  stableCreateElementNS();\n  stableSetAttribute();\n  stableSetAttribute();\n  stableSetAttribute();\n  stableMax();\n  stableToString();\n  stableSetAttribute();\n  stableSetAttribute();\n  stableAppendChild();\n}, [stableForEach, stableCreateElementNS, stableSetAttribute, stableToString, stableSetAttribute, stableToString, stableSetAttribute, stableToString, stableSetAttribute, stableToString, stableSetAttribute, stableSetAttribute, stableAppendChild, stableCreateElementNS, stableSetAttribute, stableToString, stableSetAttribute, stableToString, stableSetAttribute, stableSetAttribute, stableSetAttribute, stableSetAttribute, stableSetAttribute, stableAppendChild, stableForEach, stableFind, stableFind, stableCreateElementNS, stableSetAttribute, stableSetAttribute, stableSetAttribute, stableMax, stableToString, stableSetAttribute, stableSetAttribute, stableAppendChild]);;\n\n  return (\n    <div className=\"w-full h-full flex items-center justify-center\">\n      <svg\n        ref={svgRef}\n        width=\"400\"\n        height=\"300\"\n        className=\"border rounded-lg bg-gray-50\"\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ScratchCard.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ScratchCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'reward' is defined but never used. Allowed unused args must match /^_/u.","line":17,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React from \"react\";\nimport ScratchCardStableV3 from \"@/components/scratch/ScratchCardStableV3\";\n\n// Interface pour la compatibilité avec l'ancien ScratchCard\ninterface ScratchCardProps {\n  reward: {\n    type: string;\n    amount: number;\n    label: string;\n  };\n  onReveal: () => void;\n}\n\n// Composant de compatibilité qui utilise ScratchCardStableV3\nexport default function ScratchCard({ reward, onReveal }: ScratchCardProps) {\n  return (\n    <ScratchCardStableV3\n      threshold={0.4}\n      goldenTicketChance={0.1}\n      userId=\"compatibility-user\"\n      onReveal={(newReward) => {\n        console.log(\"🎉 Récompense révélée (compatibilité):\", newReward);\n        onReveal();\n      }}\n    />\n  );\n}\n\n// Export nommé pour la compatibilité\nexport { ScratchCard };\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ScratchCardAdmin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ScratchCardSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ScratchCardV3.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'goldenTicketChance' is assigned a value but never used. Allowed unused args must match /^_/u.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is assigned a value but never used. Allowed unused args must match /^_/u.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isInitialized' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":61,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'getWinVariations' function makes the dependencies of useCallback Hook (at line 146) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'getWinVariations' in its own useCallback() Hook.","line":71,"column":9,"nodeType":"VariableDeclarator","endLine":79,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'getLoseVariations' function makes the dependencies of useCallback Hook (at line 150) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'getLoseVariations' in its own useCallback() Hook.","line":81,"column":9,"nodeType":"VariableDeclarator","endLine":89,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'getRandomPrize' function makes the dependencies of useCallback Hook (at line 174) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'getRandomPrize' in its own useCallback() Hook.","line":91,"column":3,"nodeType":"FunctionDeclaration","endLine":116,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'getRandomTicketGradient'. Either exclude it or remove the dependency array. Outer scope values like 'getRandomTicketGradient' aren't valid dependencies because mutating them doesn't re-render the component.","line":122,"column":4,"nodeType":"ArrayExpression","endLine":122,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[4358,4383],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'random'. Either exclude it or remove the dependency array. Outer scope values like 'random' aren't valid dependencies because mutating them doesn't re-render the component.","line":134,"column":4,"nodeType":"ArrayExpression","endLine":134,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[4627,4635],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?","line":141,"column":3,"nodeType":"Identifier","endLine":141,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":141,"column":3,"nodeType":"Identifier","endLine":141,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'useEffect'. Either exclude it or remove the dependency array. Outer scope values like 'useEffect' aren't valid dependencies because mutating them doesn't re-render the component.","line":142,"column":4,"nodeType":"ArrayExpression","endLine":142,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[4799,4810],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'floor'. Either exclude it or remove the dependency array. Outer scope values like 'floor' aren't valid dependencies because mutating them doesn't re-render the component.","line":158,"column":4,"nodeType":"ArrayExpression","endLine":158,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5153,5160],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'random'. Either exclude it or remove the dependency array. Outer scope values like 'random' aren't valid dependencies because mutating them doesn't re-render the component.","line":162,"column":4,"nodeType":"ArrayExpression","endLine":162,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5220,5228],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'floor'. Either exclude it or remove the dependency array. Outer scope values like 'floor' aren't valid dependencies because mutating them doesn't re-render the component.","line":166,"column":4,"nodeType":"ArrayExpression","endLine":166,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5286,5293],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'random'. Either exclude it or remove the dependency array. Outer scope values like 'random' aren't valid dependencies because mutating them doesn't re-render the component.","line":170,"column":4,"nodeType":"ArrayExpression","endLine":170,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5353,5361],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?","line":181,"column":3,"nodeType":"Identifier","endLine":181,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":181,"column":3,"nodeType":"Identifier","endLine":181,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'useEffect'. Either exclude it or remove the dependency array. Outer scope values like 'useEffect' aren't valid dependencies because mutating them doesn't re-render the component.","line":182,"column":4,"nodeType":"ArrayExpression","endLine":182,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5596,5607],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'getContext'. Either exclude it or remove the dependency array. Outer scope values like 'getContext' aren't valid dependencies because mutating them doesn't re-render the component.","line":186,"column":4,"nodeType":"ArrayExpression","endLine":186,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5675,5687],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'getBoundingClientRect'. Either exclude it or remove the dependency array. Outer scope values like 'getBoundingClientRect' aren't valid dependencies because mutating them doesn't re-render the component.","line":190,"column":4,"nodeType":"ArrayExpression","endLine":190,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5777,5800],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'fillRect'. Either exclude it or remove the dependency array. Outer scope values like 'fillRect' aren't valid dependencies because mutating them doesn't re-render the component.","line":194,"column":4,"nodeType":"ArrayExpression","endLine":194,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5864,5874],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'floor'. Either exclude it or remove the dependency array. Outer scope values like 'floor' aren't valid dependencies because mutating them doesn't re-render the component.","line":198,"column":4,"nodeType":"ArrayExpression","endLine":198,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5932,5939],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'fillText'. Either exclude it or remove the dependency array. Outer scope values like 'fillText' aren't valid dependencies because mutating them doesn't re-render the component.","line":202,"column":4,"nodeType":"ArrayExpression","endLine":202,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[6003,6013],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'resize'. Either exclude it or remove the dependency array. Outer scope values like 'resize' aren't valid dependencies because mutating them doesn't re-render the component.","line":206,"column":4,"nodeType":"ArrayExpression","endLine":206,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[6073,6081],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'ResizeObserver'. Either exclude it or remove the dependency array. Outer scope values like 'ResizeObserver' aren't valid dependencies because mutating them doesn't re-render the component.","line":210,"column":4,"nodeType":"ArrayExpression","endLine":210,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[6157,6173],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'observe'. Either exclude it or remove the dependency array. Outer scope values like 'observe' aren't valid dependencies because mutating them doesn't re-render the component.","line":214,"column":4,"nodeType":"ArrayExpression","endLine":214,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[6235,6244],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'disconnect'. Either exclude it or remove the dependency array. Outer scope values like 'disconnect' aren't valid dependencies because mutating them doesn't re-render the component.","line":218,"column":4,"nodeType":"ArrayExpression","endLine":218,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[6312,6324],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has duplicate dependencies: 'stableFloor', 'stableRandom', and 'stableUseEffect'. Either omit them or remove the dependency array.","line":246,"column":4,"nodeType":"ArrayExpression","endLine":246,"endColumn":474,"suggestions":[{"desc":"Update the dependencies array to be: [stableGetRandomTicketGradient, stableSetTicketGradient, stableSetIsWinner, stableRandom, stableSetIsInitialized, stableUseEffect, stableGetWinVariations, stableGetLoseVariations, stableSetVariation, stableFloor, stableGetRandomPrize, stableSetReward, stableGetContext, stableGetBoundingClientRect, stableFillRect, stableFillText, stableResize, stableResizeObserver, stableObserve, stableDisconnect]","fix":{"range":[6919,7389],"text":"[stableGetRandomTicketGradient, stableSetTicketGradient, stableSetIsWinner, stableRandom, stableSetIsInitialized, stableUseEffect, stableGetWinVariations, stableGetLoseVariations, stableSetVariation, stableFloor, stableGetRandomPrize, stableSetReward, stableGetContext, stableGetBoundingClientRect, stableFillRect, stableFillText, stableResize, stableResizeObserver, stableObserve, stableDisconnect]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport confetti from \"canvas-confetti\";\n\n// Import tes pluies d'emojis custom\nimport { SadEmojiRain, HappyEmojiRain, MoneyEmojiRain } from \"./EmojiRain\";\nimport Popup from \"./Popup\";\n\n// Types pour les props configurables\ninterface ScratchCardProps {\n  threshold?: number;\n  goldenTicketChance?: number;\n  onReveal?: (reward: { type: string; amount: number; merchant?: string }) => void;\n  userId?: string;\n}\n\n// Définir les dégradés pour les tickets\nconst ticketGradients = [\n  \"from-cyan-200 via-sky-300 to-blue-400\",   // bleu lagon\n  \"from-pink-200 via-rose-300 to-orange-300\",// corail\n  \"from-green-200 via-emerald-300 to-teal-400\", // vert menthe\n  \"from-purple-200 via-indigo-300 to-blue-400\", // violet doux\n  \"from-yellow-200 via-orange-200 to-pink-200\", // pêche pastel\n];\n\n// Golden Ticket pour les tickets\nconst goldenTicketGradient = \"from-yellow-300 via-yellow-400 to-yellow-500\";\n\n// Sélection aléatoire avec rareté pour les tickets\nfunction getRandomTicketGradient(goldenTicketChance: number = 0.1) {\n  const chance = Math.random();\n  if (chance < goldenTicketChance) {\n    return { gradient: goldenTicketGradient, isGolden: true };\n  }\n  return {\n    gradient: ticketGradients[Math.floor(Math.random() * ticketGradients.length)],\n    isGolden: false,\n  };\n}\n\nexport default function ScratchCardV3({ \n  threshold = 0.4, \n  goldenTicketChance = 0.1, \n  onReveal,\n  userId = \"default-user\"\n}: ScratchCardProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Debug: afficher le threshold reçu\n  console.log(\"🎯 ScratchCardV3 - Threshold reçu:\", threshold);\n\n  // État initial stable pour éviter les erreurs d'hydratation\n  const [ticketGradient, setTicketGradient] = useState({ gradient: \"from-indigo-500 via-purple-500 to-pink-400\", isGolden: false });\n  const [isWinner, setIsWinner] = useState(false);\n  const [variation, setVariation] = useState(\"\");\n  const [revealed, setRevealed] = useState(false);\n  const [popupVisible, setPopupVisible] = useState(false);\n  const [reward, setReward] = useState<{ type: string; amount: number; merchant?: string }>({ type: \"none\", amount: 0 });\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Emojis\n  const [showSadEmojis, setShowSadEmojis] = useState(false);\n  const [showHappyEmojis, setShowHappyEmojis] = useState(false);\n  const [showMoneyEmojis, setShowMoneyEmojis] = useState(false);\n\n  const lastPos = useRef<{ x: number; y: number } | null>(null);\n  const lastCheck = useRef(0);\n\n  const getWinVariations = () => {\n    const emoji = getEmojiSet();\n    return [\n      `${emoji} Bravo, tu repars avec une récompense incroyable ! 🎁🥳`,\n      `${emoji} C'est gagné 🎊`,\n      `${emoji} Quelle chance, tu as gagné ! 🎉`,\n      `${emoji} Jackpot, félicitations 🎆`,\n    ];\n  };\n\n  const getLoseVariations = () => {\n    const emoji = getEmojiSet();\n    return [\n      `${emoji} Pas de chance cette fois... 🍀`,\n      `${emoji} Dommage, retente bientôt ! 🙃`,\n      `${emoji} Ce n'est pas gagné aujourd'hui... 😔`,\n      `${emoji} Tu feras mieux la prochaine fois ! ✨`,\n    ];\n  };\n\n  function getRandomPrize(won: boolean, isGolden: boolean) {\n    if (!won) return { type: \"none\", amount: 0 };\n    \n    // Golden Ticket = récompense spéciale garantie\n    if (isGolden) {\n      return { type: \"golden\", amount: 500, merchant: \"Golden Ticket\" };\n    }\n    \n    const POINTS = [50, 100, 200];\n    const REDUCTIONS = [5, 10, 15];\n    const OFFERS = [\n      { amount: 10, merchant: \"Mutuelle Locale\" },\n      { amount: 15, merchant: \"Boulangerie du Coin\" },\n      { amount: 20, merchant: \"Café Central\" }\n    ];\n    \n    const rand = Math.random();\n    if (rand < 0.4) {\n      return { type: \"points\", amount: POINTS[Math.floor(Math.random() * POINTS.length)] };\n    } else if (rand < 0.7) {\n      return { type: \"reduction\", amount: REDUCTIONS[Math.floor(Math.random() * REDUCTIONS.length)] };\n    } else {\n      const offer = OFFERS[Math.floor(Math.random() * OFFERS.length)];\n      return { type: \"offer\", amount: offer.amount, merchant: offer.merchant };\n    }\n  }\n\n  // Initialisation côté client uniquement pour éviter les erreurs d'hydratation\n  \nconst stableGetRandomTicketGradient = useCallback(() => {\n  getRandomTicketGradient();\n}, [getRandomTicketGradient]);\n\nconst stableSetTicketGradient = useCallback(() => {\n  setTicketGradient();\n}, [setTicketGradient]);\n\nconst stableSetIsWinner = useCallback(() => {\n  setIsWinner();\n}, [setIsWinner]);\n\nconst stableRandom = useCallback(() => {\n  random();\n}, [random]);\n\nconst stableSetIsInitialized = useCallback(() => {\n  setIsInitialized();\n}, [setIsInitialized]);\n\nconst stableUseEffect = useCallback(() => {\n  useEffect();\n}, [useEffect]);\n\nconst stableGetWinVariations = useCallback(() => {\n  getWinVariations();\n}, [getWinVariations]);\n\nconst stableGetLoseVariations = useCallback(() => {\n  getLoseVariations();\n}, [getLoseVariations]);\n\nconst stableSetVariation = useCallback(() => {\n  setVariation();\n}, [setVariation]);\n\nconst stableFloor = useCallback(() => {\n  floor();\n}, [floor]);\n\nconst stableRandom = useCallback(() => {\n  random();\n}, [random]);\n\nconst stableFloor = useCallback(() => {\n  floor();\n}, [floor]);\n\nconst stableRandom = useCallback(() => {\n  random();\n}, [random]);\n\nconst stableGetRandomPrize = useCallback(() => {\n  getRandomPrize();\n}, [getRandomPrize]);\n\nconst stableSetReward = useCallback(() => {\n  setReward();\n}, [setReward]);\n\nconst stableUseEffect = useCallback(() => {\n  useEffect();\n}, [useEffect]);\n\nconst stableGetContext = useCallback(() => {\n  getContext();\n}, [getContext]);\n\nconst stableGetBoundingClientRect = useCallback(() => {\n  getBoundingClientRect();\n}, [getBoundingClientRect]);\n\nconst stableFillRect = useCallback(() => {\n  fillRect();\n}, [fillRect]);\n\nconst stableFloor = useCallback(() => {\n  floor();\n}, [floor]);\n\nconst stableFillText = useCallback(() => {\n  fillText();\n}, [fillText]);\n\nconst stableResize = useCallback(() => {\n  resize();\n}, [resize]);\n\nconst stableResizeObserver = useCallback(() => {\n  ResizeObserver();\n}, [ResizeObserver]);\n\nconst stableObserve = useCallback(() => {\n  observe();\n}, [observe]);\n\nconst stableDisconnect = useCallback(() => {\n  disconnect();\n}, [disconnect]);\n\nuseEffect(() => {\n  stableGetRandomTicketGradient();\n  stableSetTicketGradient();\n  stableSetIsWinner();\n  stableRandom();\n  stableSetIsInitialized();\n  stableUseEffect();\n  stableGetWinVariations();\n  stableGetLoseVariations();\n  stableSetVariation();\n  stableFloor();\n  stableRandom();\n  stableFloor();\n  stableRandom();\n  stableGetRandomPrize();\n  stableSetReward();\n  stableUseEffect();\n  stableGetContext();\n  stableGetBoundingClientRect();\n  stableFillRect();\n  stableFloor();\n  stableFillText();\n  stableResize();\n  stableResizeObserver();\n  stableObserve();\n  stableDisconnect();\n}, [stableGetRandomTicketGradient, stableSetTicketGradient, stableSetIsWinner, stableRandom, stableSetIsInitialized, stableUseEffect, stableGetWinVariations, stableGetLoseVariations, stableSetVariation, stableFloor, stableRandom, stableFloor, stableRandom, stableGetRandomPrize, stableSetReward, stableUseEffect, stableGetContext, stableGetBoundingClientRect, stableFillRect, stableFloor, stableFillText, stableResize, stableResizeObserver, stableObserve, stableDisconnect]);;\n\n  const scratchAt = (x: number, y: number) => {\n    console.log(\"🎨 Grattage détecté à:\", x, y);\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.log(\"❌ Canvas non trouvé\");\n      return;\n    }\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n      console.log(\"❌ Contexte canvas non trouvé\");\n      return;\n    }\n\n    ctx.globalCompositeOperation = \"destination-out\";\n    ctx.lineJoin = \"round\";\n    ctx.lineCap = \"round\";\n    ctx.lineWidth = 40;\n\n    ctx.beginPath();\n    if (lastPos.current) {\n      ctx.moveTo(lastPos.current.x, lastPos.current.y);\n      ctx.lineTo(x, y);\n    } else {\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + 0.1, y + 0.1);\n    }\n    ctx.stroke();\n\n    lastPos.current = { x, y };\n\n    const now = Date.now();\n    if (now - lastCheck.current > 200 && !revealed) {\n      lastCheck.current = now;\n      checkProgress();\n    }\n  };\n\n  const checkProgress = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    let transparent = 0;\n    // Optimisation : sampling plus intelligent (i += 100 au lieu de 40)\n    for (let i = 3; i < imageData.data.length; i += 100) {\n      if (imageData.data[i] === 0) transparent++;\n    }\n    // Calcul correct du pourcentage avec le sampling\n    const totalPixels = Math.floor((canvas.width * canvas.height) / 100);\n    const percent = transparent / totalPixels;\n\n    // Debug: afficher le pourcentage et le threshold\n    console.log(`Grattage: ${(percent * 100).toFixed(1)}% (threshold: ${(threshold * 100).toFixed(1)}%)`);\n\n    if (percent > threshold && !revealed) {\n      setRevealed(true);\n      setPopupVisible(true);\n\n      // 🎆 Confettis avec requestAnimationFrame pour les performances (seulement pour les gains)\n      if (isWinner) {\n        requestAnimationFrame(() => {\n          confetti({ particleCount: 120, spread: 70, origin: { y: 0.6 } });\n        });\n      }\n\n      // Emojis selon reward\n      triggerEmojis();\n\n      // Callback onReveal si fourni\n      if (onReveal) {\n        onReveal(reward);\n      }\n    }\n  };\n\n  // Emojis cohérents par type de récompense\n  const getEmojiSet = () => {\n    if (!isWinner) {\n      // Emojis de consolation - aléatoires mais cohérents\n      const sadEmojis = [\"😢\", \"😔\", \"😞\", \"💔\", \"😕\", \"🙁\", \"😟\", \"😿\"];\n      return sadEmojis[Math.floor(Math.random() * sadEmojis.length)];\n    }\n    \n    if (reward.type === \"golden\") {\n      // Emojis dorés et spéciaux\n      const goldenEmojis = [\"🎟️\", \"✨\", \"💎\", \"🏆\", \"👑\", \"⭐\", \"🌟\", \"💫\"];\n      return goldenEmojis[Math.floor(Math.random() * goldenEmojis.length)];\n    }\n    \n    if (reward.type === \"points\") {\n      if (reward.amount >= 200) {\n        // Gros gains - emojis d'argent\n        const moneyEmojis = [\"💰\", \"💵\", \"💸\", \"💴\", \"💶\", \"💷\", \"🪙\", \"💎\"];\n        return moneyEmojis[Math.floor(Math.random() * moneyEmojis.length)];\n      } else if (reward.amount >= 100) {\n        // Gains moyens - emojis de joie\n        const happyEmojis = [\"🎉\", \"🎊\", \"🥳\", \"😄\", \"😁\", \"🤩\", \"🎈\", \"🎁\"];\n        return happyEmojis[Math.floor(Math.random() * happyEmojis.length)];\n      } else {\n        // Petits gains - emojis de contentement\n        const contentEmojis = [\"😊\", \"🙂\", \"😌\", \"😇\", \"🥰\", \"😋\", \"🎯\", \"✨\"];\n        return contentEmojis[Math.floor(Math.random() * contentEmojis.length)];\n      }\n    }\n    \n    if (reward.type === \"reduction\" || reward.type === \"offer\") {\n      if (reward.amount >= 20) {\n        // Grosses réductions - emojis d'excitation\n        const excitedEmojis = [\"🤯\", \"😱\", \"🤩\", \"🔥\", \"💥\", \"⚡\", \"🚀\", \"🎆\"];\n        return excitedEmojis[Math.floor(Math.random() * excitedEmojis.length)];\n      } else if (reward.amount >= 10) {\n        // Réductions moyennes - emojis de satisfaction\n        const satisfiedEmojis = [\"😎\", \"🤗\", \"😏\", \"😉\", \"🙃\", \"😋\", \"🛍️\", \"💳\"];\n        return satisfiedEmojis[Math.floor(Math.random() * satisfiedEmojis.length)];\n      } else {\n        // Petites réductions - emojis de plaisir\n        const pleasedEmojis = [\"😊\", \"🙂\", \"😌\", \"😇\", \"🥰\", \"😋\", \"🎯\", \"✨\"];\n        return pleasedEmojis[Math.floor(Math.random() * pleasedEmojis.length)];\n      }\n    }\n    \n    // Par défaut - emojis neutres\n    const neutralEmojis = [\"😊\", \"🙂\", \"😌\", \"😇\", \"🥰\", \"😋\", \"🎯\", \"✨\"];\n    return neutralEmojis[Math.floor(Math.random() * neutralEmojis.length)];\n  };\n\n  const triggerEmojis = () => {\n    if (!isWinner) {\n      // Perte - emojis tristes\n      setShowSadEmojis(true);\n      setTimeout(() => setShowSadEmojis(false), 5000);\n    } else if (reward.type === \"golden\") {\n      // Golden Ticket - emojis d'argent (le plus rare)\n      setShowMoneyEmojis(true);\n      setTimeout(() => setShowMoneyEmojis(false), 5000);\n    } else if (reward.type === \"points\") {\n      if (reward.amount >= 200) {\n        // Gros gains - emojis d'argent\n        setShowMoneyEmojis(true);\n        setTimeout(() => setShowMoneyEmojis(false), 5000);\n      } else if (reward.amount >= 100) {\n        // Gains moyens - emojis joyeux\n        setShowHappyEmojis(true);\n        setTimeout(() => setShowHappyEmojis(false), 5000);\n      } else {\n        // Petits gains - emojis joyeux aussi\n      setShowHappyEmojis(true);\n      setTimeout(() => setShowHappyEmojis(false), 5000);\n      }\n    } else if (reward.type === \"reduction\" || reward.type === \"offer\") {\n      if (reward.amount >= 20) {\n        // Grosses réductions - emojis d'argent\n      setShowMoneyEmojis(true);\n      setTimeout(() => setShowMoneyEmojis(false), 5000);\n    } else {\n      // Réductions normales - emojis joyeux\n      setShowHappyEmojis(true);\n      setTimeout(() => setShowHappyEmojis(false), 5000);\n    }\n    } else {\n      // Par défaut - emojis joyeux pour les gains\n      setShowHappyEmojis(true);\n      setTimeout(() => setShowHappyEmojis(false), 5000);\n    }\n  };\n\n  const getPopupVariant = () => {\n    // Toutes les variantes utilisent maintenant la bannière\n    return \"banniere\";\n  };\n\n  const getPopupTitle = () => {\n    const emoji = getEmojiSet();\n    if (!isWinner) return `${emoji} Dommage`;\n    if (reward.type === \"golden\") return `${emoji} GOLDEN TICKET !`;\n    if (reward.type === \"points\") return `${emoji} Félicitations !`;\n    if (reward.type === \"offer\") return `${emoji} Offre débloquée`;\n    if (reward.type === \"reduction\") return `${emoji} Réduction gagnée`;\n    return `${emoji} Bravo !`;\n  };\n\n  const getPopupMessage = () => {\n    const emoji = getEmojiSet();\n    if (!isWinner) return `Aucun gain cette fois-ci. Reviens bientôt pour retenter ta chance ${emoji}`;\n    if (reward.type === \"golden\") return `GOLDEN TICKET ! Tu as gagné ${reward.amount} points spéciaux ! ${emoji}💎`;\n    if (reward.type === \"points\") return `Tu as gagné ${reward.amount} points Kanpanya ! ${emoji}`;\n    if (reward.type === \"offer\") return `-${reward.amount}% de réduction chez ${reward.merchant} ! ${emoji}`;\n    if (reward.type === \"reduction\") return `Tu as gagné ${reward.amount}% de réduction ! ${emoji}`;\n    return `Merci d'avoir participé ! ${emoji}`;\n  };\n\n  const handleDown = (x: number, y: number) => {\n    lastPos.current = { x, y };\n    scratchAt(x, y);\n  };\n\n  const handleUp = () => {\n    lastPos.current = null;\n  };\n\n  const handleMove = (e: React.MouseEvent | React.TouchEvent) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    let x = 0,\n      y = 0;\n    if (\"touches\" in e) {\n      // Mobile : empêcher le scroll/zoom pendant le grattage\n      e.preventDefault();\n      x = e.touches[0].clientX - rect.left;\n      y = e.touches[0].clientY - rect.top;\n    } else {\n      x = e.clientX - rect.left;\n      y = e.clientY - rect.top;\n    }\n    scratchAt(x, y);\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center p-6 relative\">\n      <h2 className=\"text-2xl font-extrabold mb-4 text-center animate-bounce\">\n        🎟️✨ Gratte ton ticket magique ✨🎟️\n      </h2>\n\n      {/* Carte Kanpanya */}\n      <div\n        ref={containerRef}\n        className={`relative w-80 h-44 text-white rounded-2xl shadow-xl p-5 flex items-center justify-center\n          bg-gradient-to-br ${ticketGradient.gradient}\n          ${ticketGradient.isGolden ? \"ring-4 ring-yellow-400 animate-pulse\" : \"\"}`}\n      >\n        <div className=\"text-xl font-bold text-center\">\n          {ticketGradient.isGolden ? \"🎟️ GOLDEN TICKET 🎟️\" : variation}\n        </div>\n        \n        {!revealed && (\n          <canvas\n            ref={canvasRef}\n            className=\"absolute inset-0 rounded-2xl touch-none\"\n            role=\"button\"\n            aria-label=\"Carte à gratter - Grattez pour révéler votre récompense\"\n            tabIndex={0}\n            onMouseMove={handleMove}\n            onMouseDown={(e) => {\n              const rect = e.currentTarget.getBoundingClientRect();\n              handleDown(e.clientX - rect.left, e.clientY - rect.top);\n            }}\n            onMouseUp={handleUp}\n            onTouchMove={handleMove}\n            onTouchStart={(e) => {\n              // Mobile : empêcher le scroll/zoom au début du grattage\n              e.preventDefault();\n              const rect = e.currentTarget.getBoundingClientRect();\n              const touch = e.touches[0];\n              handleDown(touch.clientX - rect.left, touch.clientY - rect.top);\n            }}\n            onTouchEnd={handleUp}\n            onKeyDown={(e) => {\n              // Support clavier pour l'accessibilité\n              if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                const rect = e.currentTarget.getBoundingClientRect();\n                handleDown(rect.width / 2, rect.height / 2);\n              }\n            }}\n          />\n        )}\n      </div>\n\n      {/* Popup avec accessibilité */}\n      {popupVisible && (\n        <div\n          role=\"dialog\"\n          aria-live=\"polite\"\n          aria-labelledby=\"popup-title\"\n          aria-describedby=\"popup-message\"\n          className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\"\n        >\n          <Popup\n            variant={getPopupVariant() as unknown}\n            title={getPopupTitle()}\n            message={getPopupMessage()}\n            onClose={() => setPopupVisible(false)}\n          />\n        </div>\n      )}\n\n      {/* Emoji Rains */}\n      {showSadEmojis && <SadEmojiRain count={35} isWinner={false} />}\n      {showHappyEmojis && <HappyEmojiRain count={35} isWinner={true} />}\n      {showMoneyEmojis && <MoneyEmojiRain count={35} isWinner={true} />}\n\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ScratchFlow.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module './VideoModal'.","line":4,"column":24,"nodeType":"Literal","endLine":4,"endColumn":38}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport VideoModal from \"./VideoModal\";\nimport Quiz from \"./Quiz\";\nimport ScratchCard from \"./ScratchCard\";\nimport ResultModal from \"./ResultModal\";\n\n// Questions de quiz par défaut\nconst defaultQuestions = [\n  {\n    id: 1,\n    question: \"Quels sont les bienfaits d'une alimentation équilibrée ?\",\n    options: [\n      \"Améliore la concentration et l'énergie\",\n      \"Renforce le système immunitaire\", \n      \"Favorise un meilleur sommeil\",\n      \"Toutes les réponses ci-dessus\"\n    ],\n    correct: 3,\n    explanation: \"Une alimentation équilibrée apporte tous ces bienfaits et bien plus encore !\"\n  },\n  {\n    id: 2,\n    question: \"Combien de portions de fruits et légumes recommande-t-on par jour ?\",\n    options: [\n      \"2-3 portions\",\n      \"5 portions\",\n      \"7-8 portions\",\n      \"Autant qu'on veut\"\n    ],\n    correct: 1,\n    explanation: \"L'OMS recommande au minimum 5 portions de fruits et légumes par jour.\"\n  },\n  {\n    id: 3,\n    question: \"Quelle est la meilleure source d'hydratation ?\",\n    options: [\n      \"Les boissons énergisantes\",\n      \"L'eau plate\",\n      \"Les sodas\",\n      \"Le café\"\n    ],\n    correct: 1,\n    explanation: \"L'eau plate reste la meilleure source d'hydratation pour notre corps.\"\n  }\n];\n\n// Récompenses par défaut\nconst defaultRewards = [\n  { type: 'points' as const, amount: 50, label: '+50 points', description: 'Points bonus pour votre participation !' },\n  { type: 'points' as const, amount: 100, label: '+100 points', description: 'Excellent score ! Vous gagnez des points bonus !' },\n  { type: 'coupon' as const, label: 'Réduction 10%', description: 'Coupon de réduction valable chez nos partenaires !' },\n  { type: 'points' as const, amount: 25, label: '+25 points', description: 'Merci d\\'avoir participé au quiz !' }\n];\n\nexport default function ScratchFlow() {\n  const [step, setStep] = useState<\"video\" | \"quiz\" | \"scratch\" | \"result\">(\"video\");\n  const [quizScore, setQuizScore] = useState(0);\n  const [totalQuestions, setTotalQuestions] = useState(0);\n  const [pointsEarned, setPointsEarned] = useState(0);\n  const [reward, setReward] = useState<typeof defaultRewards[0] | null>(null);\n\n  const handleVideoEnd = () => {\n    setStep(\"quiz\");\n  };\n\n  const handleQuizComplete = (score: number, total: number) => {\n    setQuizScore(score);\n    setTotalQuestions(total);\n    \n    // Calculer les points gagnés (base + bonus selon le score)\n    const basePoints = score * 10; // 10 points par bonne réponse\n    const bonusPoints = score === total ? 50 : 0; // Bonus si parfait\n    const totalPoints = basePoints + bonusPoints;\n    \n    setPointsEarned(totalPoints);\n    \n    // Sélectionner une récompense aléatoire\n    const randomReward = defaultRewards[Math.floor(Math.random() * defaultRewards.length)];\n    setReward(randomReward);\n    \n    setStep(\"scratch\");\n  };\n\n  const handleScratchReveal = () => {\n    setStep(\"result\");\n  };\n\n  const handleRestart = () => {\n    setStep(\"video\");\n    setQuizScore(0);\n    setTotalQuestions(0);\n    setPointsEarned(0);\n    setReward(null);\n  };\n\n  return (\n    <>\n      {step === \"video\" && (\n        <VideoModal onEnd={handleVideoEnd} />\n      )}\n      \n      {step === \"quiz\" && (\n        <Quiz \n          questions={defaultQuestions}\n          onComplete={handleQuizComplete}\n          timeLimit={120} // 2 minutes\n        />\n      )}\n      \n      {step === \"scratch\" && (\n        <ScratchCard \n          reward={reward || defaultRewards[0]}\n          onReveal={handleScratchReveal}\n          width={400}\n          height={200}\n          coverText=\"Grattez pour révéler votre récompense !\"\n        />\n      )}\n      \n      {step === \"result\" && (\n        <ResultModal \n          isOpen={true}\n          onClose={handleRestart}\n          score={quizScore}\n          totalQuestions={totalQuestions}\n          pointsEarned={pointsEarned}\n          reward={reward}\n        />\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ScratchHistory.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":6,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'from'. Either exclude it or remove the dependency array. Outer scope values like 'from' aren't valid dependencies because mutating them doesn't re-render the component.","line":13,"column":4,"nodeType":"ArrayExpression","endLine":13,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[385,391],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'select'. Either exclude it or remove the dependency array. Outer scope values like 'select' aren't valid dependencies because mutating them doesn't re-render the component.","line":17,"column":4,"nodeType":"ArrayExpression","endLine":17,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[451,459],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'inner'. Either exclude it or remove the dependency array. Outer scope values like 'inner' aren't valid dependencies because mutating them doesn't re-render the component.","line":21,"column":4,"nodeType":"ArrayExpression","endLine":21,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[517,524],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'order'. Either exclude it or remove the dependency array. Outer scope values like 'order' aren't valid dependencies because mutating them doesn't re-render the component.","line":25,"column":4,"nodeType":"ArrayExpression","endLine":25,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[582,589],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'limit'. Either exclude it or remove the dependency array. Outer scope values like 'limit' aren't valid dependencies because mutating them doesn't re-render the component.","line":29,"column":4,"nodeType":"ArrayExpression","endLine":29,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[647,654],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'error'. Either exclude it or remove the dependency array. Outer scope values like 'error' aren't valid dependencies because mutating them doesn't re-render the component.","line":37,"column":4,"nodeType":"ArrayExpression","endLine":37,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[783,790],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'load'. Either exclude it or remove the dependency array. Outer scope values like 'load' aren't valid dependencies because mutating them doesn't re-render the component.","line":45,"column":4,"nodeType":"ArrayExpression","endLine":45,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[926,932],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\n\nexport default function ScratchHistory() {\n  const supabase = createClientComponentClient();\n  const [logs, setLogs] = useState<unknown[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  \nconst stableFrom = useCallback(() => {\n  from();\n}, [from]);\n\nconst stableSelect = useCallback(() => {\n  select();\n}, [select]);\n\nconst stableInner = useCallback(() => {\n  inner();\n}, [inner]);\n\nconst stableOrder = useCallback(() => {\n  order();\n}, [order]);\n\nconst stableLimit = useCallback(() => {\n  limit();\n}, [limit]);\n\nconst stableSetLogs = useCallback(() => {\n  setLogs();\n}, [setLogs]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetLoading = useCallback(() => {\n  setLoading();\n}, [setLoading]);\n\nconst stableLoad = useCallback(() => {\n  load();\n}, [load]);\n\nuseEffect(() => {\n  stableFrom();\n  stableSelect();\n  stableInner();\n  stableOrder();\n  stableLimit();\n  stableSetLogs();\n  stableError();\n  stableSetLoading();\n  stableLoad();\n}, [stableFrom, stableSelect, stableInner, stableOrder, stableLimit, stableSetLogs, stableError, stableSetLoading, stableLoad]);;\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-6\">\n        <div className=\"text-xl\">Chargement de l&apos;historique...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <h1 className=\"text-2xl font-bold mb-4\">📝 Historique des grattages</h1>\n      \n      {logs.length === 0 ? (\n        <div className=\"text-center text-gray-500 py-8\">\n          <p>Aucun grattage enregistré pour le moment.</p>\n        </div>\n      ) : (\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full text-left border-collapse bg-white rounded-lg shadow\">\n            <thead>\n              <tr className=\"bg-gray-100\">\n                <th className=\"p-3 font-semibold\">Date</th>\n                <th className=\"p-3 font-semibold\">Utilisateur</th>\n                <th className=\"p-3 font-semibold\">Carte</th>\n                <th className=\"p-3 font-semibold\">Sponsor</th>\n                <th className=\"p-3 font-semibold\">Résultat</th>\n                <th className=\"p-3 font-semibold\">Récompense</th>\n              </tr>\n            </thead>\n            <tbody>\n              {logs.map((log) => {\n                const status = log.result?.status;\n                const reward = log.result?.reward;\n                const config = log.scratch_configs;\n                \n                return (\n                  <tr key={log.id} className=\"border-b hover:bg-gray-50\">\n                    <td className=\"p-3 text-sm\">\n                      {new Date(log.created_at).toLocaleString('fr-FR')}\n                    </td>\n                    <td className=\"p-3 text-sm\">\n                      {log.user_id ? (\n                        <span className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs\">\n                          {log.user_id.slice(0, 8)}...\n                        </span>\n                      ) : (\n                        <span className=\"bg-gray-100 text-gray-600 px-2 py-1 rounded text-xs\">\n                          Anonyme\n                        </span>\n                      )}\n                    </td>\n                    <td className=\"p-3 text-sm font-medium\">\n                      {config?.badge || 'Carte inconnue'}\n                    </td>\n                    <td className=\"p-3 text-sm text-gray-600\">\n                      {config?.sponsor_name || 'Sans sponsor'}\n                    </td>\n                    <td className=\"p-3 text-sm\">\n                      {status === 'win' && (\n                        <span className=\"bg-green-100 text-green-800 px-2 py-1 rounded text-xs\">\n                          🥳 Gagné\n                        </span>\n                      )}\n                      {status === 'lucky' && (\n                        <span className=\"bg-purple-100 text-purple-800 px-2 py-1 rounded text-xs\">\n                          🍀 Chance\n                        </span>\n                      )}\n                      {status === 'jackpot' && (\n                        <span className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded text-xs font-bold\">\n                          🏆 JACKPOT\n                        </span>\n                      )}\n                      {status === 'lose' && (\n                        <span className=\"bg-red-100 text-red-800 px-2 py-1 rounded text-xs\">\n                          😢 Perdu\n                        </span>\n                      )}\n                    </td>\n                    <td className=\"p-3 text-sm\">\n                      <span className=\"max-w-xs truncate block\" title={reward}>\n                        {reward || 'Aucune récompense'}\n                      </span>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      )}\n      \n      <div className=\"mt-4 text-sm text-gray-500\">\n        Affichage des 50 derniers grattages\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ScratchResultbutton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'stop' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":48,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useCallback, useState } from \"react\";\nimport { startEmojiRain, emojiBurst } from \"@/lib/emojiRain\";\n\ntype SpeedPreset = \"slow\" | \"normal\" | \"fast\";\n\nexport default function ScratchResultButton() {\n  const [speed, setSpeed] = useState<SpeedPreset>(\"normal\");\n\n  const getSpeedConfig = (preset: SpeedPreset) => {\n    switch (preset) {\n      case \"slow\":\n        return {\n          count: 25,\n          durationRange: [3000, 4500] as [number, number],\n          sizeRange: [35, 50] as [number, number],\n          staggerRange: [0, 800] as [number, number],\n        };\n      case \"fast\":\n        return {\n          count: 35,\n          durationRange: [2000, 3500] as [number, number],\n          sizeRange: [30, 45] as [number, number],\n          staggerRange: [0, 400] as [number, number],\n        };\n      default: // normal\n        return {\n          count: 30,\n          durationRange: [2500, 4000] as [number, number],\n          sizeRange: [32, 48] as [number, number],\n          staggerRange: [0, 600] as [number, number],\n        };\n    }\n  };\n\n  const onWin = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n    const config = getSpeedConfig(speed);\n    \n    // petit burst là où l'utilisateur clique (sensation immédiate)\n    emojiBurst(e.clientX, e.clientY, {\n      emojis: [\"🎉\",\"🪄\",\"🏆\",\"💎\",\"🥳\",\"🌈\"],\n      count: Math.floor(config.count / 3),\n      sizeRange: [config.sizeRange[0] * 0.8, config.sizeRange[1] * 0.8],\n    });\n\n    // pluie globale avec vitesse configurée\n    const stop = startEmojiRain({\n      emojis: [\"🎉\",\"🎊\",\"🎁\",\"⭐\",\"🌟\",\"🥳\",\"🏆\",\"💎\",\"💫\",\"✨\"],\n      count: config.count,\n      durationRange: config.durationRange,\n      sizeRange: config.sizeRange,\n      driftRange: [100, 260],\n      spinRange: [160, 540],\n      staggerRange: config.staggerRange,\n      zIndex: 99999,\n      container: \"viewport\",\n    });\n\n    // Optionnel: stopper manuellement plus tôt si tu affiches un modal\n    // setTimeout(() => stop(), 2000);\n  }, [speed]);\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Contrôle de vitesse */}\n      <div className=\"flex gap-2 justify-center\">\n        <button\n          onClick={() => setSpeed(\"slow\")}\n          className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${\n            speed === \"slow\" \n              ? \"bg-red-500 text-white\" \n              : \"bg-gray-200 text-gray-700 hover:bg-gray-300\"\n          }`}\n        >\n          🐌 Lent\n        </button>\n        <button\n          onClick={() => setSpeed(\"normal\")}\n          className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${\n            speed === \"normal\" \n              ? \"bg-blue-500 text-white\" \n              : \"bg-gray-200 text-gray-700 hover:bg-gray-300\"\n          }`}\n        >\n          ⚡ Normal\n        </button>\n        <button\n          onClick={() => setSpeed(\"fast\")}\n          className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${\n            speed === \"fast\" \n              ? \"bg-green-500 text-white\" \n              : \"bg-gray-200 text-gray-700 hover:bg-gray-300\"\n          }`}\n        >\n          🚀 Rapide\n        </button>\n      </div>\n\n      {/* Bouton principal */}\n      <button\n        onClick={onWin}\n        className=\"px-6 py-3 rounded-2xl bg-black text-white font-semibold hover:opacity-90 active:scale-95 transition\"\n      >\n        Révéler / Gagné ✨\n      </button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ScratchReward.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ScratchRewardSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SearchBar.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?","line":89,"column":3,"nodeType":"Identifier","endLine":89,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":89,"column":3,"nodeType":"Identifier","endLine":89,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'useEffect'. Either exclude it or remove the dependency array. Outer scope values like 'useEffect' aren't valid dependencies because mutating them doesn't re-render the component.","line":90,"column":4,"nodeType":"ArrayExpression","endLine":90,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5869,5880],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'contains'. Either exclude it or remove the dependency array. Outer scope values like 'contains' aren't valid dependencies because mutating them doesn't re-render the component.","line":94,"column":4,"nodeType":"ArrayExpression","endLine":94,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5944,5954],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addEventListener'. Either exclude it or remove the dependency array. Outer scope values like 'addEventListener' aren't valid dependencies because mutating them doesn't re-render the component.","line":102,"column":4,"nodeType":"ArrayExpression","endLine":102,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[6111,6129],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'removeEventListener'. Either exclude it or remove the dependency array. Outer scope values like 'removeEventListener' aren't valid dependencies because mutating them doesn't re-render the component.","line":106,"column":4,"nodeType":"ArrayExpression","endLine":106,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[6215,6236],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a duplicate dependency: 'stableSetIsOpen'. Either omit it or remove the dependency array.","line":116,"column":4,"nodeType":"ArrayExpression","endLine":116,"endColumn":138,"suggestions":[{"desc":"Update the dependencies array to be: [stableSetQuery, stableSetIsOpen, stableUseEffect, stableContains, stableAddEventListener, stableRemoveEventListener]","fix":{"range":[6423,6557],"text":"[stableSetQuery, stableSetIsOpen, stableUseEffect, stableContains, stableAddEventListener, stableRemoveEventListener]"}}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":348,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[15716,15744],"text":"Aucun résultat trouvé pour &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[15716,15744],"text":"Aucun résultat trouvé pour &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[15716,15744],"text":"Aucun résultat trouvé pour &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[15716,15744],"text":"Aucun résultat trouvé pour &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":348,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[15751,15752],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[15751,15752],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[15751,15752],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[15751,15752],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useRef } from 'react';\n\ninterface SearchResult {\n  id: string;\n  name: string;\n  type: 'ville' | 'rue' | 'quartier' | 'commune';\n  coordinates: [number, number];\n  address?: string;\n  population?: number;\n  area?: number;\n}\n\ninterface SearchBarProps {\n  onLocationSelect: (result: SearchResult) => void;\n  onMapCenter?: (coordinates: [number, number]) => void;\n  clickedLocation?: unknown;\n  onClearClickedLocation?: () => void;\n}\n\n// Données réelles de la Martinique\nconst MARTINIQUE_DATA: SearchResult[] = [\n  // Communes principales\n  { id: 'fort-de-france', name: 'Fort-de-France', type: 'commune', coordinates: [-61.0742, 14.6036], population: 78000, area: 44.21 },\n  { id: 'le-lamentin', name: 'Le Lamentin', type: 'commune', coordinates: [-61.0014, 14.6089], population: 40000, area: 62.32 },\n  { id: 'schoelcher', name: 'Schoelcher', type: 'commune', coordinates: [-61.0889, 14.6167], population: 21000, area: 21.17 },\n  { id: 'saint-pierre', name: 'Saint-Pierre', type: 'commune', coordinates: [-61.1750, 14.7417], population: 4000, area: 38.72 },\n  { id: 'saint-marie', name: 'Sainte-Marie', type: 'commune', coordinates: [-60.9917, 14.7917], population: 15000, area: 44.55 },\n  { id: 'le-marin', name: 'Le Marin', type: 'commune', coordinates: [-60.8667, 14.4667], population: 8000, area: 31.54 },\n  { id: 'le-francois', name: 'Le François', type: 'commune', coordinates: [-60.9167, 14.6167], population: 19000, area: 53.93 },\n  { id: 'la-trinite', name: 'La Trinité', type: 'commune', coordinates: [-60.9667, 14.7333], population: 13000, area: 45.77 },\n  { id: 'saint-joseph', name: 'Saint-Joseph', type: 'commune', coordinates: [-61.0333, 14.6667], population: 16000, area: 43.29 },\n  { id: 'riviere-pilote', name: 'Rivière-Pilote', type: 'commune', coordinates: [-60.9000, 14.5167], population: 12000, area: 35.78 },\n  \n  // Quartiers de Fort-de-France\n  { id: 'centre-ville-fdf', name: 'Centre-ville Fort-de-France', type: 'quartier', coordinates: [-61.0742, 14.6036], address: 'Fort-de-France' },\n  { id: 'terres-sainville', name: 'Terres-Sainville', type: 'quartier', coordinates: [-61.0700, 14.6100], address: 'Fort-de-France' },\n  { id: 'dillon', name: 'Dillon', type: 'quartier', coordinates: [-61.0800, 14.6000], address: 'Fort-de-France' },\n  { id: 'volga-plage', name: 'Volga-Plage', type: 'quartier', coordinates: [-61.0600, 14.6200], address: 'Fort-de-France' },\n  { id: 'pointe-des-sables', name: 'Pointe des Sables', type: 'quartier', coordinates: [-61.0500, 14.6300], address: 'Fort-de-France' },\n  \n  // Rues principales de Fort-de-France\n  { id: 'rue-victor-hugo', name: 'Rue Victor Hugo', type: 'rue', coordinates: [-61.0742, 14.6036], address: 'Fort-de-France' },\n  { id: 'rue-de-la-republique', name: 'Rue de la République', type: 'rue', coordinates: [-61.0750, 14.6040], address: 'Fort-de-France' },\n  { id: 'rue-schoelcher', name: 'Rue Schoelcher', type: 'rue', coordinates: [-61.0730, 14.6050], address: 'Fort-de-France' },\n  { id: 'rue-clement', name: 'Rue Clément', type: 'rue', coordinates: [-61.0720, 14.6020], address: 'Fort-de-France' },\n  { id: 'rue-perrinon', name: 'Rue Perrinon', type: 'rue', coordinates: [-61.0710, 14.6010], address: 'Fort-de-France' },\n  { id: 'rue-ernest-deproge', name: 'Rue Ernest Deproge', type: 'rue', coordinates: [-61.0700, 14.6000], address: 'Fort-de-France' },\n  { id: 'rue-bougenot', name: 'Rue Bougenot', type: 'rue', coordinates: [-61.0690, 14.5990], address: 'Fort-de-France' },\n  { id: 'rue-martin-luther-king', name: 'Rue Martin Luther King', type: 'rue', coordinates: [-61.0680, 14.5980], address: 'Fort-de-France' },\n  \n  // Rues du Lamentin\n  { id: 'rue-de-la-paix-lamentin', name: 'Rue de la Paix', type: 'rue', coordinates: [-61.0014, 14.6089], address: 'Le Lamentin' },\n  { id: 'rue-de-la-liberte-lamentin', name: 'Rue de la Liberté', type: 'rue', coordinates: [-61.0020, 14.6090], address: 'Le Lamentin' },\n  { id: 'rue-du-general-de-gaulle', name: 'Rue du Général de Gaulle', type: 'rue', coordinates: [-61.0000, 14.6100], address: 'Le Lamentin' },\n  \n  // Zones commerciales\n  { id: 'centre-commercial-cluny', name: 'Centre Commercial Cluny', type: 'quartier', coordinates: [-61.0014, 14.6089], address: 'Le Lamentin' },\n  { id: 'zone-industrielle-dillon', name: 'Zone Industrielle Dillon', type: 'quartier', coordinates: [-61.0800, 14.6000], address: 'Fort-de-France' },\n  { id: 'centre-ville-lamentin', name: 'Centre-ville Le Lamentin', type: 'quartier', coordinates: [-61.0014, 14.6089], address: 'Le Lamentin' },\n  \n  // Plages et sites touristiques\n  { id: 'anse-mitan', name: 'Anse Mitan', type: 'quartier', coordinates: [-61.0500, 14.4800], address: 'Les Trois-Îlets' },\n  { id: 'anse-darlet', name: 'Anse d\\'Arlet', type: 'quartier', coordinates: [-61.0833, 14.4833], address: 'Anse d\\'Arlet' },\n  { id: 'saint-anne', name: 'Sainte-Anne', type: 'commune', coordinates: [-60.8833, 14.4333], population: 5000, area: 38.42 },\n  { id: 'les-trois-ilets', name: 'Les Trois-Îlets', type: 'commune', coordinates: [-61.0333, 14.5333], population: 7000, area: 28.60 },\n];\n\nexport default function SearchBar({ onLocationSelect, onMapCenter, clickedLocation, onClearClickedLocation }: SearchBarProps) {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<SearchResult[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedType, setSelectedType] = useState<'all' | 'ville' | 'rue' | 'quartier' | 'commune'>('all');\n  const searchRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Mettre à jour la query quand on clique sur la carte\n  \nconst stableSetQuery = useCallback(() => {\n  setQuery();\n}, [setQuery]);\n\nconst stableSetIsOpen = useCallback(() => {\n  setIsOpen();\n}, [setIsOpen]);\n\nconst stableUseEffect = useCallback(() => {\n  useEffect();\n}, [useEffect]);\n\nconst stableContains = useCallback(() => {\n  contains();\n}, [contains]);\n\nconst stableSetIsOpen = useCallback(() => {\n  setIsOpen();\n}, [setIsOpen]);\n\nconst stableAddEventListener = useCallback(() => {\n  addEventListener();\n}, [addEventListener]);\n\nconst stableRemoveEventListener = useCallback(() => {\n  removeEventListener();\n}, [removeEventListener]);\n\nuseEffect(() => {\n  stableSetQuery();\n  stableSetIsOpen();\n  stableUseEffect();\n  stableContains();\n  stableSetIsOpen();\n  stableAddEventListener();\n  stableRemoveEventListener();\n}, [stableSetQuery, stableSetIsOpen, stableUseEffect, stableContains, stableSetIsOpen, stableAddEventListener, stableRemoveEventListener]);;\n\n  // Recherche en temps réel avec API\n  useEffect(() => {\n    if (query.length < 2) {\n      setResults([]);\n      setIsOpen(false);\n      return;\n    }\n\n    // Recherche locale d'abord (plus rapide)\n    const localFiltered = MARTINIQUE_DATA.filter(item => {\n      const matchesQuery = item.name.toLowerCase().includes(query.toLowerCase()) ||\n                          (item.address && item.address.toLowerCase().includes(query.toLowerCase()));\n      \n      const matchesType = selectedType === 'all' || item.type === selectedType;\n      \n      return matchesQuery && matchesType;\n    });\n\n    // Toujours afficher les résultats locaux s'il y en a\n    if (localFiltered.length > 0) {\n      setResults(localFiltered.slice(0, 5));\n      setIsOpen(true);\n    }\n\n    // Recherche API Mapbox Geocoding en arrière-plan\n    const searchAPI = async () => {\n      try {\n        // Utiliser l'API Mapbox Geocoding (plus intelligente)\n        const response = await fetch(`/api/geocoding?q=${encodeURIComponent(query)}&limit=5`);\n        const data = await response.json();\n        \n        if (data.success && data.results.length > 0) {\n          // Combiner résultats locaux et Mapbox\n          const combinedResults = [...localFiltered, ...data.results];\n          const uniqueResults = combinedResults.filter((item, index, self) => \n            index === self.findIndex(t => t.id === item.id)\n          );\n          \n          // Trier par score de pertinence\n          const sortedResults = uniqueResults.sort((a, b) => {\n            const scoreA = a.score || a.relevance || 0;\n            const scoreB = b.score || b.relevance || 0;\n            return scoreB - scoreA;\n          });\n          \n          setResults(sortedResults.slice(0, 10));\n          setIsOpen(true);\n        } else if (localFiltered.length === 0) {\n          // Si pas de résultats locaux et pas de résultats Mapbox, afficher message\n          setResults([]);\n          setIsOpen(true);\n        }\n      } catch (error) {\n        console.error('Erreur recherche API:', error);\n        // En cas d'erreur, garder les résultats locaux\n        setResults(localFiltered.slice(0, 5));\n        setIsOpen(true);\n      }\n    };\n\n    // Délai pour éviter trop de requêtes\n    const timeoutId = setTimeout(searchAPI, 300);\n    return () => clearTimeout(timeoutId);\n  }, [query, selectedType]);\n\n  const handleSelect = (result: SearchResult) => {\n    setQuery(result.name);\n    setIsOpen(false);\n    onLocationSelect(result);\n    if (onMapCenter) {\n      onMapCenter(result.coordinates);\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'commune': return '🏛️';\n      case 'quartier': return '🏘️';\n      case 'rue': return '🛣️';\n      case 'ville': return '🏙️';\n      case 'place': return '🏛️';\n      case 'locality': return '🏘️';\n      case 'neighborhood': return '🏘️';\n      case 'address': return '🛣️';\n      case 'poi': return '📍';\n      default: return '📍';\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'commune': \n      case 'place': return 'text-blue-600 bg-blue-50';\n      case 'quartier': \n      case 'locality':\n      case 'neighborhood': return 'text-green-600 bg-green-50';\n      case 'rue': \n      case 'address': return 'text-orange-600 bg-orange-50';\n      case 'ville': return 'text-purple-600 bg-purple-50';\n      case 'poi': return 'text-pink-600 bg-pink-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case 'commune': \n      case 'place': return 'Commune';\n      case 'quartier': \n      case 'locality':\n      case 'neighborhood': return 'Quartier';\n      case 'rue': \n      case 'address': return 'Rue';\n      case 'ville': return 'Ville';\n      case 'poi': return 'Lieu';\n      default: return 'Lieu';\n    }\n  };\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto\" ref={searchRef}>\n      {/* Barre de recherche principale */}\n      <div className=\"relative\">\n        <div className=\"flex items-center bg-white rounded-lg shadow-lg border border-gray-200 overflow-hidden\">\n          {/* Icône de recherche */}\n          <div className=\"pl-4 pr-2\">\n            <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n            </svg>\n          </div>\n          \n          {/* Input de recherche */}\n          <input\n            ref={inputRef}\n            type=\"text\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            onFocus={() => query.length >= 2 && setIsOpen(true)}\n            placeholder=\"Rechercher une ville, rue, quartier...\"\n            className=\"flex-1 px-3 py-4 text-gray-900 placeholder-gray-500 focus:outline-none\"\n          />\n          \n          {/* Filtres de type */}\n          <div className=\"flex items-center border-l border-gray-200\">\n            <select\n              value={selectedType}\n              onChange={(e) => setSelectedType(e.target.value as unknown)}\n              className=\"px-3 py-4 text-sm text-gray-600 bg-transparent border-none focus:outline-none cursor-pointer\"\n            >\n              <option value=\"all\">Tout</option>\n              <option value=\"commune\">Communes</option>\n              <option value=\"quartier\">Quartiers</option>\n              <option value=\"rue\">Rues</option>\n            </select>\n          </div>\n          \n          {/* Bouton de recherche */}\n          <button\n            onClick={() => query.length >= 2 && setIsOpen(true)}\n            className=\"px-4 py-4 bg-blue-600 text-white hover:bg-blue-700 transition-colors\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* Liste des résultats */}\n        {isOpen && results.length > 0 && (\n          <div className=\"absolute z-50 w-full mt-1 bg-white rounded-lg shadow-lg border border-gray-200 max-h-80 overflow-y-auto\">\n            {results.map((result) => (\n              <div\n                key={result.id}\n                onClick={() => handleSelect(result)}\n                className=\"flex items-center p-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0\"\n              >\n                <div className=\"flex-shrink-0 mr-3\">\n                  <span className=\"text-lg\">{getTypeIcon(result.type)}</span>\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"font-medium text-gray-900 truncate\">\n                      {result.name}\n                    </span>\n                    <span className={`px-2 py-1 text-xs rounded-full ${getTypeColor(result.type)}`}>\n                      {getTypeLabel(result.type)}\n                    </span>\n                    {result.score && (\n                      <span className=\"text-xs text-gray-400\">\n                        {Math.round(result.score)}%\n                      </span>\n                    )}\n                  </div>\n                  \n                  {/* Adresse simplifiée */}\n                  {result.address && (\n                    <div className=\"text-sm text-gray-500 truncate\">\n                      {result.is_martinique ? (\n                        <span className=\"text-green-600\">🏝️ {result.address}</span>\n                      ) : (\n                        <span className=\"text-blue-600\">🌍 {result.address}</span>\n                      )}\n                    </div>\n                  )}\n                  \n                  {result.population && (\n                    <p className=\"text-xs text-gray-400\">\n                      {result.population.toLocaleString()} habitants\n                    </p>\n                  )}\n                </div>\n                \n                <div className=\"flex-shrink-0 ml-2\">\n                  <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                  </svg>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Message si aucun résultat */}\n        {isOpen && query.length >= 2 && results.length === 0 && (\n          <div className=\"absolute z-50 w-full mt-1 bg-white rounded-lg shadow-lg border border-gray-200 p-4\">\n            <div className=\"text-center text-gray-500\">\n              <svg className=\"w-8 h-8 mx-auto mb-2 text-gray-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.29-1.009-5.824-2.709\" />\n              </svg>\n              <p>Aucun résultat trouvé pour \"{query}\"</p>\n              <p className=\"text-sm text-gray-400 mt-1\">Essayez avec un autre terme</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Adresse cliquée sur la carte */}\n      {clickedLocation && (\n        <div className=\"mt-3 p-3 bg-green-50 border border-green-200 rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-lg\">📍</span>\n              <div>\n                <div className=\"font-medium text-green-800\">{clickedLocation.name}</div>\n                <div className=\"text-sm text-green-600\">{clickedLocation.address}</div>\n              </div>\n            </div>\n            {onClearClickedLocation && (\n              <button\n                onClick={onClearClickedLocation}\n                className=\"text-green-600 hover:text-green-800 text-sm font-medium px-2 py-1 rounded hover:bg-green-100 transition\"\n              >\n                ✕\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Statistiques de recherche */}\n      {query.length >= 2 && (\n        <div className=\"mt-2 text-sm text-gray-500 text-center\">\n          {results.length > 0 ? (\n            <span>{results.length} résultat{results.length > 1 ? 's' : ''} trouvé{results.length > 1 ? 's' : ''}</span>\n          ) : (\n            <span>Recherche en cours...</span>\n          )}\n        </div>\n      )}\n\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SearchMulti.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SearchValidate.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'getItem'. Either exclude it or remove the dependency array. Outer scope values like 'getItem' aren't valid dependencies because mutating them doesn't re-render the component.","line":81,"column":4,"nodeType":"ArrayExpression","endLine":81,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2402,2411],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'parse'. Either exclude it or remove the dependency array. Outer scope values like 'parse' aren't valid dependencies because mutating them doesn't re-render the component.","line":85,"column":4,"nodeType":"ArrayExpression","endLine":85,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2469,2476],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'getItem'. Either exclude it or remove the dependency array. Outer scope values like 'getItem' aren't valid dependencies because mutating them doesn't re-render the component.","line":102,"column":4,"nodeType":"ArrayExpression","endLine":102,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2890,2899],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'parse'. Either exclude it or remove the dependency array. Outer scope values like 'parse' aren't valid dependencies because mutating them doesn't re-render the component.","line":110,"column":4,"nodeType":"ArrayExpression","endLine":110,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[3031,3038],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X, ChevronsUpDown, Check, Loader2 } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from \"@/components/ui/popover\";\nimport {\n  Command,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n} from \"@/components/ui/command\";\n\nexport type AreaOption = {\n  value: string;\n  label: string;\n  type: \"ville\" | \"quartier\" | \"rue\";\n  parent?: string;\n  coordinates?: [number, number];\n};\n\nconst typeIcons: Record<AreaOption[\"type\"], string> = {\n  ville: \"🏛️\",\n  quartier: \"🏘️\",\n  rue: \"🛣️\",\n};\n\n// 📌 Options locales\nconst localOptions: AreaOption[] = [\n  { value: \"fort-de-france\", label: \"Fort-de-France\", type: \"ville\" },\n  { value: \"schoelcher\", label: \"Schoelcher\", type: \"ville\" },\n  { value: \"rue-victor-hugo\", label: \"Rue Victor Hugo\", type: \"rue\", parent: \"Fort-de-France\" },\n  { value: \"centre-ville-fdf\", label: \"Centre-ville\", type: \"quartier\", parent: \"Fort-de-France\" },\n  { value: \"pointe-a-pitre\", label: \"Pointe-à-Pitre\", type: \"ville\" },\n  { value: \"rue-frebault\", label: \"Rue Frébault\", type: \"rue\", parent: \"Pointe-à-Pitre\" },\n  { value: \"paris\", label: \"Paris\", type: \"ville\" },\n  { value: \"lyon\", label: \"Lyon\", type: \"ville\" },\n  { value: \"marseille\", label: \"Marseille\", type: \"ville\" },\n];\n\ninterface SearchValidateProps {\n  onValidate: (areas: AreaOption[]) => void;\n  onSave?: (areas: AreaOption[]) => void;\n}\n\nexport default function SearchValidate({\n  onValidate,\n  onSave,\n}: SearchValidateProps) {\n  const [selected, setSelected] = useState<AreaOption[]>([]);\n  const [saved, setSaved] = useState<AreaOption[]>([]);\n  const [open, setOpen] = useState(false);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState<AreaOption[]>(localOptions);\n  const [loading, setLoading] = useState(false);\n\n  // ✅ Cache mémoire + localStorage\n  const cache = useRef<Record<string, AreaOption[]>>({});\n\n  // Charger cache depuis localStorage au montage\n  \nconst stableGetItem = useCallback(() => {\n  getItem();\n}, [getItem]);\n\nconst stableParse = useCallback(() => {\n  parse();\n}, [parse]);\n\nuseEffect(() => {\n  stableGetItem();\n  stableParse();\n}, [stableGetItem, stableParse]);;\n\n  // Sauvegarder cache dès qu'il est modifié\n  const updateCache = (key: string, value: AreaOption[]) => {\n    cache.current[key] = value;\n    localStorage.setItem(\"searchCache\", JSON.stringify(cache.current));\n  };\n\n  // ✅ Persistance des zones enregistrées\n  \nconst stableGetItem = useCallback(() => {\n  getItem();\n}, [getItem]);\n\nconst stableSetSaved = useCallback(() => {\n  setSaved();\n}, [setSaved]);\n\nconst stableParse = useCallback(() => {\n  parse();\n}, [parse]);\n\nuseEffect(() => {\n  stableGetItem();\n  stableSetSaved();\n  stableParse();\n}, [stableGetItem, stableSetSaved, stableParse]);;\n\n  useEffect(() => {\n    localStorage.setItem(\"savedAreas\", JSON.stringify(saved));\n  }, [saved]);\n\n  // ✅ Recherche hybride (locale + Mapbox avec cache persistant)\n  useEffect(() => {\n    if (!query) {\n      setResults(localOptions);\n      return;\n    }\n\n    const timer = setTimeout(async () => {\n      // Vérifie si déjà en cache\n      if (cache.current[query]) {\n        setResults(cache.current[query]);\n        return;\n      }\n\n      // 1️⃣ Recherche locale\n      const localMatches = localOptions.filter(\n        (o) =>\n          o.label.toLowerCase().includes(query.toLowerCase()) ||\n          o.type.toLowerCase().includes(query.toLowerCase()) ||\n          (o.parent && o.parent.toLowerCase().includes(query.toLowerCase()))\n      );\n\n      if (localMatches.length > 0) {\n        setResults(localMatches);\n        updateCache(query, localMatches); // 🔥 enregistre en cache persistant\n        return;\n      }\n\n      // 2️⃣ Sinon → fallback Mapbox\n      try {\n        setLoading(true);\n        const res = await fetch(\n          `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(\n            query\n          )}.json?access_token=${process.env.NEXT_PUBLIC_MAPBOX_TOKEN}&limit=5&language=fr&country=FR,GP,MQ`\n        );\n        const data = await res.json();\n\n        const mapboxResults: AreaOption[] = data.features.map((f: unknown) => {\n          const placeType = f.place_type[0];\n          let type: AreaOption[\"type\"] = \"ville\";\n          if (placeType === \"neighborhood\") type = \"quartier\";\n          if (placeType === \"address\" || placeType === \"street\") type = \"rue\";\n\n          return {\n            value: f.id,\n            label: f.text_fr || f.text,\n            type,\n            parent: f.context?.[0]?.text_fr || f.place_name?.split(\",\")[1],\n            coordinates: f.center,\n          };\n        });\n\n        setResults(mapboxResults);\n        updateCache(query, mapboxResults); // 🔥 enregistre en cache persistant\n      } catch (err) {\n        console.error(\"Erreur Mapbox:\", err);\n        setResults([]);\n      } finally {\n        setLoading(false);\n      }\n    }, 400); // debounce\n\n    return () => clearTimeout(timer);\n  }, [query]);\n\n  const toggleSelection = (option: AreaOption) => {\n    if (selected.find((s) => s.value === option.value)) {\n      setSelected((prev) => prev.filter((s) => s.value !== option.value));\n    } else {\n      setSelected((prev) => [...prev, option]);\n    }\n  };\n\n  const handleValidate = () => {\n    if (selected.length > 0) onValidate(selected);\n  };\n\n  const handleSave = () => {\n    if (selected.length > 0) {\n      const newSaved = [...saved];\n      selected.forEach((s) => {\n        if (!newSaved.find((item) => item.value === s.value)) newSaved.push(s);\n      });\n      setSaved(newSaved);\n      if (onSave) onSave(selected);\n    }\n  };\n\n  const handleRemoveSaved = (value: string) => {\n    setSaved((prev) => prev.filter((s) => s.value !== value));\n  };\n\n  const handleClearAll = () => {\n    setSaved([]);\n    setShowConfirmModal(false);\n  };\n\n  return (\n    <div className=\"flex flex-col gap-4 w-full max-w-xl\">\n      {/* Combobox ShadCN */}\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className=\"w-full justify-between\"\n          >\n            {selected.length > 0\n              ? `${selected.length} zone(s) sélectionnée(s)`\n              : \"Rechercher une ville, un quartier ou une rue...\"}\n            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-full p-0\">\n          <Command shouldFilter={false}>\n            <CommandInput\n              placeholder=\"Tapez pour rechercher...\"\n              value={query}\n              onValueChange={setQuery}\n            />\n            <CommandList>\n              {loading && (\n                <div className=\"flex items-center justify-center py-3 text-sm text-gray-500\">\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Recherche en cours...\n                </div>\n              )}\n              <CommandEmpty>Aucun résultat trouvé.</CommandEmpty>\n              <CommandGroup heading=\"Résultats\">\n                {results.map((option) => (\n                  <CommandItem\n                    key={option.value}\n                    value={option.label}\n                    onSelect={() => toggleSelection(option)}\n                  >\n                    <span className=\"mr-2\">{typeIcons[option.type]}</span>\n                    {option.label}\n                    {option.parent && (\n                      <span className=\"ml-1 text-xs text-gray-500\">\n                        ({option.parent})\n                      </span>\n                    )}\n                    {selected.find((s) => s.value === option.value) && (\n                      <Check className=\"ml-auto h-4 w-4 text-green-600\" />\n                    )}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n\n      {/* Actions */}\n      <div className=\"flex gap-2\">\n        <Button\n          onClick={handleValidate}\n          disabled={selected.length === 0}\n          variant={selected.length > 0 ? \"default\" : \"secondary\"}\n        >\n          Valider ({selected.length})\n        </Button>\n        <Button\n          onClick={handleSave}\n          disabled={selected.length === 0}\n          variant={selected.length > 0 ? \"outline\" : \"secondary\"}\n        >\n          Enregistrer\n        </Button>\n      </div>\n\n      {/* Badges sélectionnés */}\n      {selected.length > 0 && (\n        <div className=\"flex gap-2 flex-wrap mt-2\">\n          {selected.map((s) => (\n            <Badge key={s.value} variant=\"secondary\" className=\"flex items-center gap-1\">\n              {typeIcons[s.type]} {s.label}\n              {s.parent && <span className=\"ml-1 text-xs\">({s.parent})</span>}\n            </Badge>\n          ))}\n        </div>\n      )}\n\n      {/* Zones enregistrées */}\n      {saved.length > 0 && (\n        <div className=\"mt-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-sm font-semibold text-gray-700\">\n              Zones enregistrées :\n            </h3>\n            {/* Dialog ShadCN */}\n            <Dialog open={showConfirmModal} onOpenChange={setShowConfirmModal}>\n              <DialogTrigger asChild>\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  disabled={saved.length <= 1}\n                >\n                  ❌ Tout effacer\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Confirmation</DialogTitle>\n                  <DialogDescription>\n                    Êtes-vous sûr de vouloir{\" \"}\n                    <span className=\"font-semibold text-red-600\">\n                      tout effacer\n                    </span>{\" \"}\n                    ? Cette action est irréversible.\n                  </DialogDescription>\n                </DialogHeader>\n                <DialogFooter className=\"flex justify-end gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setShowConfirmModal(false)}\n                  >\n                    Annuler\n                  </Button>\n                  <Button variant=\"destructive\" onClick={handleClearAll}>\n                    Oui, tout effacer\n                  </Button>\n                </DialogFooter>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Badges enregistrés */}\n          <div className=\"flex gap-2 flex-wrap\">\n            {saved.map((s) => (\n              <Badge\n                key={s.value}\n                variant=\"outline\"\n                className=\"flex items-center gap-1 px-2 py-1\"\n              >\n                {typeIcons[s.type]} {s.label}\n                {s.parent && <span className=\"ml-1 text-xs\">({s.parent})</span>}\n                <button\n                  onClick={() => handleRemoveSaved(s.value)}\n                  className=\"ml-1 rounded-full hover:bg-red-100 p-1\"\n                  aria-label={`Supprimer ${s.label}`}\n                  type=\"button\"\n                >\n                  <X className=\"h-3 w-3 text-red-600\" />\n                </button>\n              </Badge>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SimpleDrawingMap.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Expression or comma expected.","line":29,"column":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\n\nexport default function SimpleDrawingMap() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<unknown>(null);\n  const draw = useRef<unknown>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [drawnPolygons, setDrawnPolygons] = useState<unknown[]>([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n\n  \nconst stableIncludes = useCallback(() => {\n  includes();\n}, [includes]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableAll = useCallback(() => {\n  all();\n}, [all]);\n\nconst stableImport = useCallback(() => {\n  import();\n}, [import]);\n\nconst stableImport = useCallback(() => {\n  import();\n}, [import]);\n\nconst stableThen = useCallback(() => {\n  then();\n}, [then]);\n\nconst stableMap = useCallback(() => {\n  Map();\n}, [Map]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableNavigationControl = useCallback(() => {\n  NavigationControl();\n}, [NavigationControl]);\n\nconst stableDefault = useCallback(() => {\n  default();\n}, [default]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stablePrompt = useCallback(() => {\n  prompt();\n}, [prompt]);\n\nconst stableSetDrawnPolygons = useCallback(() => {\n  setDrawnPolygons();\n}, [setDrawnPolygons]);\n\nconst stableNow = useCallback(() => {\n  now();\n}, [now]);\n\nconst stableSetIsDrawing = useCallback(() => {\n  setIsDrawing();\n}, [setIsDrawing]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetDrawnPolygons = useCallback(() => {\n  setDrawnPolygons();\n}, [setDrawnPolygons]);\n\nconst stableSlice = useCallback(() => {\n  slice();\n}, [slice]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetIsDrawing = useCallback(() => {\n  setIsDrawing();\n}, [setIsDrawing]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableSetIsLoaded = useCallback(() => {\n  setIsLoaded();\n}, [setIsLoaded]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableCatch = useCallback(() => {\n  catch();\n}, [catch]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableRemove = useCallback(() => {\n  remove();\n}, [remove]);\n\nconst stableWarn = useCallback(() => {\n  warn();\n}, [warn]);\n\nuseEffect(() => {\n  stableIncludes();\n  stableSetError();\n  stableAll();\n  stableImport();\n  stableImport();\n  stableThen();\n  stableMap();\n  stableAddControl();\n  stableNavigationControl();\n  stableDefault();\n  stableAddControl();\n  stableOn();\n  stableLog();\n  stablePrompt();\n  stableSetDrawnPolygons();\n  stableNow();\n  stableSetIsDrawing();\n  stableOn();\n  stableLog();\n  stableSetDrawnPolygons();\n  stableSlice();\n  stableOn();\n  stableLog();\n  stableSetIsDrawing();\n  stableOn();\n  stableSetIsLoaded();\n  stableLog();\n  stableOn();\n  stableError();\n  stableSetError();\n  stableError();\n  stableSetError();\n  stableCatch();\n  stableError();\n  stableSetError();\n  stableRemove();\n  stableWarn();\n}, [stableIncludes, stableSetError, stableAll, stableImport, stableImport, stableThen, stableMap, stableAddControl, stableNavigationControl, stableDefault, stableAddControl, stableOn, stableLog, stablePrompt, stableSetDrawnPolygons, stableNow, stableSetIsDrawing, stableOn, stableLog, stableSetDrawnPolygons, stableSlice, stableOn, stableLog, stableSetIsDrawing, stableOn, stableSetIsLoaded, stableLog, stableOn, stableError, stableSetError, stableError, stableSetError, stableCatch, stableError, stableSetError, stableRemove, stableWarn]);;\n\n  const startDrawing = () => {\n    console.log('Démarrage du dessin...');\n    if (draw.current && map.current) {\n      try {\n        console.log('Changement de mode vers draw_polygon');\n        draw.current.changeMode('draw_polygon');\n        setIsDrawing(true);\n      } catch (err) {\n        console.error('Erreur lors du démarrage du dessin:', err);\n      }\n    } else {\n      console.error('draw.current ou map.current est null');\n    }\n  };\n\n  const clearAll = () => {\n    console.log('Suppression de tous les polygones...');\n    if (draw.current && map.current) {\n      try {\n        draw.current.deleteAll();\n        setDrawnPolygons([]);\n      } catch (err) {\n        console.error('Erreur lors de la suppression:', err);\n      }\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"h-96 bg-gradient-to-br from-red-50 to-orange-50 rounded-lg border border-red-200 flex items-center justify-center\">\n        <div className=\"text-center p-6\">\n          <div className=\"text-4xl mb-3\">❌</div>\n          <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Erreur de carte</h3>\n          <p className=\"text-red-600 text-sm\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Instructions claires */}\n      <div className=\"bg-gradient-to-r from-green-50 to-blue-50 p-4 rounded-lg border border-green-200\">\n        <h3 className=\"font-semibold text-green-800 mb-3 flex items-center\">\n          🎨 Mode Dessin - Instructions\n        </h3>\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"font-medium text-green-700 mb-2\">✅ Méthode recommandée</h4>\n            <ul className=\"text-sm text-green-600 space-y-1\">\n              <li>• Cliquez sur &quot;🎨 Dessiner une zone&quot;</li>\n              <li>• Cliquez sur la carte pour créer des points</li>\n              <li>• Double-cliquez pour fermer le polygone</li>\n              <li>• Donnez un nom à votre quartier</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium text-green-700 mb-2\">🔧 Méthode alternative</h4>\n            <ul className=\"text-sm text-green-600 space-y-1\">\n              <li>• Utilisez les contrôles de la carte</li>\n              <li>• Cherchez l&apos;icône polygone en haut à droite</li>\n              <li>• Même fonctionnalité</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Boutons de contrôle */}\n      <div className=\"flex gap-3 flex-wrap\">\n        <button\n          onClick={startDrawing}\n          disabled={!isLoaded}\n          className={`px-4 py-2 rounded-lg font-medium transition ${\n            isDrawing\n              ? 'bg-orange-500 text-white animate-pulse'\n              : isLoaded\n              ? 'bg-green-600 text-white hover:bg-green-700'\n              : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n          }`}\n        >\n          {isDrawing ? '🎨 Dessin en cours...' : '🎨 Dessiner une zone'}\n        </button>\n        \n        <button\n          onClick={clearAll}\n          disabled={!isLoaded || drawnPolygons.length === 0}\n          className=\"px-4 py-2 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 disabled:bg-gray-300 disabled:text-gray-500 disabled:cursor-not-allowed transition\"\n        >\n          🗑️ Effacer tout\n        </button>\n\n        <div className=\"px-4 py-2 bg-gray-100 rounded-lg text-sm text-gray-600 flex items-center\">\n          📍 Zones créées: {drawnPolygons.length}\n        </div>\n\n        <div className=\"px-4 py-2 bg-blue-100 rounded-lg text-sm text-blue-600 flex items-center\">\n          {isLoaded ? '✅ Carte chargée' : '⏳ Chargement...'}\n        </div>\n      </div>\n\n      {/* Carte */}\n      <div className=\"h-96 border rounded-lg overflow-hidden relative\">\n        <div \n          ref={mapContainer} \n          className=\"w-full h-full\"\n        />\n        \n        {!isLoaded && (\n          <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-2\"></div>\n              <p className=\"text-gray-600\">Chargement de la carte...</p>\n            </div>\n          </div>\n        )}\n\n        {/* Indicateur de mode dessin */}\n        {isDrawing && (\n          <div className=\"absolute top-4 left-4 bg-orange-500 text-white px-3 py-2 rounded-lg shadow-lg animate-pulse\">\n            <div className=\"flex items-center gap-2\">\n              <div>🎨</div>\n              <span className=\"font-medium\">Mode dessin actif</span>\n            </div>\n            <p className=\"text-xs mt-1 opacity-90\">Cliquez sur la carte pour dessiner</p>\n          </div>\n        )}\n\n        {/* Debug info */}\n        {isLoaded && (\n          <div className=\"absolute bottom-4 left-4 bg-white bg-opacity-95 p-2 rounded text-xs\">\n            <div>Map: {map.current ? '✅' : '❌'}</div>\n            <div>Draw: {draw.current ? '✅' : '❌'}</div>\n            <div>Mode: {isDrawing ? 'Dessin' : 'Navigation'}</div>\n          </div>\n        )}\n      </div>\n\n      {/* Liste des polygones créés */}\n      {drawnPolygons.length > 0 && (\n        <div className=\"bg-white p-4 rounded-lg shadow border\">\n          <h3 className=\"font-semibold mb-3 text-gray-800\">📍 Quartiers créés ({drawnPolygons.length})</h3>\n          <div className=\"space-y-2\">\n            {drawnPolygons.map((polygon, index) => (\n              <div key={polygon.id} className=\"flex justify-between items-center p-3 bg-gradient-to-r from-green-50 to-blue-50 rounded border border-green-200\">\n                <div>\n                  <span className=\"font-medium text-gray-800\">{polygon.name}</span>\n                  <p className=\"text-xs text-gray-500 mt-1\">Zone #{index + 1}</p>\n                </div>\n                <button \n                  onClick={() => {\n                    setDrawnPolygons(prev => prev.filter((_, i) => i !== index));\n                  }}\n                  className=\"text-red-600 hover:text-red-800 text-sm font-medium px-2 py-1 rounded hover:bg-red-50 transition\"\n                >\n                  Supprimer\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SimpleEmojiRain.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SimpleMacroView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapDisabled' is assigned a value but never used. Allowed unused args must match /^_/u.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'toggleMap' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":72,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport {\n  LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer,\n  BarChart, Bar, PieChart, Pie, Cell\n} from \"recharts\";\nimport SimpleWorkingMap from \"@/components/SimpleWorkingMap\";\nimport { AreaOption } from \"@/components/SearchValidate\";\n\n// ✅ Mock data\nconst traficData = [\n  { day: \"Lun\", scans: 320 },\n  { day: \"Mar\", scans: 250 },\n  { day: \"Mer\", scans: 400 },\n  { day: \"Jeu\", scans: 380 },\n  { day: \"Ven\", scans: 500 },\n  { day: \"Sam\", scans: 650 },\n  { day: \"Dim\", scans: 420 },\n];\n\nconst traficHoraire = [\n  { hour: \"8h\", scans: 50 },\n  { hour: \"12h\", scans: 200 },\n  { hour: \"16h\", scans: 180 },\n  { hour: \"20h\", scans: 120 },\n];\n\nconst reductionsData = [\n  { zone: \"Centre-ville\", used: 120 },\n  { zone: \"Quartier Nord\", used: 80 },\n  { zone: \"Zone Est\", used: 60 },\n];\n\nconst jeuxData = [\n  { name: \"Participants réguliers\", value: 300 },\n  { name: \"Occasionnels\", value: 150 },\n  { name: \"Nouveaux\", value: 50 },\n];\n\nconst COLORS = [\"#10B981\", \"#3B82F6\", \"#F59E0B\"];\n\nconst options = [\n  \"Trafic\",\n  \"Réductions\",\n  \"Jeux\",\n  \"Flux\",\n  \"Alertes\",\n  \"Classements\",\n  \"Segmentation\",\n  \"Simulation\",\n];\n\ninterface SimpleMacroViewProps {\n  selectedAreas?: AreaOption[];\n  mapDisabled?: boolean;\n}\n\nexport default function SimpleMacroView({ \n  selectedAreas = [], \n  mapDisabled = false \n}: SimpleMacroViewProps) {\n  const [selectedOptions, setSelectedOptions] = useState<string[]>([\"Trafic\"]);\n\n  const toggleOption = (opt: string) => {\n    setSelectedOptions((prev) =>\n      prev.includes(opt) ? prev.filter((o) => o !== opt) : [...prev, opt]\n    );\n  };\n\n  // Toggle pour désactiver/réactiver la carte\n  const toggleMap = () => {\n    // Cette fonctionnalité sera gérée par le parent\n    console.log('Toggle map - géré par le parent');\n  };\n\n  return (\n    <section className=\"space-y-8 relative\">\n      {/* Choix du type d'analyse */}\n      <div>\n        <label className=\"text-sm font-medium\">🎛️ Choisir ce que vous voulez voir</label>\n        <div className=\"flex flex-wrap gap-2 mt-2\">\n          {options.map((opt) => (\n            <button\n              key={opt}\n              onClick={() => toggleOption(opt)}\n              className={`px-3 py-1 rounded-full border text-sm ${\n                selectedOptions.includes(opt)\n                  ? \"bg-emerald-600 text-white border-emerald-600\"\n                  : \"bg-white text-gray-700 border-gray-300\"\n              }`}\n            >\n              {opt}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Affichage des zones sélectionnées */}\n      {selectedAreas.length > 0 && (\n        <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n          <h3 className=\"text-sm font-semibold text-blue-900 mb-2\">\n            Zones sélectionnées pour l&apos;analyse :\n          </h3>\n          <div className=\"text-sm text-blue-800\">\n            {selectedAreas.map(area => area.label).join(\", \")}\n          </div>\n        </div>\n      )}\n\n      {/* Carte interactive */}\n      <SimpleWorkingMap />\n\n      {/* Blocs d'analyse */}\n      <div className=\"space-y-6\">\n        {selectedOptions.includes(\"Trafic\") && (\n          <>\n            <div className=\"bg-white p-4 shadow rounded-lg\">\n              <h3 className=\"font-semibold mb-2\">📈 Trafic journalier</h3>\n              <div className=\"h-48\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={traficData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"day\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line type=\"monotone\" dataKey=\"scans\" stroke=\"#10B981\" strokeWidth={2} />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n            <div className=\"bg-white p-4 shadow rounded-lg\">\n              <h3 className=\"font-semibold mb-2\">⏰ Répartition horaire</h3>\n              <div className=\"h-48\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={traficHoraire}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"hour\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"scans\" fill=\"#3B82F6\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n          </>\n        )}\n\n        {selectedOptions.includes(\"Réductions\") && (\n          <div className=\"bg-white p-4 shadow rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">🎟️ Réductions utilisées</h3>\n            <div className=\"h-48\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={reductionsData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"zone\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"used\" fill=\"#F59E0B\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        )}\n\n        {selectedOptions.includes(\"Jeux\") && (\n          <div className=\"bg-white p-4 shadow rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">🎲 Participation aux jeux</h3>\n            <div className=\"h-48\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie data={jeuxData} dataKey=\"value\" outerRadius={80} label>\n                    {jeuxData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        )}\n\n        {selectedOptions.includes(\"Alertes\") && (\n          <div className=\"bg-white p-4 shadow rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">⚠️ Alertes & Anomalies</h3>\n            <ul className=\"space-y-2\">\n              <li>🚧 Rue Centrale : -28% trafic (travaux)</li>\n              <li>🎉 Quartier Nord : +15% samedi (festival)</li>\n              <li>🌦️ Prévision pluie dimanche → baisse -20% attendue</li>\n            </ul>\n          </div>\n        )}\n\n        {selectedOptions.includes(\"Classements\") && (\n          <div className=\"bg-white p-4 shadow rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">🥇 Classements</h3>\n            <ol className=\"list-decimal ml-6 space-y-1\">\n              <li>Barber Black&Gold (320 scans)</li>\n              <li>Pizzeria Bella Vista (280 scans)</li>\n              <li>Boutique Chic (210 scans)</li>\n            </ol>\n          </div>\n        )}\n\n        {selectedOptions.includes(\"Segmentation\") && (\n          <div className=\"bg-white p-4 shadow rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">👥 Segmentation clients</h3>\n            <ul className=\"space-y-2 text-gray-700\">\n              <li>👩‍👩‍👧‍👦 Familles : 45%</li>\n              <li>👩 Jeunes : 35%</li>\n              <li>🧓 Seniors : 20%</li>\n            </ul>\n          </div>\n        )}\n\n        {selectedOptions.includes(\"Simulation\") && (\n          <div className=\"bg-white p-4 shadow rounded-lg\">\n            <h3 className=\"font-semibold mb-2\">🔮 Simulation IA</h3>\n            <p className=\"text-gray-600\">\n              Scénario : Fermeture Rue Centrale 6 mois → -35% trafic zone, +15% report Quartier Est.\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SimpleMap.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setMapError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":6,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\n\nexport default function SimpleMap() {\n  const [mapError, setMapError] = useState<string | null>(null);\n\n  const MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_TOKEN;\n  \n  // Debug: vérifier que le token est chargé\n  console.log(\"Mapbox token SimpleMap:\", MAPBOX_TOKEN ? \"✅ Chargé\" : \"❌ Manquant\");\n\n  if (!MAPBOX_TOKEN) {\n    return (\n      <div className=\"h-96 bg-gradient-to-br from-blue-50 to-green-50 rounded-lg border flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-gray-500 text-lg mb-2\">🗺️ Token Mapbox manquant</p>\n          <p className=\"text-sm text-gray-400\">\n            Ajoutez NEXT_PUBLIC_MAPBOX_TOKEN dans .env.local\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"h-96 border rounded-lg overflow-hidden bg-gray-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-gray-600 text-lg mb-2\">🗺️ Carte Mapbox</p>\n          <p className=\"text-sm text-gray-500\">\n            Token configuré : {MAPBOX_TOKEN.substring(0, 20)}...\n          </p>\n          <p className=\"text-xs text-gray-400 mt-2\">\n            Les composants de carte sont prêts à être utilisés\n          </p>\n        </div>\n      </div>\n\n      <div className=\"bg-white p-4 shadow rounded\">\n        <h3 className=\"font-semibold mb-2\">✅ Configuration réussie</h3>\n        <p className=\"text-gray-600 text-sm\">\n          Votre token Mapbox est correctement configuré. \n          Vous pouvez maintenant utiliser les composants de carte interactifs.\n        </p>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SimpleMapboxMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SimpleTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SimpleWorkingMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SimulatedMap.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'zoom' is assigned a value but never used. Allowed unused args must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":7},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'setTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'setTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":24,"column":4,"nodeType":"ArrayExpression","endLine":24,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[558,570],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'clearTimeout'. Either exclude it or remove the dependency array. Outer scope values like 'clearTimeout' aren't valid dependencies because mutating them doesn't re-render the component.","line":32,"column":4,"nodeType":"ArrayExpression","endLine":32,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[725,739],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from 'react';\n\ninterface SimulatedMapProps {\n  className?: string;\n  height?: string;\n  center?: [number, number];\n  zoom?: number;\n}\n\nexport default function SimulatedMap({ \n  className = \"\", \n  height = \"400px\",\n  center = [2.3522, 48.8566], // Paris par défaut\n  zoom = 12\n}: SimulatedMapProps) {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [mousePosition, setMousePosition] = useState<{ x: number; y: number } | null>(null);\n\n  \nconst stableSetTimeout = useCallback(() => {\n  setTimeout();\n}, [setTimeout]);\n\nconst stableSetIsLoaded = useCallback(() => {\n  setIsLoaded();\n}, [setIsLoaded]);\n\nconst stableClearTimeout = useCallback(() => {\n  clearTimeout();\n}, [clearTimeout]);\n\nuseEffect(() => {\n  stableSetTimeout();\n  stableSetIsLoaded();\n  stableClearTimeout();\n}, [stableSetTimeout, stableSetIsLoaded, stableClearTimeout]);;\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMousePosition({\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    });\n  };\n\n  const handleMouseLeave = () => {\n    setMousePosition(null);\n  };\n\n  return (\n    <div className={`relative ${className}`} style={{ height }}>\n      {/* Carte simulée avec OpenStreetMap */}\n      <div \n        className=\"w-full h-full rounded-lg overflow-hidden relative\"\n        style={{ height }}\n        onMouseMove={handleMouseMove}\n        onMouseLeave={handleMouseLeave}\n      >\n        <iframe\n          src={`https://www.openstreetmap.org/export/embed.html?bbox=${center[0]-0.01},${center[1]-0.01},${center[0]+0.01},${center[1]+0.01}&layer=mapnik&marker=${center[1]},${center[0]}`}\n          className=\"w-full h-full border-0\"\n          title=\"Carte OpenStreetMap\"\n        />\n        \n        {/* Overlay de simulation Mapbox */}\n        <div className=\"absolute inset-0 pointer-events-none\">\n          {/* Contrôles simulés */}\n          <div className=\"absolute top-4 right-4 flex flex-col gap-2\">\n            <button className=\"w-10 h-10 bg-white rounded shadow-lg flex items-center justify-center hover:bg-gray-50 pointer-events-auto\">\n              <span className=\"text-lg\">+</span>\n            </button>\n            <button className=\"w-10 h-10 bg-white rounded shadow-lg flex items-center justify-center hover:bg-gray-50 pointer-events-auto\">\n              <span className=\"text-lg\">−</span>\n            </button>\n            <button className=\"w-10 h-10 bg-white rounded shadow-lg flex items-center justify-center hover:bg-gray-50 pointer-events-auto\">\n              <span className=\"text-lg\">⌂</span>\n            </button>\n          </div>\n\n          {/* Marqueur principal */}\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n            <div className=\"w-6 h-6 bg-green-500 rounded-full border-2 border-white shadow-lg animate-pulse\"></div>\n          </div>\n\n          {/* Coordonnées de la souris */}\n          {mousePosition && (\n            <div \n              className=\"absolute bg-black bg-opacity-75 text-white text-xs px-2 py-1 rounded pointer-events-auto\"\n              style={{\n                left: mousePosition.x + 10,\n                top: mousePosition.y - 20\n              }}\n            >\n              {center[0].toFixed(4)}, {center[1].toFixed(4)}\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {!isLoaded && (\n        <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center rounded-lg\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n            <p className=\"text-gray-600\">Chargement de la carte...</p>\n          </div>\n        </div>\n      )}\n      \n      {/* Overlay avec informations */}\n      <div className=\"absolute top-4 left-4 bg-white bg-opacity-90 p-3 rounded-lg shadow\">\n        <div className=\"text-sm\">\n          <p className=\"font-semibold text-gray-700\">📍 Zone d&apos;activité</p>\n          <p className=\"text-blue-600\">47 commerces actifs</p>\n        </div>\n      </div>\n      \n      <div className=\"absolute bottom-4 right-4 bg-white bg-opacity-90 p-3 rounded-lg shadow\">\n        <div className=\"text-sm\">\n          <p className=\"font-semibold text-gray-700\">🎯 Statistiques</p>\n          <p className=\"text-green-600\">1,247 scans aujourd&apos;hui</p>\n        </div>\n      </div>\n\n      {/* Légende */}\n      <div className=\"absolute bottom-4 left-4 bg-white bg-opacity-90 p-3 rounded-lg shadow\">\n        <div className=\"text-sm\">\n          <p className=\"font-semibold text-gray-700 mb-2\">🗺️ Carte simulée</p>\n          <p className=\"text-gray-600 text-xs\">OpenStreetMap + Interface Mapbox</p>\n          <p className=\"text-gray-600 text-xs\">Coordonnées: {center[0].toFixed(4)}, {center[1].toFixed(4)}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SocialPowerSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SponsorFlowModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/SponsorQuiz.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/StandardPageLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/StreetMapboxMap.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Expression or comma expected.","line":29,"column":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\n\nexport default function StreetMapboxMap() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<unknown>(null);\n  const draw = useRef<unknown>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [drawnPolygons, setDrawnPolygons] = useState<unknown[]>([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n\n  \nconst stableIncludes = useCallback(() => {\n  includes();\n}, [includes]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableAll = useCallback(() => {\n  all();\n}, [all]);\n\nconst stableImport = useCallback(() => {\n  import();\n}, [import]);\n\nconst stableImport = useCallback(() => {\n  import();\n}, [import]);\n\nconst stableThen = useCallback(() => {\n  then();\n}, [then]);\n\nconst stableMap = useCallback(() => {\n  Map();\n}, [Map]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableNavigationControl = useCallback(() => {\n  NavigationControl();\n}, [NavigationControl]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableScaleControl = useCallback(() => {\n  ScaleControl();\n}, [ScaleControl]);\n\nconst stableDefault = useCallback(() => {\n  default();\n}, [default]);\n\nconst stableHasControl = useCallback(() => {\n  hasControl();\n}, [hasControl]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stablePrompt = useCallback(() => {\n  prompt();\n}, [prompt]);\n\nconst stableSetDrawnPolygons = useCallback(() => {\n  setDrawnPolygons();\n}, [setDrawnPolygons]);\n\nconst stableNow = useCallback(() => {\n  now();\n}, [now]);\n\nconst stableSetIsDrawing = useCallback(() => {\n  setIsDrawing();\n}, [setIsDrawing]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableSetDrawnPolygons = useCallback(() => {\n  setDrawnPolygons();\n}, [setDrawnPolygons]);\n\nconst stableSlice = useCallback(() => {\n  slice();\n}, [slice]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableSetIsDrawing = useCallback(() => {\n  setIsDrawing();\n}, [setIsDrawing]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableSetIsLoaded = useCallback(() => {\n  setIsLoaded();\n}, [setIsLoaded]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetPaintProperty = useCallback(() => {\n  setPaintProperty();\n}, [setPaintProperty]);\n\nconst stableSetPaintProperty = useCallback(() => {\n  setPaintProperty();\n}, [setPaintProperty]);\n\nconst stableSetPaintProperty = useCallback(() => {\n  setPaintProperty();\n}, [setPaintProperty]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableCatch = useCallback(() => {\n  catch();\n}, [catch]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableOff = useCallback(() => {\n  off();\n}, [off]);\n\nconst stableOff = useCallback(() => {\n  off();\n}, [off]);\n\nconst stableOff = useCallback(() => {\n  off();\n}, [off]);\n\nconst stableOff = useCallback(() => {\n  off();\n}, [off]);\n\nconst stableOff = useCallback(() => {\n  off();\n}, [off]);\n\nconst stableRemove = useCallback(() => {\n  remove();\n}, [remove]);\n\nconst stableWarn = useCallback(() => {\n  warn();\n}, [warn]);\n\nuseEffect(() => {\n  stableIncludes();\n  stableSetError();\n  stableAll();\n  stableImport();\n  stableImport();\n  stableThen();\n  stableMap();\n  stableAddControl();\n  stableNavigationControl();\n  stableAddControl();\n  stableScaleControl();\n  stableDefault();\n  stableHasControl();\n  stableAddControl();\n  stableOn();\n  stablePrompt();\n  stableSetDrawnPolygons();\n  stableNow();\n  stableSetIsDrawing();\n  stableOn();\n  stableSetDrawnPolygons();\n  stableSlice();\n  stableOn();\n  stableSetIsDrawing();\n  stableOn();\n  stableSetIsLoaded();\n  stableLog();\n  stableSetPaintProperty();\n  stableSetPaintProperty();\n  stableSetPaintProperty();\n  stableOn();\n  stableError();\n  stableSetError();\n  stableError();\n  stableSetError();\n  stableCatch();\n  stableError();\n  stableSetError();\n  stableOff();\n  stableOff();\n  stableOff();\n  stableOff();\n  stableOff();\n  stableRemove();\n  stableWarn();\n}, [stableIncludes, stableSetError, stableAll, stableImport, stableImport, stableThen, stableMap, stableAddControl, stableNavigationControl, stableAddControl, stableScaleControl, stableDefault, stableHasControl, stableAddControl, stableOn, stablePrompt, stableSetDrawnPolygons, stableNow, stableSetIsDrawing, stableOn, stableSetDrawnPolygons, stableSlice, stableOn, stableSetIsDrawing, stableOn, stableSetIsLoaded, stableLog, stableSetPaintProperty, stableSetPaintProperty, stableSetPaintProperty, stableOn, stableError, stableSetError, stableError, stableSetError, stableCatch, stableError, stableSetError, stableOff, stableOff, stableOff, stableOff, stableOff, stableRemove, stableWarn]);;\n\n  const startDrawing = () => {\n    if (draw.current && map.current) {\n      try {\n        draw.current.changeMode('draw_polygon');\n        setIsDrawing(true);\n      } catch (err) {\n        console.warn('Erreur lors du démarrage du dessin:', err);\n      }\n    }\n  };\n\n  const clearAll = () => {\n    if (draw.current && map.current) {\n      try {\n        draw.current.deleteAll();\n        setDrawnPolygons([]);\n      } catch (err) {\n        console.warn('Erreur lors de la suppression:', err);\n      }\n    }\n  };\n\n  const changeMapStyle = (style: string) => {\n    if (map.current) {\n      try {\n        map.current.setStyle(style);\n        // Réappliquer les contrôles après changement de style\n        setTimeout(() => {\n          if (draw.current && map.current && !map.current.hasControl(draw.current)) {\n            map.current.addControl(draw.current);\n          }\n        }, 100);\n      } catch (err) {\n        console.warn('Erreur lors du changement de style:', err);\n      }\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"h-96 bg-gradient-to-br from-red-50 to-orange-50 rounded-lg border border-red-200 flex items-center justify-center\">\n        <div className=\"text-center p-6\">\n          <div className=\"text-4xl mb-3\">❌</div>\n          <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Erreur de carte</h3>\n          <p className=\"text-red-600 text-sm\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Instructions améliorées */}\n      <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 p-4 rounded-lg border border-blue-200\">\n        <h3 className=\"font-semibold text-blue-800 mb-3 flex items-center\">\n          🗺️ Carte des Rues - Martinique\n        </h3>\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"font-medium text-blue-700 mb-2\">🎨 Comment dessiner</h4>\n            <ul className=\"text-sm text-blue-600 space-y-1\">\n              <li>• Cliquez sur &quot;🎨 Dessiner une zone&quot;</li>\n              <li>• Dessinez en cliquant sur la carte</li>\n              <li>• Double-cliquez pour fermer le polygone</li>\n              <li>• Donnez un nom à votre quartier</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium text-blue-700 mb-2\">🗺️ Styles de carte</h4>\n            <ul className=\"text-sm text-blue-600 space-y-1\">\n              <li>• <strong>Rues</strong> : Noms des rues visibles</li>\n              <li>• <strong>Satellite</strong> : Vue aérienne</li>\n              <li>• <strong>Clair</strong> : Style minimaliste</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Contrôles de style */}\n      <div className=\"flex gap-2 flex-wrap\">\n        <button\n          onClick={() => changeMapStyle('mapbox://styles/mapbox/streets-v12')}\n          className=\"px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 transition\"\n        >\n          🗺️ Rues\n        </button>\n        <button\n          onClick={() => changeMapStyle('mapbox://styles/mapbox/satellite-streets-v12')}\n          className=\"px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700 transition\"\n        >\n          🛰️ Satellite\n        </button>\n        <button\n          onClick={() => changeMapStyle('mapbox://styles/mapbox/light-v11')}\n          className=\"px-3 py-1 bg-gray-600 text-white rounded text-sm hover:bg-gray-700 transition\"\n        >\n          ☀️ Clair\n        </button>\n        <button\n          onClick={() => changeMapStyle('mapbox://styles/mapbox/dark-v11')}\n          className=\"px-3 py-1 bg-gray-800 text-white rounded text-sm hover:bg-gray-900 transition\"\n        >\n          🌙 Sombre\n        </button>\n      </div>\n\n      {/* Boutons de contrôle */}\n      <div className=\"flex gap-3 flex-wrap\">\n        <button\n          onClick={startDrawing}\n          disabled={!isLoaded}\n          className={`px-4 py-2 rounded-lg font-medium transition ${\n            isDrawing\n              ? 'bg-orange-500 text-white'\n              : isLoaded\n              ? 'bg-blue-600 text-white hover:bg-blue-700'\n              : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n          }`}\n        >\n          {isDrawing ? '🎨 Dessin en cours...' : '🎨 Dessiner une zone'}\n        </button>\n        \n        <button\n          onClick={clearAll}\n          disabled={!isLoaded || drawnPolygons.length === 0}\n          className=\"px-4 py-2 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 disabled:bg-gray-300 disabled:text-gray-500 disabled:cursor-not-allowed transition\"\n        >\n          🗑️ Effacer tout\n        </button>\n\n        <div className=\"px-4 py-2 bg-gray-100 rounded-lg text-sm text-gray-600 flex items-center\">\n          📍 Zones créées: {drawnPolygons.length}\n        </div>\n      </div>\n\n      {/* Carte */}\n      <div className=\"h-96 border rounded-lg overflow-hidden relative\">\n        <div \n          ref={mapContainer} \n          className=\"w-full h-full\"\n        />\n        \n        {!isLoaded && (\n          <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n              <p className=\"text-gray-600\">Chargement de la carte...</p>\n            </div>\n          </div>\n        )}\n\n        {/* Indicateur de mode dessin */}\n        {isDrawing && (\n          <div className=\"absolute top-4 left-4 bg-orange-500 text-white px-3 py-2 rounded-lg shadow-lg\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"animate-pulse\">🎨</div>\n              <span className=\"font-medium\">Mode dessin actif</span>\n            </div>\n            <p className=\"text-xs mt-1 opacity-90\">Cliquez sur la carte pour dessiner</p>\n          </div>\n        )}\n\n        {/* Légende */}\n        {isLoaded && (\n          <div className=\"absolute bottom-4 right-4 bg-white bg-opacity-95 p-3 rounded-lg shadow text-xs\">\n            <div className=\"font-semibold mb-1\">Légende</div>\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-3 h-3 bg-red-500 rounded\"></div>\n                <span>Zone en cours</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-3 h-3 bg-teal-500 rounded\"></div>\n                <span>Zone sélectionnée</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Liste des polygones créés */}\n      {drawnPolygons.length > 0 && (\n        <div className=\"bg-white p-4 rounded-lg shadow border\">\n          <h3 className=\"font-semibold mb-3 text-gray-800\">📍 Quartiers créés ({drawnPolygons.length})</h3>\n          <div className=\"space-y-2\">\n            {drawnPolygons.map((polygon, index) => (\n              <div key={polygon.id} className=\"flex justify-between items-center p-3 bg-gradient-to-r from-green-50 to-blue-50 rounded border border-green-200\">\n                <div>\n                  <span className=\"font-medium text-gray-800\">{polygon.name}</span>\n                  <p className=\"text-xs text-gray-500 mt-1\">Zone #{index + 1}</p>\n                </div>\n                <button \n                  onClick={() => {\n                    setDrawnPolygons(prev => prev.filter((_, i) => i !== index));\n                    if (draw.current) {\n                      draw.current.deleteAll();\n                      drawnPolygons.forEach((p, i) => {\n                        if (i !== index) {\n                          draw.current.add(p.feature);\n                        }\n                      });\n                    }\n                  }}\n                  className=\"text-red-600 hover:text-red-800 text-sm font-medium px-2 py-1 rounded hover:bg-red-50 transition\"\n                >\n                  Supprimer\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/StreetSegmentationMap.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'onSegmentClick'. Either include it or remove the dependency array. If 'onSegmentClick' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":190,"column":6,"nodeType":"ArrayExpression","endLine":190,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [center, zoom, segmentsToUse, onSegmentClick]","fix":{"range":[5421,5450],"text":"[center, zoom, segmentsToUse, onSegmentClick]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\ninterface StreetSegment {\n  id: string;\n  name: string;\n  coordinates: [number, number][];\n  type: 'commercial' | 'residential' | 'mixed' | 'industrial';\n  population?: number;\n  businesses?: number;\n  footTraffic?: number;\n  color: string;\n}\n\ninterface StreetSegmentationMapProps {\n  className?: string;\n  height?: string;\n  center?: [number, number];\n  zoom?: number;\n  segments?: StreetSegment[];\n  onSegmentClick?: (segment: StreetSegment) => void;\n}\n\nexport default function StreetSegmentationMap({ \n  className = \"\", \n  height = \"600px\",\n  center = [2.3522, 48.8566], // Paris par défaut\n  zoom = 14,\n  segments = [],\n  onSegmentClick\n}: StreetSegmentationMapProps) {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<mapboxgl.Map | null>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedSegment, setSelectedSegment] = useState<StreetSegment | null>(null);\n\n  // Segments de démonstration pour les collectivités\n  const defaultSegments: StreetSegment[] = [\n    {\n      id: 'rue-commerciale-1',\n      name: 'Rue de Rivoli',\n      coordinates: [[2.3522, 48.8566], [2.3622, 48.8576], [2.3722, 48.8586]],\n      type: 'commercial',\n      population: 2500,\n      businesses: 45,\n      footTraffic: 8500,\n      color: '#3b82f6'\n    },\n    {\n      id: 'rue-residentielle-1',\n      name: 'Rue de la Paix',\n      coordinates: [[2.3322, 48.8666], [2.3422, 48.8676], [2.3522, 48.8686]],\n      type: 'residential',\n      population: 1800,\n      businesses: 12,\n      footTraffic: 3200,\n      color: '#22c55e'\n    },\n    {\n      id: 'rue-mixte-1',\n      name: 'Boulevard Saint-Germain',\n      coordinates: [[2.3422, 48.8466], [2.3522, 48.8476], [2.3622, 48.8486]],\n      type: 'mixed',\n      population: 3200,\n      businesses: 28,\n      footTraffic: 6200,\n      color: '#f59e0b'\n    }\n  ];\n\n  const segmentsToUse = segments.length > 0 ? segments : defaultSegments;\n\n  useEffect(() => {\n    if (!mapContainer.current) return;\n\n    const token = process.env.NEXT_PUBLIC_MAPBOX_TOKEN;\n    \n    if (!token || token.includes('your_real_token_here')) {\n      setError('Token Mapbox manquant ou invalide');\n      return;\n    }\n\n    mapboxgl.accessToken = token;\n\n    try {\n      map.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/streets-v12',\n        center: center,\n        zoom: zoom,\n        attributionControl: false\n      });\n\n      // Contrôles de navigation\n      map.current.addControl(new mapboxgl.NavigationControl(), 'top-right');\n      map.current.addControl(new mapboxgl.FullscreenControl(), 'top-right');\n\n      // Ajouter une source de données pour les segments\n      map.current.on('load', () => {\n        if (!map.current) return;\n\n        // Ajouter les segments comme source de données\n        map.current.addSource('street-segments', {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: segmentsToUse.map(segment => ({\n              type: 'Feature',\n              properties: {\n                id: segment.id,\n                name: segment.name,\n                type: segment.type,\n                population: segment.population,\n                businesses: segment.businesses,\n                footTraffic: segment.footTraffic,\n                color: segment.color\n              },\n              geometry: {\n                type: 'LineString',\n                coordinates: segment.coordinates\n              }\n            }))\n          }\n        });\n\n        // Style des segments selon leur type\n        map.current.addLayer({\n          id: 'street-segments',\n          type: 'line',\n          source: 'street-segments',\n          layout: {\n            'line-join': 'round',\n            'line-cap': 'round'\n          },\n          paint: {\n            'line-color': ['get', 'color'],\n            'line-width': 6,\n            'line-opacity': 0.8\n          }\n        });\n\n        // Ajouter des marqueurs pour les statistiques\n        segmentsToUse.forEach(segment => {\n          const [lng, lat] = segment.coordinates[Math.floor(segment.coordinates.length / 2)];\n          \n          const el = document.createElement('div');\n          el.className = 'segment-marker';\n          el.style.cssText = `\n            background-color: ${segment.color};\n            width: 20px;\n            height: 20px;\n            border-radius: 50%;\n            border: 2px solid white;\n            cursor: pointer;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n          `;\n\n          el.addEventListener('click', () => {\n            setSelectedSegment(segment);\n            onSegmentClick?.(segment);\n          });\n\n          new mapboxgl.Marker(el)\n            .setLngLat([lng, lat])\n            .addTo(map.current!);\n        });\n\n        setIsLoaded(true);\n      });\n\n      map.current.on('error', (e) => {\n        console.error('Erreur Mapbox:', e);\n        setError('Erreur lors du chargement de la carte');\n      });\n\n    } catch (err) {\n      console.error('Erreur d\\'initialisation Mapbox:', err);\n      setError('Impossible d\\'initialiser la carte');\n    }\n\n    return () => {\n      if (map.current) {\n        map.current.remove();\n      }\n    };\n  }, [center, zoom, segmentsToUse]);\n\n  if (error) {\n    return (\n      <div \n        className={`bg-gradient-to-br from-red-50 to-orange-50 rounded-lg border border-red-200 flex items-center justify-center ${className}`}\n        style={{ height }}\n      >\n        <div className=\"text-center p-6\">\n          <div className=\"text-4xl mb-3\">❌</div>\n          <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Erreur de carte</h3>\n          <p className=\"text-red-600 text-sm\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`relative ${className}`} style={{ height }}>\n      <div \n        ref={mapContainer} \n        className=\"w-full h-full rounded-lg\"\n        style={{ height }}\n      />\n      \n      {!isLoaded && (\n        <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center rounded-lg\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n            <p className=\"text-gray-600\">Chargement de la segmentation...</p>\n          </div>\n        </div>\n      )}\n      \n      {/* Légende des types de rues */}\n      <div className=\"absolute top-4 left-4 bg-white bg-opacity-95 p-4 rounded-lg shadow-lg\">\n        <h3 className=\"font-semibold text-gray-700 mb-3\">Types de rues</h3>\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n            <span>Commerciale</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n            <span>Résidentielle</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 bg-yellow-500 rounded\"></div>\n            <span>Mixte</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Statistiques globales */}\n      <div className=\"absolute bottom-4 right-4 bg-white bg-opacity-95 p-4 rounded-lg shadow-lg\">\n        <h3 className=\"font-semibold text-gray-700 mb-2\">Vue d&apos;ensemble</h3>\n        <div className=\"text-sm space-y-1\">\n          <p><span className=\"font-medium\">Population totale:</span> {segmentsToUse.reduce((sum, s) => sum + (s.population || 0), 0).toLocaleString()}</p>\n          <p><span className=\"font-medium\">Commerces:</span> {segmentsToUse.reduce((sum, s) => sum + (s.businesses || 0), 0)}</p>\n          <p><span className=\"font-medium\">Trafic piéton:</span> {segmentsToUse.reduce((sum, s) => sum + (s.footTraffic || 0), 0).toLocaleString()}/jour</p>\n        </div>\n      </div>\n\n      {/* Panneau de détails du segment sélectionné */}\n      {selectedSegment && (\n        <div className=\"absolute top-4 right-4 bg-white bg-opacity-95 p-4 rounded-lg shadow-lg max-w-sm\">\n          <div className=\"flex justify-between items-start mb-3\">\n            <h3 className=\"font-semibold text-gray-700\">{selectedSegment.name}</h3>\n            <button \n              onClick={() => setSelectedSegment(null)}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              ✕\n            </button>\n          </div>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between\">\n              <span>Type:</span>\n              <span className=\"font-medium capitalize\">{selectedSegment.type}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Population:</span>\n              <span className=\"font-medium\">{selectedSegment.population?.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Commerces:</span>\n              <span className=\"font-medium\">{selectedSegment.businesses}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Trafic piéton:</span>\n              <span className=\"font-medium\">{selectedSegment.footTraffic?.toLocaleString()}/jour</span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/TestMap.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Expression or comma expected.","line":25,"column":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\n\nexport default function TestMap() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  \nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableImport = useCallback(() => {\n  import();\n}, [import]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableMap = useCallback(() => {\n  Map();\n}, [Map]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetIsLoaded = useCallback(() => {\n  setIsLoaded();\n}, [setIsLoaded]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableInitMap = useCallback(() => {\n  initMap();\n}, [initMap]);\n\nuseEffect(() => {\n  stableLog();\n  stableSetError();\n  stableLog();\n  stableImport();\n  stableLog();\n  stableLog();\n  stableMap();\n  stableLog();\n  stableOn();\n  stableLog();\n  stableSetIsLoaded();\n  stableOn();\n  stableError();\n  stableSetError();\n  stableError();\n  stableSetError();\n  stableInitMap();\n}, [stableLog, stableSetError, stableLog, stableImport, stableLog, stableLog, stableMap, stableLog, stableOn, stableLog, stableSetIsLoaded, stableOn, stableError, stableSetError, stableError, stableSetError, stableInitMap]);;\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-blue-50 p-4 rounded-lg\">\n        <h3 className=\"font-semibold text-blue-800 mb-2\">🔍 Test de la carte Mapbox</h3>\n        <div className=\"text-sm text-blue-700\">\n          <p>Token: {process.env.NEXT_PUBLIC_MAPBOX_TOKEN ? '✅ Présent' : '❌ Manquant'}</p>\n          <p>État: {isLoaded ? '✅ Chargée' : error ? `❌ ${error}` : '⏳ Chargement...'}</p>\n        </div>\n      </div>\n      \n      <div className=\"h-96 border rounded-lg overflow-hidden relative\">\n        <div ref={mapContainer} className=\"w-full h-full\" />\n        {!isLoaded && !error && (\n          <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n              <p className=\"text-gray-600\">Chargement de la carte...</p>\n            </div>\n          </div>\n        )}\n        {error && (\n          <div className=\"absolute inset-0 bg-red-50 flex items-center justify-center\">\n            <div className=\"text-center text-red-600\">\n              <p className=\"font-semibold\">Erreur</p>\n              <p className=\"text-sm\">{error}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/UltraSimpleMap.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Expression or comma expected.","line":34,"column":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\n\nexport default function UltraSimpleMap() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<unknown>(null);\n  const draw = useRef<unknown>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [drawnPolygons, setDrawnPolygons] = useState<unknown[]>([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [debugInfo, setDebugInfo] = useState<string>('Initialisation...');\n\n  \nconst stableIncludes = useCallback(() => {\n  includes();\n}, [includes]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableSetDebugInfo = useCallback(() => {\n  setDebugInfo();\n}, [setDebugInfo]);\n\nconst stableAll = useCallback(() => {\n  all();\n}, [all]);\n\nconst stableImport = useCallback(() => {\n  import();\n}, [import]);\n\nconst stableImport = useCallback(() => {\n  import();\n}, [import]);\n\nconst stableThen = useCallback(() => {\n  then();\n}, [then]);\n\nconst stableSetDebugInfo = useCallback(() => {\n  setDebugInfo();\n}, [setDebugInfo]);\n\nconst stableMap = useCallback(() => {\n  Map();\n}, [Map]);\n\nconst stableSetDebugInfo = useCallback(() => {\n  setDebugInfo();\n}, [setDebugInfo]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableNavigationControl = useCallback(() => {\n  NavigationControl();\n}, [NavigationControl]);\n\nconst stableDefault = useCallback(() => {\n  default();\n}, [default]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableSetDebugInfo = useCallback(() => {\n  setDebugInfo();\n}, [setDebugInfo]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetDebugInfo = useCallback(() => {\n  setDebugInfo();\n}, [setDebugInfo]);\n\nconst stablePrompt = useCallback(() => {\n  prompt();\n}, [prompt]);\n\nconst stableSetDrawnPolygons = useCallback(() => {\n  setDrawnPolygons();\n}, [setDrawnPolygons]);\n\nconst stableNow = useCallback(() => {\n  now();\n}, [now]);\n\nconst stableSetDebugInfo = useCallback(() => {\n  setDebugInfo();\n}, [setDebugInfo]);\n\nconst stableSetIsDrawing = useCallback(() => {\n  setIsDrawing();\n}, [setIsDrawing]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetDebugInfo = useCallback(() => {\n  setDebugInfo();\n}, [setDebugInfo]);\n\nconst stableSetDrawnPolygons = useCallback(() => {\n  setDrawnPolygons();\n}, [setDrawnPolygons]);\n\nconst stableSlice = useCallback(() => {\n  slice();\n}, [slice]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableSetIsDrawing = useCallback(() => {\n  setIsDrawing();\n}, [setIsDrawing]);\n\nconst stableSetDebugInfo = useCallback(() => {\n  setDebugInfo();\n}, [setDebugInfo]);\n\nconst stableSetDebugInfo = useCallback(() => {\n  setDebugInfo();\n}, [setDebugInfo]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableSetIsLoaded = useCallback(() => {\n  setIsLoaded();\n}, [setIsLoaded]);\n\nconst stableSetDebugInfo = useCallback(() => {\n  setDebugInfo();\n}, [setDebugInfo]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableSetDebugInfo = useCallback(() => {\n  setDebugInfo();\n}, [setDebugInfo]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableSetDebugInfo = useCallback(() => {\n  setDebugInfo();\n}, [setDebugInfo]);\n\nconst stableCatch = useCallback(() => {\n  catch();\n}, [catch]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableSetDebugInfo = useCallback(() => {\n  setDebugInfo();\n}, [setDebugInfo]);\n\nconst stableRemove = useCallback(() => {\n  remove();\n}, [remove]);\n\nconst stableWarn = useCallback(() => {\n  warn();\n}, [warn]);\n\nuseEffect(() => {\n  stableIncludes();\n  stableSetError();\n  stableSetDebugInfo();\n  stableAll();\n  stableImport();\n  stableImport();\n  stableThen();\n  stableSetDebugInfo();\n  stableMap();\n  stableSetDebugInfo();\n  stableAddControl();\n  stableNavigationControl();\n  stableDefault();\n  stableAddControl();\n  stableSetDebugInfo();\n  stableOn();\n  stableLog();\n  stableSetDebugInfo();\n  stablePrompt();\n  stableSetDrawnPolygons();\n  stableNow();\n  stableSetDebugInfo();\n  stableSetIsDrawing();\n  stableOn();\n  stableLog();\n  stableSetDebugInfo();\n  stableSetDrawnPolygons();\n  stableSlice();\n  stableOn();\n  stableLog();\n  stableSetIsDrawing();\n  stableSetDebugInfo();\n  stableSetDebugInfo();\n  stableOn();\n  stableSetIsLoaded();\n  stableSetDebugInfo();\n  stableLog();\n  stableOn();\n  stableError();\n  stableSetError();\n  stableSetDebugInfo();\n  stableError();\n  stableSetError();\n  stableSetDebugInfo();\n  stableCatch();\n  stableError();\n  stableSetError();\n  stableSetDebugInfo();\n  stableRemove();\n  stableWarn();\n}, [stableIncludes, stableSetError, stableSetDebugInfo, stableAll, stableImport, stableImport, stableThen, stableSetDebugInfo, stableMap, stableSetDebugInfo, stableAddControl, stableNavigationControl, stableDefault, stableAddControl, stableSetDebugInfo, stableOn, stableLog, stableSetDebugInfo, stablePrompt, stableSetDrawnPolygons, stableNow, stableSetDebugInfo, stableSetIsDrawing, stableOn, stableLog, stableSetDebugInfo, stableSetDrawnPolygons, stableSlice, stableOn, stableLog, stableSetIsDrawing, stableSetDebugInfo, stableSetDebugInfo, stableOn, stableSetIsLoaded, stableSetDebugInfo, stableLog, stableOn, stableError, stableSetError, stableSetDebugInfo, stableError, stableSetError, stableSetDebugInfo, stableCatch, stableError, stableSetError, stableSetDebugInfo, stableRemove, stableWarn]);;\n\n  const startDrawing = () => {\n    console.log('🎨 Tentative de démarrage du dessin...');\n    setDebugInfo('Tentative de démarrage du dessin...');\n    \n    if (!map.current) {\n      console.error('❌ map.current est null');\n      setDebugInfo('❌ Carte non initialisée');\n      return;\n    }\n    \n    if (!draw.current) {\n      console.error('❌ draw.current est null');\n      setDebugInfo('❌ Contrôles de dessin non initialisés');\n      return;\n    }\n\n    try {\n      console.log('🔄 Changement de mode vers draw_polygon');\n      draw.current.changeMode('draw_polygon');\n      setIsDrawing(true);\n      setDebugInfo('✅ Mode dessin activé - cliquez sur la carte');\n    } catch (err) {\n      console.error('❌ Erreur lors du démarrage du dessin:', err);\n      setDebugInfo('❌ Erreur lors du démarrage du dessin');\n    }\n  };\n\n  const clearAll = () => {\n    console.log('🗑️ Suppression de tous les polygones...');\n    setDebugInfo('Suppression de tous les polygones...');\n    \n    if (draw.current && map.current) {\n      try {\n        draw.current.deleteAll();\n        setDrawnPolygons([]);\n        setDebugInfo('✅ Tous les polygones supprimés');\n      } catch (err) {\n        console.error('❌ Erreur lors de la suppression:', err);\n        setDebugInfo('❌ Erreur lors de la suppression');\n      }\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"h-96 bg-gradient-to-br from-red-50 to-orange-50 rounded-lg border border-red-200 flex items-center justify-center\">\n        <div className=\"text-center p-6\">\n          <div className=\"text-4xl mb-3\">❌</div>\n          <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Erreur de carte</h3>\n          <p className=\"text-red-600 text-sm\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Instructions très claires */}\n      <div className=\"bg-gradient-to-r from-green-50 to-blue-50 p-4 rounded-lg border border-green-200\">\n        <h3 className=\"font-semibold text-green-800 mb-3 flex items-center\">\n          🎨 Mode Dessin - Instructions Détaillées\n        </h3>\n        <div className=\"space-y-2 text-sm text-green-700\">\n          <p><strong>Étape 1:</strong> Attendez que &quot;✅ Carte chargée et prête&quot; apparaisse</p>\n          <p><strong>Étape 2:</strong> Cliquez sur &quot;🎨 Dessiner une zone&quot;</p>\n          <p><strong>Étape 3:</strong> Cliquez sur la carte pour créer des points</p>\n          <p><strong>Étape 4:</strong> Double-cliquez pour fermer le polygone</p>\n          <p><strong>Étape 5:</strong> Donnez un nom à votre quartier</p>\n        </div>\n      </div>\n\n      {/* Debug info */}\n      <div className=\"bg-yellow-50 p-3 rounded border border-yellow-200\">\n        <div className=\"text-sm font-medium text-yellow-800 mb-1\">🔍 Debug Info:</div>\n        <div className=\"text-xs text-yellow-700\">{debugInfo}</div>\n      </div>\n\n      {/* Boutons de contrôle */}\n      <div className=\"flex gap-3 flex-wrap\">\n        <button\n          onClick={startDrawing}\n          disabled={!isLoaded}\n          className={`px-4 py-2 rounded-lg font-medium transition ${\n            isDrawing\n              ? 'bg-orange-500 text-white animate-pulse'\n              : isLoaded\n              ? 'bg-green-600 text-white hover:bg-green-700'\n              : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n          }`}\n        >\n          {isDrawing ? '🎨 Dessin en cours...' : '🎨 Dessiner une zone'}\n        </button>\n        \n        <button\n          onClick={clearAll}\n          disabled={!isLoaded || drawnPolygons.length === 0}\n          className=\"px-4 py-2 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 disabled:bg-gray-300 disabled:text-gray-500 disabled:cursor-not-allowed transition\"\n        >\n          🗑️ Effacer tout\n        </button>\n\n        <div className=\"px-4 py-2 bg-gray-100 rounded-lg text-sm text-gray-600 flex items-center\">\n          📍 Zones: {drawnPolygons.length}\n        </div>\n\n        <div className=\"px-4 py-2 bg-blue-100 rounded-lg text-sm text-blue-600 flex items-center\">\n          {isLoaded ? '✅ Prêt' : '⏳ Chargement...'}\n        </div>\n      </div>\n\n      {/* Carte */}\n      <div className=\"h-96 border rounded-lg overflow-hidden relative\">\n        <div \n          ref={mapContainer} \n          className=\"w-full h-full\"\n        />\n        \n        {!isLoaded && (\n          <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-2\"></div>\n              <p className=\"text-gray-600\">Chargement de la carte...</p>\n            </div>\n          </div>\n        )}\n\n        {/* Indicateur de mode dessin */}\n        {isDrawing && (\n          <div className=\"absolute top-4 left-4 bg-orange-500 text-white px-3 py-2 rounded-lg shadow-lg animate-pulse\">\n            <div className=\"flex items-center gap-2\">\n              <div>🎨</div>\n              <span className=\"font-medium\">Mode dessin actif</span>\n            </div>\n            <p className=\"text-xs mt-1 opacity-90\">Cliquez sur la carte pour dessiner</p>\n          </div>\n        )}\n\n        {/* Instructions sur la carte */}\n        {isLoaded && !isDrawing && (\n          <div className=\"absolute bottom-4 left-4 bg-white bg-opacity-95 p-2 rounded text-xs\">\n            <div className=\"font-medium text-gray-700\">Instructions:</div>\n            <div>1. Cliquez sur &quot;🎨 Dessiner une zone&quot;</div>\n            <div>2. Cliquez sur la carte</div>\n            <div>3. Double-cliquez pour fermer</div>\n          </div>\n        )}\n      </div>\n\n      {/* Liste des polygones créés */}\n      {drawnPolygons.length > 0 && (\n        <div className=\"bg-white p-4 rounded-lg shadow border\">\n          <h3 className=\"font-semibold mb-3 text-gray-800\">📍 Quartiers créés ({drawnPolygons.length})</h3>\n          <div className=\"space-y-2\">\n            {drawnPolygons.map((polygon, index) => (\n              <div key={polygon.id} className=\"flex justify-between items-center p-3 bg-gradient-to-r from-green-50 to-blue-50 rounded border border-green-200\">\n                <div>\n                  <span className=\"font-medium text-gray-800\">{polygon.name}</span>\n                  <p className=\"text-xs text-gray-500 mt-1\">Zone #{index + 1}</p>\n                </div>\n                <button \n                  onClick={() => {\n                    setDrawnPolygons(prev => prev.filter((_, i) => i !== index));\n                    setDebugInfo(`Quartier \"${polygon.name}\" supprimé`);\n                  }}\n                  className=\"text-red-600 hover:text-red-800 text-sm font-medium px-2 py-1 rounded hover:bg-red-50 transition\"\n                >\n                  Supprimer\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/UniqueMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/WorkingMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/WorkingMapboxMap.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Expression or comma expected.","line":23,"column":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\n\nexport default function WorkingMapboxMap() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<unknown>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [drawnPolygons, setDrawnPolygons] = useState<unknown[]>([]);\n\n  \nconst stableIncludes = useCallback(() => {\n  includes();\n}, [includes]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableImport = useCallback(() => {\n  import();\n}, [import]);\n\nconst stableThen = useCallback(() => {\n  then();\n}, [then]);\n\nconst stableMap = useCallback(() => {\n  Map();\n}, [Map]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableNavigationControl = useCallback(() => {\n  NavigationControl();\n}, [NavigationControl]);\n\nconst stableImport = useCallback(() => {\n  import();\n}, [import]);\n\nconst stableThen = useCallback(() => {\n  then();\n}, [then]);\n\nconst stableDefault = useCallback(() => {\n  default();\n}, [default]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stablePrompt = useCallback(() => {\n  prompt();\n}, [prompt]);\n\nconst stableSetDrawnPolygons = useCallback(() => {\n  setDrawnPolygons();\n}, [setDrawnPolygons]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableSetDrawnPolygons = useCallback(() => {\n  setDrawnPolygons();\n}, [setDrawnPolygons]);\n\nconst stableSlice = useCallback(() => {\n  slice();\n}, [slice]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableSetIsLoaded = useCallback(() => {\n  setIsLoaded();\n}, [setIsLoaded]);\n\nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nconst stableOn = useCallback(() => {\n  on();\n}, [on]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableCatch = useCallback(() => {\n  catch();\n}, [catch]);\n\nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableSetError = useCallback(() => {\n  setError();\n}, [setError]);\n\nconst stableRemove = useCallback(() => {\n  remove();\n}, [remove]);\n\nuseEffect(() => {\n  stableIncludes();\n  stableSetError();\n  stableImport();\n  stableThen();\n  stableMap();\n  stableAddControl();\n  stableNavigationControl();\n  stableImport();\n  stableThen();\n  stableDefault();\n  stableAddControl();\n  stableOn();\n  stablePrompt();\n  stableSetDrawnPolygons();\n  stableOn();\n  stableSetDrawnPolygons();\n  stableSlice();\n  stableOn();\n  stableSetIsLoaded();\n  stableLog();\n  stableOn();\n  stableError();\n  stableSetError();\n  stableError();\n  stableSetError();\n  stableCatch();\n  stableError();\n  stableSetError();\n  stableRemove();\n}, [stableIncludes, stableSetError, stableImport, stableThen, stableMap, stableAddControl, stableNavigationControl, stableImport, stableThen, stableDefault, stableAddControl, stableOn, stablePrompt, stableSetDrawnPolygons, stableOn, stableSetDrawnPolygons, stableSlice, stableOn, stableSetIsLoaded, stableLog, stableOn, stableError, stableSetError, stableError, stableSetError, stableCatch, stableError, stableSetError, stableRemove]);;\n\n  if (error) {\n    return (\n      <div className=\"h-96 bg-gradient-to-br from-red-50 to-orange-50 rounded-lg border border-red-200 flex items-center justify-center\">\n        <div className=\"text-center p-6\">\n          <div className=\"text-4xl mb-3\">❌</div>\n          <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Erreur de carte</h3>\n          <p className=\"text-red-600 text-sm\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Instructions */}\n      <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n        <h3 className=\"font-semibold text-blue-800 mb-2\">🗺️ Instructions</h3>\n        <ul className=\"text-sm text-blue-700 space-y-1\">\n          <li>• Cliquez sur l&apos;icône polygone dans la carte</li>\n          <li>• Dessinez votre zone en cliquant sur la carte</li>\n          <li>• Double-cliquez pour fermer le polygone</li>\n          <li>• Donnez un nom à votre quartier</li>\n        </ul>\n      </div>\n\n      {/* Carte */}\n      <div className=\"h-96 border rounded-lg overflow-hidden relative\">\n        <div \n          ref={mapContainer} \n          className=\"w-full h-full\"\n        />\n        \n        {!isLoaded && (\n          <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n              <p className=\"text-gray-600\">Chargement de la carte...</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Liste des polygones créés */}\n      {drawnPolygons.length > 0 && (\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <h3 className=\"font-semibold mb-3\">📍 Quartiers créés ({drawnPolygons.length})</h3>\n          <div className=\"space-y-2\">\n            {drawnPolygons.map((polygon, index) => (\n              <div key={index} className=\"flex justify-between items-center p-2 bg-gray-50 rounded\">\n                <span className=\"font-medium\">{polygon.name}</span>\n                <button \n                  onClick={() => setDrawnPolygons(prev => prev.filter((_, i) => i !== index))}\n                  className=\"text-red-600 hover:text-red-800 text-sm\"\n                >\n                  Supprimer\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ZoneAnalysisDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LineChart' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Line' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'analyzeZone'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [analyzeZone, zoneData]","fix":{"range":[1012,1022],"text":"[analyzeZone, zoneData]"}}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":98,"column":74,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2824,2857],"text":"Analyse des données urbaines de &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2824,2857],"text":"Analyse des données urbaines de &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2824,2857],"text":"Analyse des données urbaines de &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2824,2857],"text":"Analyse des données urbaines de &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":98,"column":91,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2873,2874],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2873,2874],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2873,2874],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2873,2874],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer,\n  BarChart, Bar, PieChart, Pie, Cell, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar\n} from \"recharts\";\n\ninterface AnalysisData {\n  zone_name: string;\n  overall_score: number;\n  demographic: unknown;\n  commercial: unknown;\n  traffic: unknown;\n  environmental: unknown;\n  social: unknown;\n  recommendations: string[];\n  summary: unknown;\n}\n\ninterface ZoneAnalysisDashboardProps {\n  zoneData: unknown;\n  onClose: () => void;\n}\n\nconst COLORS = ['#10B981', '#3B82F6', '#F59E0B', '#EF4444', '#8B5CF6'];\n\nexport default function ZoneAnalysisDashboard({ zoneData, onClose }: ZoneAnalysisDashboardProps) {\n  const [analysis, setAnalysis] = useState<AnalysisData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (zoneData) {\n      analyzeZone();\n    }\n  }, [zoneData]);\n\n  const analyzeZone = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('/api/zones/analyze', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          geometry: zoneData.feature,\n          name: zoneData.name\n        }),\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        setAnalysis(result.analysis);\n        // Sauvegarder l'analyse\n        await saveAnalysis(result.analysis);\n      } else {\n        setError(result.error || 'Erreur lors de l\\'analyse');\n      }\n    } catch (err) {\n      setError('Erreur de connexion');\n      console.error('Erreur analyse:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const saveAnalysis = async (analysisData: AnalysisData) => {\n    try {\n      await fetch('/api/zones/save', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: analysisData.zone_name,\n          geometry: zoneData.feature,\n          municipality: 'Martinique',\n          analysis_data: analysisData\n        }),\n      });\n    } catch (err) {\n      console.error('Erreur sauvegarde:', err);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n        <div className=\"bg-white p-8 rounded-lg shadow-lg max-w-md w-full mx-4\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Analyse en cours...</h3>\n            <p className=\"text-gray-600\">Analyse des données urbaines de \"{zoneData?.name}\"</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n        <div className=\"bg-white p-8 rounded-lg shadow-lg max-w-md w-full mx-4\">\n          <div className=\"text-center\">\n            <div className=\"text-4xl mb-4\">❌</div>\n            <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Erreur d&apos;analyse</h3>\n            <p className=\"text-red-600 mb-4\">{error}</p>\n            <button\n              onClick={onClose}\n              className=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700\"\n            >\n              Fermer\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!analysis) return null;\n\n  // Préparer les données pour les graphiques\n  const demographicData = [\n    { age: '0-17', value: analysis.demographic.population.age_groups['0-17'] },\n    { age: '18-35', value: analysis.demographic.population.age_groups['18-35'] },\n    { age: '36-55', value: analysis.demographic.population.age_groups['36-55'] },\n    { age: '55+', value: analysis.demographic.population.age_groups['55+'] }\n  ];\n\n  const commercialData = [\n    { category: 'Commerce', value: analysis.commercial.businesses.categories['Commerce de proximité'] },\n    { category: 'Restaurants', value: analysis.commercial.businesses.categories['Restaurants'] },\n    { category: 'Services', value: analysis.commercial.businesses.categories['Services'] },\n    { category: 'Santé', value: analysis.commercial.businesses.categories['Santé'] },\n    { category: 'Éducation', value: analysis.commercial.businesses.categories['Éducation'] }\n  ];\n\n  const radarData = [\n    { subject: 'Démographie', A: analysis.demographic.population.density / 2 },\n    { subject: 'Commerce', A: analysis.commercial.businesses.economic_impact.Attractivité },\n    { subject: 'Trafic', A: analysis.traffic.pedestrian_traffic.Accessibilité },\n    { subject: 'Environnement', A: analysis.environmental.green_spaces['Qualité de l\\'air'] },\n    { subject: 'Social', A: analysis.social.community['Cohésion sociale'] }\n  ];\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-lg max-w-6xl w-full max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-6 rounded-t-lg\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-2xl font-bold\">📊 Analyse Urbaine</h2>\n              <p className=\"text-blue-100\">Zone: {analysis.zone_name}</p>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"text-white hover:text-gray-200 text-2xl\"\n            >\n              ×\n            </button>\n          </div>\n          <div className=\"mt-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-3xl font-bold\">{analysis.overall_score}/100</div>\n              <div>\n                <div className=\"text-sm text-blue-100\">Score Global</div>\n                <div className=\"w-32 bg-blue-200 rounded-full h-2\">\n                  <div \n                    className=\"bg-white h-2 rounded-full\" \n                    style={{ width: `${analysis.overall_score}%` }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Contenu */}\n        <div className=\"p-6 space-y-6\">\n          {/* Graphiques principaux */}\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {/* Démographie */}\n            <div className=\"bg-white p-4 rounded-lg border\">\n              <h3 className=\"font-semibold mb-3 text-gray-800\">👥 Démographie</h3>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Population totale:</span>\n                  <span className=\"font-medium\">{analysis.demographic.population.total.toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Densité:</span>\n                  <span className=\"font-medium\">{analysis.demographic.population.density} hab/km²</span>\n                </div>\n              </div>\n              <div className=\"h-48 mt-4\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={demographicData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"age\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"value\" fill=\"#10B981\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n\n            {/* Commerce */}\n            <div className=\"bg-white p-4 rounded-lg border\">\n              <h3 className=\"font-semibold mb-3 text-gray-800\">🏪 Commerce</h3>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Entreprises:</span>\n                  <span className=\"font-medium\">{analysis.commercial.businesses.total}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>CA estimé:</span>\n                  <span className=\"font-medium\">{(analysis.commercial.businesses.economic_impact['Chiffre d\\'affaires estimé'] / 1000000).toFixed(1)}M€</span>\n                </div>\n              </div>\n              <div className=\"h-48 mt-4\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie data={commercialData} dataKey=\"value\" outerRadius={80} label>\n                      {commercialData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n          </div>\n\n          {/* Radar Chart */}\n          <div className=\"bg-white p-4 rounded-lg border\">\n            <h3 className=\"font-semibold mb-3 text-gray-800\">📈 Analyse Multidimensionnelle</h3>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <RadarChart data={radarData}>\n                  <PolarGrid />\n                  <PolarAngleAxis dataKey=\"subject\" />\n                  <PolarRadiusAxis angle={90} domain={[0, 100]} />\n                  <Radar name=\"Score\" dataKey=\"A\" stroke=\"#3B82F6\" fill=\"#3B82F6\" fillOpacity={0.3} />\n                  <Tooltip />\n                </RadarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Recommandations */}\n          <div className=\"bg-gradient-to-r from-green-50 to-blue-50 p-4 rounded-lg border border-green-200\">\n            <h3 className=\"font-semibold mb-3 text-green-800\">💡 Recommandations</h3>\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"font-medium text-green-700 mb-2\">Points forts</h4>\n                <ul className=\"text-sm text-green-600 space-y-1\">\n                  {analysis.summary['Points forts'].map((point: string, index: number) => (\n                    <li key={index}>• {point}</li>\n                  ))}\n                </ul>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-green-700 mb-2\">Améliorations</h4>\n                <ul className=\"text-sm text-green-600 space-y-1\">\n                  {analysis.summary['Points d\\'amélioration'].map((point: string, index: number) => (\n                    <li key={index}>• {point}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          {/* Détails par catégorie */}\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-gray-800 mb-2\">🚗 Trafic</h4>\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                <div>Véhicules/jour: {analysis.traffic.vehicular_traffic['Trafic moyen/jour'].toLocaleString()}</div>\n                <div>Piétons/jour: {analysis.traffic.pedestrian_traffic['Piétons/jour'].toLocaleString()}</div>\n                <div>Congestion: {analysis.traffic.vehicular_traffic.Congestion}%</div>\n              </div>\n            </div>\n\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-gray-800 mb-2\">🌱 Environnement</h4>\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                <div>Espaces verts: {analysis.environmental.green_spaces['Espaces verts (%)']}%</div>\n                <div>Qualité air: {analysis.environmental.green_spaces['Qualité de l\\'air']}/100</div>\n                <div>Éclairage: {analysis.environmental.infrastructure['Éclairage public']}%</div>\n              </div>\n            </div>\n\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-gray-800 mb-2\">🤝 Social</h4>\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                <div>Événements/an: {analysis.social.community['Événements communautaires/an']}</div>\n                <div>Associations: {analysis.social.community.Associations}</div>\n                <div>Cohésion: {analysis.social.community['Cohésion sociale']}/100</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ZoneManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/feedback/Toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/home/CategoryGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/home/CommunityBlock.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/home/FlashPromos.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/home/FlashPromos.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/home/NavigationHeader.tsx","messages":[{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":8,"column":9,"nodeType":"JSXOpeningElement","endLine":8,"endColumn":171}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { colors } from \"@/lib/kanpa-theme\";\n\nexport default function NavigationHeader() {\n  return (\n    <nav className=\"w-full bg-white shadow-sm\">\n      <div className=\"max-w-7xl mx-auto flex items-center justify-between px-3 sm:px-4 md:px-6 py-2 sm:py-3\">\n        {/* Logo */}\n        <a href=\"/\" className={`text-base sm:text-lg font-bold transition hover:opacity-80`} style={{ color: colors.primary }} aria-label=\"Kanpanya - Retour à l'accueil\">\n          Kanpanya\n        </a>\n\n        {/* Menu desktop */}\n        <nav className={`hidden sm:flex items-center gap-4 lg:gap-6 font-medium`} style={{ color: colors.secondary }} aria-label=\"Navigation principale\">\n          <a href=\"#\" className={`text-sm lg:text-base transition hover:underline focus:outline-none focus:ring-2 focus:ring-offset-2 rounded px-1`} style={{ ':hover': { color: colors.primary }, ':focus': { color: colors.primary } }}>Accueil</a>\n          <a href=\"#\" className={`text-sm lg:text-base transition hover:underline focus:outline-none focus:ring-2 focus:ring-offset-2 rounded px-1`} style={{ ':hover': { color: colors.primary }, ':focus': { color: colors.primary } }}>Commerçants</a>\n          <a href=\"#\" className={`text-sm lg:text-base transition hover:underline focus:outline-none focus:ring-2 focus:ring-offset-2 rounded px-1`} style={{ ':hover': { color: colors.primary }, ':focus': { color: colors.primary } }}>Offres</a>\n          <a href=\"#\" className={`text-sm lg:text-base transition hover:underline focus:outline-none focus:ring-2 focus:ring-offset-2 rounded px-1`} style={{ ':hover': { color: colors.primary }, ':focus': { color: colors.primary } }}>Plus</a>\n        </nav>\n\n        {/* Bouton \"Ma carte\" */}\n        <button \n          className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-4 py-1.5 sm:py-2 rounded-xl shadow-md font-semibold bg-white border border-gray-200 text-xs sm:text-sm transition hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500\"\n          style={{ color: colors.secondary }}\n          aria-label=\"Voir ma carte de points Kanpanya\"\n        >\n          <span style={{ color: colors.tertiary }} aria-hidden=\"true\">▢</span>\n          <span className=\"hidden xs:inline\">Ma carte</span>\n        </button>\n      </div>\n    </nav>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/home/PartnerSection.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/home/PartnerSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/home/ScratchSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/home/StatsSection.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/home/StatsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/macro/GroupsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/macro/IASection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/macro/MapSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'map' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":11,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'error'. Either exclude it or remove the dependency array. Outer scope values like 'error' aren't valid dependencies because mutating them doesn't re-render the component.","line":16,"column":4,"nodeType":"ArrayExpression","endLine":16,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[453,460],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'Map'. Either exclude it or remove the dependency array. Outer scope values like 'Map' aren't valid dependencies because mutating them doesn't re-render the component.","line":20,"column":4,"nodeType":"ArrayExpression","endLine":20,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[514,519],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addControl'. Either exclude it or remove the dependency array. Outer scope values like 'addControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":24,"column":4,"nodeType":"ArrayExpression","endLine":24,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[587,599],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'NavigationControl'. Either exclude it or remove the dependency array. Outer scope values like 'NavigationControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":28,"column":4,"nodeType":"ArrayExpression","endLine":28,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[681,700],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'MapboxGeocoder'. Either exclude it or remove the dependency array. Outer scope values like 'MapboxGeocoder' aren't valid dependencies because mutating them doesn't re-render the component.","line":32,"column":4,"nodeType":"ArrayExpression","endLine":32,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[776,792],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addControl'. Either exclude it or remove the dependency array. Outer scope values like 'addControl' aren't valid dependencies because mutating them doesn't re-render the component.","line":36,"column":4,"nodeType":"ArrayExpression","endLine":36,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[860,872],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'remove'. Either exclude it or remove the dependency array. Outer scope values like 'remove' aren't valid dependencies because mutating them doesn't re-render the component.","line":40,"column":4,"nodeType":"ArrayExpression","endLine":40,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[932,940],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a duplicate dependency: 'stableAddControl'. Either omit it or remove the dependency array.","line":50,"column":4,"nodeType":"ArrayExpression","endLine":50,"endColumn":125,"suggestions":[{"desc":"Update the dependencies array to be: [stableError, stableMap, stableAddControl, stableNavigationControl, stableMapboxGeocoder, stableRemove]","fix":{"range":[1114,1235],"text":"[stableError, stableMap, stableAddControl, stableNavigationControl, stableMapboxGeocoder, stableRemove]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";\n\nexport default function MapSection() {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<mapboxgl.Map | null>(null);\n\n  \nconst stableError = useCallback(() => {\n  error();\n}, [error]);\n\nconst stableMap = useCallback(() => {\n  Map();\n}, [Map]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableNavigationControl = useCallback(() => {\n  NavigationControl();\n}, [NavigationControl]);\n\nconst stableMapboxGeocoder = useCallback(() => {\n  MapboxGeocoder();\n}, [MapboxGeocoder]);\n\nconst stableAddControl = useCallback(() => {\n  addControl();\n}, [addControl]);\n\nconst stableRemove = useCallback(() => {\n  remove();\n}, [remove]);\n\nuseEffect(() => {\n  stableError();\n  stableMap();\n  stableAddControl();\n  stableNavigationControl();\n  stableMapboxGeocoder();\n  stableAddControl();\n  stableRemove();\n}, [stableError, stableMap, stableAddControl, stableNavigationControl, stableMapboxGeocoder, stableAddControl, stableRemove]);;\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 py-6\">\n      <div ref={mapContainer} className=\"w-full h-[500px] rounded-lg shadow border\" />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/modal/ModalContext.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Identifier expected.","line":94,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { createContext, useContext, useCallback, useState, useRef } from 'react';\nimport { createPortal } from 'react-dom';\n\ntype ModalNode = React.ReactNode;\n\ninterface ModalContextType {\n  open: (content: ModalNode) => void;\n  replace: (content: ModalNode) => void;\n  close: () => void;\n  isOpen: boolean;\n}\n\nconst ModalContext = createContext<ModalContextType | null>(null);\n\nexport function useModal() {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error('useModal doit être utilisé à l\\'intérieur d\\'un <ModalProvider>');\n  }\n  return context;\n}\n\ninterface ModalProviderProps {\n  children: React.ReactNode;\n}\n\nexport function ModalProvider({ children }: ModalProviderProps) {\n  const [content, setContent] = useState<ModalNode | null>(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const [key, setKey] = useState(0);\n  const isReplacingRef = useRef(false);\n\n  const close = useCallback(() => {\n    console.log('🔒 Modal fermé');\n    setContent(null);\n    setIsOpen(false);\n  }, []);\n\n  const open = useCallback((node: ModalNode) => {\n    console.log('🔓 Modal ouvert avec:', node);\n    setContent(node);\n    setIsOpen(true);\n    setKey(prev => prev + 1); // Force remount pour éviter les conflits\n  }, []);\n\n  const replace = useCallback((node: ModalNode) => {\n    if (isReplacingRef.current) {\n      console.log('⚠️ Replace ignoré - déjà en cours');\n      return;\n    }\n    \n    console.log('🔄 Modal remplacé par:', node);\n    isReplacingRef.current = true;\n    setContent(node);\n    setKey(prev => prev + 1); // Force remount propre\n    \n    // Reset le flag après le prochain tick\n    requestAnimationFrame(() => {\n      isReplacingRef.current = false;\n    });\n  }, []);\n\n  const contextValue: ModalContextType = {\n    open,\n    replace,\n    close,\n    isOpen\n  };\n\n  return (\n    <ModalContext.Provider value={contextValue}>\n      {children}\n      <ModalRoot \n        isOpen={isOpen} \n        content={content} \n        onClose={close}\n        key={key}\n      />\n    </ModalContext.Provider>\n  );\n}\n\ninterface ModalRootProps {\n  isOpen: boolean;\n  content: ModalNode | null;\n  onClose: () => void;\n  key: number;\n}\n\nfunction ModalRoot({ isOpen, content, onClose, key }: ModalRootProps) {\n  const [mounted, setMounted] = useState(false);\n\n  React.\nconst stableSetMounted = useCallback(() => {\n  setMounted();\n}, [setMounted]);\n\nconst stableSetMounted = useCallback(() => {\n  setMounted();\n}, [setMounted]);\n\nuseEffect(() => {\n  stableSetMounted();\n  stableSetMounted();\n}, [stableSetMounted, stableSetMounted]);;\n\n  React.useEffect(() => {\n    if (isOpen) {\n      document.documentElement.style.overflow = 'hidden';\n      document.body.classList.add('modal-open');\n    } else {\n      document.documentElement.style.overflow = '';\n      document.body.classList.remove('modal-open');\n    }\n\n    return () => {\n      document.documentElement.style.overflow = '';\n      document.body.classList.remove('modal-open');\n    };\n  }, [isOpen]);\n\n  React.useEffect(() => {\n    console.log('📝 ModalRoot: contenu changé vers:', content);\n  }, [content]);\n\n  if (!mounted || !isOpen || !content) {\n    return null;\n  }\n\n  const modalContent = (\n    <div \n      className=\"fixed inset-0 z-[9999] flex items-center justify-center\"\n      onClick={(e) => {\n        if (e.target === e.currentTarget) {\n          onClose();\n        }\n      }}\n    >\n      {/* Backdrop */}\n      <div className=\"absolute inset-0 bg-black/60 backdrop-blur-sm\" />\n      \n      {/* Modal Content */}\n      <div \n        className=\"relative z-[10000] w-[min(92vw,720px)] max-h-[90vh] overflow-y-auto bg-white rounded-2xl shadow-2xl p-6 mx-4\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {content}\n      </div>\n    </div>\n  );\n\n  // Portal vers le body pour éviter les problèmes de z-index\n  return createPortal(modalContent, document.body);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/modal/ModalManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/modal/ModalRoot.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/modals/QuizModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":102,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useModal } from \"@/components/modal/ModalManager\";\n\nexport default function QuizModal() {\n  const { close } = useModal();\n  const [selected, setSelected] = useState<string | null>(null);\n  const [validated, setValidated] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n\n  const questions = [\n    {\n      id: \"q1\",\n      text: \"Quelle est une bonne source de protéines végétales ?\",\n      options: [\n        { id: \"banane\", text: \"Banane\" },\n        { id: \"concombre\", text: \"Concombre\" },\n        { id: \"lentilles\", text: \"Lentilles\" }, // ✅ bonne réponse\n        { id: \"pdt\", text: \"Pomme de terre\" },\n      ],\n      correct: \"lentilles\",\n      points: 10\n    },\n    {\n      id: \"q2\", \n      text: \"Quel est le code couleur principal de Kanpanya ?\",\n      options: [\n        { id: \"red\", text: \"#FF0000\" },\n        { id: \"teal\", text: \"#14B8A6\" }, // ✅ bonne réponse\n        { id: \"blue\", text: \"#3B82F6\" },\n        { id: \"green\", text: \"#10B981\" },\n      ],\n      correct: \"teal\",\n      points: 10\n    },\n    {\n      id: \"q3\",\n      text: \"Combien de points gagnez-vous en regardant une vidéo ?\",\n      options: [\n        { id: \"3\", text: \"3 points\" },\n        { id: \"5\", text: \"5 points\" }, // ✅ bonne réponse\n        { id: \"10\", text: \"10 points\" },\n        { id: \"15\", text: \"15 points\" },\n      ],\n      correct: \"5\",\n      points: 10\n    }\n  ];\n\n  const currentQ = questions[currentQuestion];\n  const isLastQuestion = currentQuestion === questions.length - 1;\n\n  const handleValidate = () => {\n    if (selected === currentQ.correct) {\n      setScore(prev => prev + currentQ.points);\n    }\n    setValidated(true);\n  };\n\n  const handleNext = () => {\n    if (isLastQuestion) {\n      // Quiz terminé\n      console.log(\"Quiz terminé:\", { score: score > 0 ? 1 : 0, total: questions.length, points: score });\n      close();\n    } else {\n      // Passer à la question suivante\n      setCurrentQuestion(prev => prev + 1);\n      setSelected(null);\n      setValidated(false);\n    }\n  };\n\n  const handleClose = () => {\n    close();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-teal-600 font-bold text-lg\">Quiz Nutrition</h2>\n        <span className=\"text-sm text-gray-500\">\n          Question {currentQuestion + 1} / {questions.length}\n        </span>\n      </div>\n\n      {/* Question */}\n      <motion.p \n        key={currentQuestion}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center font-semibold text-lg\"\n      >\n        {currentQ.text}\n      </motion.p>\n\n      {/* Options */}\n      <div className=\"space-y-3\">\n        {currentQ.options.map((option, index) => (\n          <QuizOption\n            key={option.id}\n            text={option.text}\n            onClick={() => !validated && setSelected(option.id)}\n            status={\n              !validated ? \"default\" :\n              option.id === currentQ.correct ? \"correct\" :\n              option.id === selected ? \"incorrect\" : \"default\"\n            }\n          />\n        ))}\n      </div>\n\n      {/* Actions */}\n      <div className=\"flex gap-3 justify-end\">\n        <button\n          onClick={handleClose}\n          className=\"btn btn-ghost\"\n        >\n          Fermer\n        </button>\n        {!validated ? (\n          <button\n            onClick={handleValidate}\n            disabled={!selected}\n            className=\"btn btn-primary\"\n          >\n            Valider\n          </button>\n        ) : (\n          <button\n            onClick={handleNext}\n            className=\"btn btn-primary\"\n          >\n            {isLastQuestion ? \"Terminer\" : \"Suivant\"}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Composant QuizOption\ninterface OptionProps {\n  text: string;\n  onClick: () => void;\n  status?: \"default\" | \"correct\" | \"incorrect\";\n}\n\nconst QuizOption = ({ text, status = \"default\", onClick }: OptionProps) => {\n  const base = \"w-full py-3 px-4 rounded-xl border-2 font-semibold transition-all duration-200 focus-visible:ring-2 focus-visible:ring-primary/30 focus-visible:ring-offset-2 focus-visible:ring-offset-white\";\n  \n  const variants = {\n    default: \"border-gray-200 bg-white hover:border-teal-300 hover:bg-teal-50\",\n    correct: \"border-green-500 bg-green-50 text-green-700\",\n    incorrect: \"border-red-500 bg-red-50 text-red-700\"\n  };\n\n  return (\n    <motion.button\n      initial={{ opacity: 0, x: -20 }}\n      animate={{ opacity: 1, x: 0 }}\n      transition={{ delay: 0.1 }}\n      whileHover={{ scale: 1.02 }}\n      whileTap={{ scale: 0.98 }}\n      onClick={onClick}\n      className={`${base} ${variants[status]}`}\n    >\n      {text}\n    </motion.button>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/modals/QuizResultModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useModal' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useModal } from \"@/components/modal/ModalManager\";\nimport { useRouter } from \"next/navigation\";\nimport { useScratchAvailability } from \"@/hooks/useScratchAvailability\";\n// Composants UI inline pour éviter les problèmes d'import\nconst Button = ({ children, onClick, className = \"\", variant = \"default\" }: unknown) => {\n  const baseClasses = \"inline-flex items-center justify-center rounded-lg font-medium transition-colors disabled:pointer-events-none disabled:opacity-50\";\n  const variantClasses = {\n    default: \"bg-[#17BFA0] text-white hover:bg-[#14a58d]\",\n    secondary: \"bg-gray-100 text-gray-900 hover:bg-gray-200\",\n    outline: \"border border-gray-300 text-gray-700 bg-white hover:bg-gray-50\",\n  };\n  \n  return (\n    <button \n      className={`${baseClasses} ${variantClasses[variant]} ${className}`}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n};\n\nconst Card = ({ children, className = \"\" }: unknown) => (\n  <div className={`rounded-xl border bg-white shadow-sm ${className}`}>\n    {children}\n  </div>\n);\n\nconst CardHeader = ({ children, className = \"\" }: unknown) => (\n  <div className={`flex flex-col space-y-1.5 p-6 ${className}`}>\n    {children}\n  </div>\n);\n\nconst CardTitle = ({ children, className = \"\" }: unknown) => (\n  <div className={`font-semibold leading-none tracking-tight ${className}`}>\n    {children}\n  </div>\n);\n\nconst CardDescription = ({ children, className = \"\" }: unknown) => (\n  <div className={`text-sm text-gray-500 ${className}`}>\n    {children}\n  </div>\n);\n\nconst CardContent = ({ children, className = \"\" }: unknown) => (\n  <div className={`p-6 pt-0 ${className}`}>\n    {children}\n  </div>\n);\n\nimport { Trophy, Gift, ArrowRight } from \"lucide-react\";\n\nfunction QuizResultModal({ reward, score, total }: { \n  reward: string; \n  score: number; \n  total: number; \n}) {\n  const { pop } = useModals();\n  const router = useRouter();\n  const { activate } = useScratchAvailability();\n  \n  const percentage = (score / total) * 100;\n  const isGoodScore = percentage >= 60;\n  \n  const handleGoToScratch = () => {\n    // Activer un ticket basé sur le score du quiz\n    const points = Math.floor(score * 5); // 5 points par bonne réponse\n    activate({\n      quizId: `quiz-${Date.now()}`,\n      points,\n      label: `+${points} points (Quiz: ${score}/${total})`\n    });\n    \n    // Fermer le modal et rediriger vers la page scratch\n    close();\n    router.push('/scratch');\n  };\n  \n  return (\n    <div className=\"p-8 max-w-md mx-auto\">\n      <Card>\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center mb-4\">\n            <Trophy className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl\">\n            {isGoodScore ? \"Excellent ! 🎉\" : \"Bien joué ! 👏\"}\n          </CardTitle>\n          <CardDescription>\n            Vous avez obtenu {score} bonnes réponses sur {total}\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {/* Score Display */}\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-[#17BFA0] mb-2\">\n              {percentage.toFixed(0)}%\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              {isGoodScore ? \"Score excellent !\" : \"Continuez comme ça !\"}\n            </div>\n          </div>\n\n          {/* Reward Preview */}\n          <div className=\"bg-gradient-to-r from-[#17BFA0]/10 to-[#BDF2D0]/10 rounded-lg p-4 text-center\">\n            <Gift className=\"w-8 h-8 text-[#17BFA0] mx-auto mb-2\" />\n            <div className=\"font-semibold text-[#212E40]\">Votre récompense</div>\n            <div className=\"text-sm text-gray-600 mt-1\">{reward}</div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-3\">\n            <Button \n              onClick={handleGoToScratch}\n              className=\"w-full bg-[#17BFA0] hover:bg-[#14a58d] text-white\"\n            >\n              <Gift className=\"w-4 h-4 mr-2\" />\n              Gratter mon ticket\n              <ArrowRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n            \n            <Button \n              onClick={pop}\n              variant=\"outline\"\n              className=\"w-full\"\n            >\n              Continuer l&apos;exploration\n            </Button>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"text-center text-xs text-gray-500\">\n            Votre ticket sera disponible sur la page des cartes à gratter\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default QuizResultModal;\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/modals/QuizResultModalSimple.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'close' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":6,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useModal } from \"@/components/modal/ModalManager\";\nimport ScratchCard from \"@/components/ScratchCard\";\n\nfunction QuizResultModalSimple({ reward }: { reward: string }) {\n  const { close } = useModal();\n  \n  return (\n    <div className=\"p-8\">\n      <h2 className=\"text-2xl font-bold mb-4\">Bravo 🎉</h2>\n      <p className=\"mb-6\">Gratte pour découvrir ton lot :</p>\n\n      <ScratchCard\n        reward={reward}\n        onComplete={() => {\n          console.log(\"Scratch terminé !\");\n          // ici on envoie à Supabase + confettis\n        }}\n      />\n      \n      <div className=\"mt-6 flex gap-3\">\n        <button \n          className=\"btn-secondary transition-transform duration-150 active:scale-95\" \n          onClick={pop}\n        >\n          Fermer\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default QuizResultModalSimple;\n\n\n\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/modals/QuizResultsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'close' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":10,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useModal } from \"@/components/modal/ModalManager\";\nimport { ScratchCard } from \"@/components/ScratchCard\";\nimport type { QuizResult, ScratchReward } from \"@/types\";\n\nexport default function QuizResultsModal({ results }: { results: QuizResult }) {\n  const { close } = useModal();\n  const [scratchReward, setScratchReward] = React.useState<ScratchReward | null>(null);\n  const [showReward, setShowReward] = React.useState(false);\n\n  // Calculer la récompense basée sur le score\n  React.useEffect(() => {\n    const percentage = (results.score / results.total) * 100;\n    let newReward: ScratchReward;\n\n    if (percentage >= 80) {\n      // Excellent : 20% de chance de coupon, 80% de points bonus\n      if (Math.random() < 0.2) {\n        newReward = {\n          type: 'coupon',\n          label: '🎉 15% de réduction !',\n          code: 'QUIZ15'\n        };\n      } else {\n        newReward = {\n          type: 'points',\n          amount: 50,\n          label: '🌟 +50 points bonus !'\n        };\n      }\n    } else if (percentage >= 60) {\n      // Bon : 10% de chance de coupon, 90% de points\n      if (Math.random() < 0.1) {\n        newReward = {\n          type: 'coupon',\n          label: '🎊 10% de réduction !',\n          code: 'QUIZ10'\n        };\n      } else {\n        newReward = {\n          type: 'points',\n          amount: 25,\n          label: '👍 +25 points bonus !'\n        };\n      }\n    } else {\n      // Faible : 5% de chance de coupon, 30% de points minimes, 65% de rien\n      if (Math.random() < 0.05) {\n        newReward = {\n          type: 'coupon',\n          label: '🍀 5% de réduction !',\n          code: 'QUIZ5'\n        };\n      } else if (Math.random() < 0.35) {\n        newReward = {\n          type: 'points',\n          amount: 10,\n          label: '💪 +10 points bonus !'\n        };\n      } else {\n        newReward = {\n          type: 'points',\n          amount: 0,\n          label: '😔 Pas de bonus cette fois...'\n        };\n      }\n    }\n\n    setScratchReward(newReward);\n  }, [results]);\n\n  const handleScratchReveal = () => {\n    setShowReward(true);\n    // Animation de confettis si c'est une bonne récompense\n    if (scratchReward && (scratchReward.type === 'coupon' || scratchReward.amount > 0)) {\n      import('canvas-confetti').then(confetti => {\n        confetti.default({\n          particleCount: 100,\n          spread: 70,\n          origin: { y: 0.6 },\n          colors: scratchReward.type === 'coupon' ? ['#FFD700', '#FFA500'] : ['#10B981', '#34D399']\n        });\n      });\n      \n    }\n  };\n\n  const getScoreEmoji = () => {\n    const percentage = (results.score / results.total) * 100;\n    if (percentage >= 80) return '🏆';\n    if (percentage >= 60) return '🥈';\n    if (percentage >= 40) return '🥉';\n    return '💪';\n  };\n\n  const getScoreMessage = () => {\n    const percentage = (results.score / results.total) * 100;\n    if (percentage >= 80) return 'Excellent !';\n    if (percentage >= 60) return 'Bien joué !';\n    if (percentage >= 40) return 'Pas mal !';\n    return 'Continuez !';\n  };\n\n  return (\n    <div className=\"space-y-6 p-8\">\n      {/* Header avec score */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <div className=\"text-6xl mb-4\">{getScoreEmoji()}</div>\n        <h2 className=\"text-3xl font-bold text-gray-800 mb-2\">\n          {getScoreMessage()}\n        </h2>\n        <div className=\"text-xl text-gray-600\">\n          <span className=\"font-bold text-teal-600\">{results.score}</span> / {results.total} bonnes réponses\n        </div>\n        <div className=\"text-lg text-gray-500 mt-2\">\n          +{results.points} points de base\n        </div>\n      </motion.div>\n\n      {/* Scratch Card */}\n      <motion.div\n        initial={{ opacity: 0, scale: 0.8 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ delay: 0.5 }}\n        className=\"flex justify-center\"\n      >\n        <ScratchCard\n          reward={scratchReward || { type: 'points', amount: 0, label: 'Grattez pour découvrir votre récompense !' }}\n          onReveal={handleScratchReveal}\n          width={300}\n          height={200}\n          coverText=\"🎁 GRATTEZ ICI 🎁\"\n        />\n      </motion.div>\n\n      {/* Pop-up de récompense */}\n      {showReward && scratchReward && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.5, y: 50 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          transition={{ type: \"spring\", stiffness: 300, damping: 20 }}\n          className={`relative p-6 rounded-2xl bg-gradient-to-r ${\n            scratchReward.type === 'coupon' ? 'from-yellow-400 to-orange-500' :\n            scratchReward.amount > 25 ? 'from-green-400 to-emerald-500' :\n            scratchReward.amount > 0 ? 'from-blue-400 to-cyan-500' :\n            'from-gray-300 to-gray-400'\n          } text-white text-center shadow-2xl`}\n        >\n          <motion.div\n            initial={{ rotate: -10 }}\n            animate={{ rotate: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"text-4xl mb-3\"\n          >\n            {scratchReward.type === 'coupon' ? '🎉' : \n             scratchReward.amount > 0 ? '🌟' : '😔'}\n          </motion.div>\n          \n          <h3 className=\"text-xl font-bold mb-2\">\n            {scratchReward.label}\n          </h3>\n          \n          {scratchReward.type === 'coupon' && scratchReward.code && (\n            <div className=\"text-lg font-mono bg-white/20 rounded-lg p-2 mt-2\">\n              Code: {scratchReward.code}\n            </div>\n          )}\n          \n          {scratchReward.type === 'points' && scratchReward.amount > 0 && (\n            <div className=\"text-2xl font-bold\">\n              +{scratchReward.amount} points\n            </div>\n          )}\n        </motion.div>\n      )}\n\n      {/* Actions */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 1 }}\n        className=\"flex gap-3 justify-center\"\n      >\n        <button\n          onClick={pop}\n          className=\"px-6 py-3 bg-teal-600 text-white rounded-xl font-semibold hover:bg-teal-700 transition-all duration-150 shadow-lg active:scale-95\"\n        >\n          Continuer\n        </button>\n      </motion.div>\n\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/modals/VideoEndModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'replace' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":7,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'log'. Either exclude it or remove the dependency array. Outer scope values like 'log' aren't valid dependencies because mutating them doesn't re-render the component.","line":12,"column":4,"nodeType":"ArrayExpression","endLine":12,"endColumn":9,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[250,255],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect } from \"react\";\nimport { useModal } from \"@/components/modal/ModalManager\";\n\nexport default function VideoEndModal() {\n  const { replace, close } = useModal();\n  \n  \nconst stableLog = useCallback(() => {\n  log();\n}, [log]);\n\nuseEffect(() => {\n  stableLog();\n}, [stableLog]);;\n\n  const handleStartQuiz = () => {\n    console.log(\"🧠 Démarrage du quiz - remplacement par QuizModal\");\n    // Pour l'instant, on va juste fermer le modal\n    close();\n  };\n\n  const handleClose = () => {\n    console.log(\"❌ Fermeture du modal\");\n    close();\n  };\n\n  return (\n    <div className=\"text-center space-y-6 p-4\">\n      <h2 className=\"text-2xl font-bold text-gray-800\">Vidéo terminée !</h2>\n      <p className=\"text-lg text-gray-600\">\n        Vous avez gagné <span className=\"text-green-600 font-semibold\">5 points</span> 🎉\n      </p>\n      \n      <div className=\"flex gap-3 justify-center\">\n        <button\n          onClick={handleClose}\n          className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300\"\n        >\n          Fermer\n        </button>\n        <button\n          onClick={handleStartQuiz}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n        >\n          Lancer le quiz nutrition\n        </button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/modals/VideoModal.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/modals/VideoModal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleVideoEnd'. Either include it or remove the dependency array.","line":39,"column":6,"nodeType":"ArrayExpression","endLine":39,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [isPlaying, duration, handleVideoEnd]","fix":{"range":[1048,1069],"text":"[isPlaying, duration, handleVideoEnd]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Play, X, Pause } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useModal } from \"@/components/modal/ModalManager\";\nimport { useState, useEffect } from \"react\";\n\ninterface VideoModalProps {\n  onEnd?: () => void;\n}\n\nexport default function VideoModal({ onEnd }: VideoModalProps = {}) {\n  const { close } = useModal();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [duration] = useState(15); // Durée mock de 15 secondes\n\n  // Effet pour simuler la lecture de la vidéo\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    \n    if (isPlaying) {\n      interval = setInterval(() => {\n        setProgress(prev => {\n          const newProgress = prev + 1;\n          if (newProgress >= duration) {\n            setIsPlaying(false);\n            handleVideoEnd();\n            return duration;\n          }\n          return newProgress;\n        });\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isPlaying, duration]);\n\n  const handleVideoEnd = () => {\n    console.log(\"🎬 Vidéo terminée, appel du callback onEnd\");\n    if (onEnd) {\n      onEnd();\n    }\n  };\n\n  const togglePlay = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const handleClose = () => {\n    close();\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-teal-700 font-bold text-lg\">🎥 Mutuelle Locale - Vidéo Interactive</h2>\n        <button\n          onClick={handleClose}\n          className=\"btn btn-ghost btn-icon\"\n          aria-label=\"Fermer la vidéo\"\n        >\n          <X className=\"h-4 w-4\" />\n        </button>\n      </div>\n\n      {/* Zone vidéo avec lecteur mock */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"relative bg-gradient-to-br from-gray-800 to-gray-900 rounded-2xl aspect-video overflow-hidden\"\n      >\n        {/* Contenu vidéo mock */}\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"text-center text-white\">\n            <div className=\"w-32 h-20 bg-teal-600/20 rounded-lg flex items-center justify-center mb-4 mx-auto\">\n              <span className=\"text-2xl\">🎥</span>\n            </div>\n            <p className=\"text-sm opacity-80\">Vidéo Mutuelle Locale</p>\n          </div>\n        </div>\n\n        {/* Contrôles de lecture */}\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <button\n            onClick={togglePlay}\n            className=\"w-20 h-20 bg-teal-600/90 backdrop-blur-sm rounded-full flex items-center justify-center mx-auto shadow-2xl hover:bg-teal-700/90 transition-colors z-10 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500\"\n            style={{ zIndex: 999 }}\n            aria-label={isPlaying ? \"Mettre en pause\" : \"Lire la vidéo\"}\n          >\n            {isPlaying ? (\n              <Pause className=\"w-8 h-8 text-white\" />\n            ) : (\n              <Play className=\"w-8 h-8 text-white ml-1\" />\n            )}\n          </button>\n        </div>\n\n        {/* Barre de progression */}\n        <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4\">\n          <div className=\"mb-2\">\n            <div className=\"w-full bg-gray-600 rounded-full h-2\">\n              <div \n                className=\"bg-teal-500 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${(progress / duration) * 100}%` }}\n              />\n            </div>\n          </div>\n          <div className=\"flex justify-between text-white text-sm\">\n            <span>{formatTime(progress)}</span>\n            <span>{formatTime(duration)}</span>\n          </div>\n        </div>\n      </motion.div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/offers/FlashOfferDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/scratch/ScratchCardFixed.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/scratch/ScratchCardStableV3.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'goldenTicketChance' is assigned a value but never used. Allowed unused args must match /^_/u.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is assigned a value but never used. Allowed unused args must match /^_/u.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isInitialized' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":58,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'getWinVariations' function makes the dependencies of useCallback Hook (at line 143) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'getWinVariations' in its own useCallback() Hook.","line":68,"column":9,"nodeType":"VariableDeclarator","endLine":76,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'getLoseVariations' function makes the dependencies of useCallback Hook (at line 147) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'getLoseVariations' in its own useCallback() Hook.","line":78,"column":9,"nodeType":"VariableDeclarator","endLine":86,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'getRandomPrize' function makes the dependencies of useCallback Hook (at line 171) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'getRandomPrize' in its own useCallback() Hook.","line":88,"column":3,"nodeType":"FunctionDeclaration","endLine":113,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'getRandomTicketGradient'. Either exclude it or remove the dependency array. Outer scope values like 'getRandomTicketGradient' aren't valid dependencies because mutating them doesn't re-render the component.","line":119,"column":4,"nodeType":"ArrayExpression","endLine":119,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[4262,4287],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'random'. Either exclude it or remove the dependency array. Outer scope values like 'random' aren't valid dependencies because mutating them doesn't re-render the component.","line":131,"column":4,"nodeType":"ArrayExpression","endLine":131,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[4531,4539],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?","line":138,"column":3,"nodeType":"Identifier","endLine":138,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":138,"column":3,"nodeType":"Identifier","endLine":138,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'useEffect'. Either exclude it or remove the dependency array. Outer scope values like 'useEffect' aren't valid dependencies because mutating them doesn't re-render the component.","line":139,"column":4,"nodeType":"ArrayExpression","endLine":139,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[4703,4714],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'floor'. Either exclude it or remove the dependency array. Outer scope values like 'floor' aren't valid dependencies because mutating them doesn't re-render the component.","line":155,"column":4,"nodeType":"ArrayExpression","endLine":155,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5057,5064],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'random'. Either exclude it or remove the dependency array. Outer scope values like 'random' aren't valid dependencies because mutating them doesn't re-render the component.","line":159,"column":4,"nodeType":"ArrayExpression","endLine":159,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5124,5132],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'floor'. Either exclude it or remove the dependency array. Outer scope values like 'floor' aren't valid dependencies because mutating them doesn't re-render the component.","line":163,"column":4,"nodeType":"ArrayExpression","endLine":163,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5190,5197],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'random'. Either exclude it or remove the dependency array. Outer scope values like 'random' aren't valid dependencies because mutating them doesn't re-render the component.","line":167,"column":4,"nodeType":"ArrayExpression","endLine":167,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5257,5265],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?","line":178,"column":3,"nodeType":"Identifier","endLine":178,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":178,"column":3,"nodeType":"Identifier","endLine":178,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'useEffect'. Either exclude it or remove the dependency array. Outer scope values like 'useEffect' aren't valid dependencies because mutating them doesn't re-render the component.","line":179,"column":4,"nodeType":"ArrayExpression","endLine":179,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5500,5511],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'getContext'. Either exclude it or remove the dependency array. Outer scope values like 'getContext' aren't valid dependencies because mutating them doesn't re-render the component.","line":183,"column":4,"nodeType":"ArrayExpression","endLine":183,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5579,5591],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'getBoundingClientRect'. Either exclude it or remove the dependency array. Outer scope values like 'getBoundingClientRect' aren't valid dependencies because mutating them doesn't re-render the component.","line":187,"column":4,"nodeType":"ArrayExpression","endLine":187,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5681,5704],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'fillRect'. Either exclude it or remove the dependency array. Outer scope values like 'fillRect' aren't valid dependencies because mutating them doesn't re-render the component.","line":191,"column":4,"nodeType":"ArrayExpression","endLine":191,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5768,5778],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'floor'. Either exclude it or remove the dependency array. Outer scope values like 'floor' aren't valid dependencies because mutating them doesn't re-render the component.","line":195,"column":4,"nodeType":"ArrayExpression","endLine":195,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5836,5843],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'fillText'. Either exclude it or remove the dependency array. Outer scope values like 'fillText' aren't valid dependencies because mutating them doesn't re-render the component.","line":199,"column":4,"nodeType":"ArrayExpression","endLine":199,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5907,5917],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'resize'. Either exclude it or remove the dependency array. Outer scope values like 'resize' aren't valid dependencies because mutating them doesn't re-render the component.","line":203,"column":4,"nodeType":"ArrayExpression","endLine":203,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5977,5985],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'ResizeObserver'. Either exclude it or remove the dependency array. Outer scope values like 'ResizeObserver' aren't valid dependencies because mutating them doesn't re-render the component.","line":207,"column":4,"nodeType":"ArrayExpression","endLine":207,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[6061,6077],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'observe'. Either exclude it or remove the dependency array. Outer scope values like 'observe' aren't valid dependencies because mutating them doesn't re-render the component.","line":211,"column":4,"nodeType":"ArrayExpression","endLine":211,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[6139,6148],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'disconnect'. Either exclude it or remove the dependency array. Outer scope values like 'disconnect' aren't valid dependencies because mutating them doesn't re-render the component.","line":215,"column":4,"nodeType":"ArrayExpression","endLine":215,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[6216,6228],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has duplicate dependencies: 'stableFloor', 'stableRandom', and 'stableUseEffect'. Either omit them or remove the dependency array.","line":243,"column":4,"nodeType":"ArrayExpression","endLine":243,"endColumn":474,"suggestions":[{"desc":"Update the dependencies array to be: [stableGetRandomTicketGradient, stableSetTicketGradient, stableSetIsWinner, stableRandom, stableSetIsInitialized, stableUseEffect, stableGetWinVariations, stableGetLoseVariations, stableSetVariation, stableFloor, stableGetRandomPrize, stableSetReward, stableGetContext, stableGetBoundingClientRect, stableFillRect, stableFillText, stableResize, stableResizeObserver, stableObserve, stableDisconnect]","fix":{"range":[6823,7293],"text":"[stableGetRandomTicketGradient, stableSetTicketGradient, stableSetIsWinner, stableRandom, stableSetIsInitialized, stableUseEffect, stableGetWinVariations, stableGetLoseVariations, stableSetVariation, stableFloor, stableGetRandomPrize, stableSetReward, stableGetContext, stableGetBoundingClientRect, stableFillRect, stableFillText, stableResize, stableResizeObserver, stableObserve, stableDisconnect]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport confetti from \"canvas-confetti\";\n\n// Import des pluies d'emojis custom\nimport { SadEmojiRain, HappyEmojiRain, MoneyEmojiRain } from \"../EmojiRain\";\nimport Popup from \"../Popup\";\n\n// Types pour les props configurables\ninterface ScratchCardProps {\n  threshold?: number;\n  goldenTicketChance?: number;\n  onReveal?: (reward: { type: string; amount: number; merchant?: string }) => void;\n  userId?: string;\n}\n\n// Définir les dégradés pour les tickets\nconst ticketGradients = [\n  \"from-cyan-200 via-sky-300 to-blue-400\",   // bleu lagon\n  \"from-pink-200 via-rose-300 to-orange-300\",// corail\n  \"from-green-200 via-emerald-300 to-teal-400\", // vert menthe\n  \"from-purple-200 via-indigo-300 to-blue-400\", // violet doux\n  \"from-yellow-200 via-orange-200 to-pink-200\", // pêche pastel\n];\n\n// Golden Ticket pour les tickets\nconst goldenTicketGradient = \"from-yellow-300 via-yellow-400 to-yellow-500\";\n\n// Sélection aléatoire avec rareté pour les tickets\nfunction getRandomTicketGradient(goldenTicketChance: number = 0.1) {\n  const chance = Math.random();\n  if (chance < goldenTicketChance) {\n    return { gradient: goldenTicketGradient, isGolden: true };\n  }\n  return {\n    gradient: ticketGradients[Math.floor(Math.random() * ticketGradients.length)],\n    isGolden: false,\n  };\n}\n\nexport default function ScratchCardStableV3({ \n  threshold = 0.4, \n  goldenTicketChance = 0.1, \n  onReveal,\n  userId = \"default-user\"\n}: ScratchCardProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // État initial stable pour éviter les erreurs d'hydratation\n  const [ticketGradient, setTicketGradient] = useState({ gradient: \"from-indigo-500 via-purple-500 to-pink-400\", isGolden: false });\n  const [isWinner, setIsWinner] = useState(false);\n  const [variation, setVariation] = useState(\"\");\n  const [revealed, setRevealed] = useState(false);\n  const [popupVisible, setPopupVisible] = useState(false);\n  const [reward, setReward] = useState<{ type: string; amount: number; merchant?: string }>({ type: \"none\", amount: 0 });\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Emojis\n  const [showSadEmojis, setShowSadEmojis] = useState(false);\n  const [showHappyEmojis, setShowHappyEmojis] = useState(false);\n  const [showMoneyEmojis, setShowMoneyEmojis] = useState(false);\n\n  const lastPos = useRef<{ x: number; y: number } | null>(null);\n  const lastCheck = useRef(0);\n\n  const getWinVariations = () => {\n    const emoji = getEmojiSet();\n    return [\n      `${emoji} Bravo, tu repars avec une récompense incroyable ! 🎁🥳`,\n      `${emoji} C'est gagné 🎊`,\n      `${emoji} Quelle chance, tu as gagné ! 🎉`,\n      `${emoji} Jackpot, félicitations 🎆`,\n    ];\n  };\n\n  const getLoseVariations = () => {\n    const emoji = getEmojiSet();\n    return [\n      `${emoji} Pas de chance cette fois... 🍀`,\n      `${emoji} Dommage, retente bientôt ! 🙃`,\n      `${emoji} Ce n'est pas gagné aujourd'hui... 😔`,\n      `${emoji} Tu feras mieux la prochaine fois ! ✨`,\n    ];\n  };\n\n  function getRandomPrize(won: boolean, isGolden: boolean) {\n    if (!won) return { type: \"none\", amount: 0 };\n    \n    // Golden Ticket = récompense spéciale garantie\n    if (isGolden) {\n      return { type: \"golden\", amount: 500, merchant: \"Golden Ticket\" };\n    }\n    \n    const POINTS = [50, 100, 200];\n    const REDUCTIONS = [5, 10, 15];\n    const OFFERS = [\n      { amount: 10, merchant: \"Mutuelle Locale\" },\n      { amount: 15, merchant: \"Boulangerie du Coin\" },\n      { amount: 20, merchant: \"Café Central\" }\n    ];\n    \n    const rand = Math.random();\n    if (rand < 0.4) {\n      return { type: \"points\", amount: POINTS[Math.floor(Math.random() * POINTS.length)] };\n    } else if (rand < 0.7) {\n      return { type: \"reduction\", amount: REDUCTIONS[Math.floor(Math.random() * REDUCTIONS.length)] };\n    } else {\n      const offer = OFFERS[Math.floor(Math.random() * OFFERS.length)];\n      return { type: \"offer\", amount: offer.amount, merchant: offer.merchant };\n    }\n  }\n\n  // Initialisation côté client uniquement pour éviter les erreurs d'hydratation\n  \nconst stableGetRandomTicketGradient = useCallback(() => {\n  getRandomTicketGradient();\n}, [getRandomTicketGradient]);\n\nconst stableSetTicketGradient = useCallback(() => {\n  setTicketGradient();\n}, [setTicketGradient]);\n\nconst stableSetIsWinner = useCallback(() => {\n  setIsWinner();\n}, [setIsWinner]);\n\nconst stableRandom = useCallback(() => {\n  random();\n}, [random]);\n\nconst stableSetIsInitialized = useCallback(() => {\n  setIsInitialized();\n}, [setIsInitialized]);\n\nconst stableUseEffect = useCallback(() => {\n  useEffect();\n}, [useEffect]);\n\nconst stableGetWinVariations = useCallback(() => {\n  getWinVariations();\n}, [getWinVariations]);\n\nconst stableGetLoseVariations = useCallback(() => {\n  getLoseVariations();\n}, [getLoseVariations]);\n\nconst stableSetVariation = useCallback(() => {\n  setVariation();\n}, [setVariation]);\n\nconst stableFloor = useCallback(() => {\n  floor();\n}, [floor]);\n\nconst stableRandom = useCallback(() => {\n  random();\n}, [random]);\n\nconst stableFloor = useCallback(() => {\n  floor();\n}, [floor]);\n\nconst stableRandom = useCallback(() => {\n  random();\n}, [random]);\n\nconst stableGetRandomPrize = useCallback(() => {\n  getRandomPrize();\n}, [getRandomPrize]);\n\nconst stableSetReward = useCallback(() => {\n  setReward();\n}, [setReward]);\n\nconst stableUseEffect = useCallback(() => {\n  useEffect();\n}, [useEffect]);\n\nconst stableGetContext = useCallback(() => {\n  getContext();\n}, [getContext]);\n\nconst stableGetBoundingClientRect = useCallback(() => {\n  getBoundingClientRect();\n}, [getBoundingClientRect]);\n\nconst stableFillRect = useCallback(() => {\n  fillRect();\n}, [fillRect]);\n\nconst stableFloor = useCallback(() => {\n  floor();\n}, [floor]);\n\nconst stableFillText = useCallback(() => {\n  fillText();\n}, [fillText]);\n\nconst stableResize = useCallback(() => {\n  resize();\n}, [resize]);\n\nconst stableResizeObserver = useCallback(() => {\n  ResizeObserver();\n}, [ResizeObserver]);\n\nconst stableObserve = useCallback(() => {\n  observe();\n}, [observe]);\n\nconst stableDisconnect = useCallback(() => {\n  disconnect();\n}, [disconnect]);\n\nuseEffect(() => {\n  stableGetRandomTicketGradient();\n  stableSetTicketGradient();\n  stableSetIsWinner();\n  stableRandom();\n  stableSetIsInitialized();\n  stableUseEffect();\n  stableGetWinVariations();\n  stableGetLoseVariations();\n  stableSetVariation();\n  stableFloor();\n  stableRandom();\n  stableFloor();\n  stableRandom();\n  stableGetRandomPrize();\n  stableSetReward();\n  stableUseEffect();\n  stableGetContext();\n  stableGetBoundingClientRect();\n  stableFillRect();\n  stableFloor();\n  stableFillText();\n  stableResize();\n  stableResizeObserver();\n  stableObserve();\n  stableDisconnect();\n}, [stableGetRandomTicketGradient, stableSetTicketGradient, stableSetIsWinner, stableRandom, stableSetIsInitialized, stableUseEffect, stableGetWinVariations, stableGetLoseVariations, stableSetVariation, stableFloor, stableRandom, stableFloor, stableRandom, stableGetRandomPrize, stableSetReward, stableUseEffect, stableGetContext, stableGetBoundingClientRect, stableFillRect, stableFloor, stableFillText, stableResize, stableResizeObserver, stableObserve, stableDisconnect]);;\n\n  const scratchAt = (x: number, y: number) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    ctx.globalCompositeOperation = \"destination-out\";\n    ctx.lineJoin = \"round\";\n    ctx.lineCap = \"round\";\n    ctx.lineWidth = 40;\n\n    ctx.beginPath();\n    if (lastPos.current) {\n      ctx.moveTo(lastPos.current.x, lastPos.current.y);\n      ctx.lineTo(x, y);\n    } else {\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + 0.1, y + 0.1);\n    }\n    ctx.stroke();\n\n    lastPos.current = { x, y };\n\n    const now = Date.now();\n    if (now - lastCheck.current > 200 && !revealed) {\n      lastCheck.current = now;\n      checkProgress();\n    }\n  };\n\n  const checkProgress = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    let transparent = 0;\n    let totalSampled = 0;\n    \n    // Échantillonnage de 1 pixel sur 100 (1% des pixels)\n    for (let i = 3; i < imageData.data.length; i += 100) {\n      totalSampled++;\n      if (imageData.data[i] === 0) transparent++;\n    }\n    \n    // Calcul correct du pourcentage basé sur l'échantillonnage réel\n    const percent = totalSampled > 0 ? transparent / totalSampled : 0;\n\n    if (percent > threshold && !revealed) {\n      setRevealed(true);\n      setPopupVisible(true);\n\n      // 🎆 Confettis avec requestAnimationFrame pour les performances (seulement pour les gains)\n      if (isWinner) {\n        requestAnimationFrame(() => {\n          confetti({ particleCount: 120, spread: 70, origin: { y: 0.6 } });\n        });\n      }\n\n      // Emojis selon reward\n      triggerEmojis();\n\n      // Callback onReveal si fourni\n      if (onReveal) {\n        onReveal(reward);\n      }\n    }\n  };\n\n  // Emojis cohérents par type de récompense\n  const getEmojiSet = () => {\n    if (!isWinner) {\n      // Emojis de consolation - aléatoires mais cohérents\n      const sadEmojis = [\"😢\", \"😔\", \"😞\", \"💔\", \"😕\", \"🙁\", \"😟\", \"😿\"];\n      return sadEmojis[Math.floor(Math.random() * sadEmojis.length)];\n    }\n    \n    if (reward.type === \"golden\") {\n      // Emojis dorés et spéciaux\n      const goldenEmojis = [\"🎟️\", \"✨\", \"💎\", \"🏆\", \"👑\", \"⭐\", \"🌟\", \"💫\"];\n      return goldenEmojis[Math.floor(Math.random() * goldenEmojis.length)];\n    }\n    \n    if (reward.type === \"points\") {\n      if (reward.amount >= 200) {\n        // Gros gains - emojis d'argent\n        const moneyEmojis = [\"💰\", \"💵\", \"💸\", \"💴\", \"💶\", \"💷\", \"🪙\", \"💎\"];\n        return moneyEmojis[Math.floor(Math.random() * moneyEmojis.length)];\n      } else if (reward.amount >= 100) {\n        // Gains moyens - emojis de joie\n        const happyEmojis = [\"🎉\", \"🎊\", \"🥳\", \"😄\", \"😁\", \"🤩\", \"🎈\", \"🎁\"];\n        return happyEmojis[Math.floor(Math.random() * happyEmojis.length)];\n      } else {\n        // Petits gains - emojis de contentement\n        const contentEmojis = [\"😊\", \"🙂\", \"😌\", \"😇\", \"🥰\", \"😋\", \"🎯\", \"✨\"];\n        return contentEmojis[Math.floor(Math.random() * contentEmojis.length)];\n      }\n    }\n    \n    if (reward.type === \"reduction\" || reward.type === \"offer\") {\n      if (reward.amount >= 20) {\n        // Grosses réductions - emojis d'excitation\n        const excitedEmojis = [\"🤯\", \"😱\", \"🤩\", \"🔥\", \"💥\", \"⚡\", \"🚀\", \"🎆\"];\n        return excitedEmojis[Math.floor(Math.random() * excitedEmojis.length)];\n      } else if (reward.amount >= 10) {\n        // Réductions moyennes - emojis de satisfaction\n        const satisfiedEmojis = [\"😎\", \"🤗\", \"😏\", \"😉\", \"🙃\", \"😋\", \"🛍️\", \"💳\"];\n        return satisfiedEmojis[Math.floor(Math.random() * satisfiedEmojis.length)];\n      } else {\n        // Petites réductions - emojis de plaisir\n        const pleasedEmojis = [\"😊\", \"🙂\", \"😌\", \"😇\", \"🥰\", \"😋\", \"🎯\", \"✨\"];\n        return pleasedEmojis[Math.floor(Math.random() * pleasedEmojis.length)];\n      }\n    }\n    \n    // Par défaut - emojis neutres\n    const neutralEmojis = [\"😊\", \"🙂\", \"😌\", \"😇\", \"🥰\", \"😋\", \"🎯\", \"✨\"];\n    return neutralEmojis[Math.floor(Math.random() * neutralEmojis.length)];\n  };\n\n  const triggerEmojis = () => {\n    if (!isWinner) {\n      // Perte - emojis tristes\n      setShowSadEmojis(true);\n      setTimeout(() => setShowSadEmojis(false), 5000);\n    } else if (reward.type === \"golden\") {\n      // Golden Ticket - emojis d'argent (le plus rare)\n      setShowMoneyEmojis(true);\n      setTimeout(() => setShowMoneyEmojis(false), 5000);\n    } else if (reward.type === \"points\") {\n      if (reward.amount >= 200) {\n        // Gros gains - emojis d'argent\n        setShowMoneyEmojis(true);\n        setTimeout(() => setShowMoneyEmojis(false), 5000);\n      } else if (reward.amount >= 100) {\n        // Gains moyens - emojis joyeux\n        setShowHappyEmojis(true);\n        setTimeout(() => setShowHappyEmojis(false), 5000);\n      } else {\n        // Petits gains - emojis joyeux aussi\n      setShowHappyEmojis(true);\n      setTimeout(() => setShowHappyEmojis(false), 5000);\n      }\n    } else if (reward.type === \"reduction\" || reward.type === \"offer\") {\n      if (reward.amount >= 20) {\n        // Grosses réductions - emojis d'argent\n      setShowMoneyEmojis(true);\n      setTimeout(() => setShowMoneyEmojis(false), 5000);\n    } else {\n      // Réductions normales - emojis joyeux\n      setShowHappyEmojis(true);\n      setTimeout(() => setShowHappyEmojis(false), 5000);\n    }\n    } else {\n      // Par défaut - emojis joyeux pour les gains\n      setShowHappyEmojis(true);\n      setTimeout(() => setShowHappyEmojis(false), 5000);\n    }\n  };\n\n  const getPopupVariant = () => {\n    // Toutes les variantes utilisent maintenant la bannière\n    return \"banniere\";\n  };\n\n  const getPopupTitle = () => {\n    const emoji = getEmojiSet();\n    if (!isWinner) return `${emoji} Dommage`;\n    if (reward.type === \"golden\") return `${emoji} GOLDEN TICKET !`;\n    if (reward.type === \"points\") return `${emoji} Félicitations !`;\n    if (reward.type === \"offer\") return `${emoji} Offre débloquée`;\n    if (reward.type === \"reduction\") return `${emoji} Réduction gagnée`;\n    return `${emoji} Bravo !`;\n  };\n\n  const getPopupMessage = () => {\n    const emoji = getEmojiSet();\n    if (!isWinner) return `Aucun gain cette fois-ci. Reviens bientôt pour retenter ta chance ${emoji}`;\n    if (reward.type === \"golden\") return `GOLDEN TICKET ! Tu as gagné ${reward.amount} points spéciaux ! ${emoji}💎`;\n    if (reward.type === \"points\") return `Tu as gagné ${reward.amount} points Kanpanya ! ${emoji}`;\n    if (reward.type === \"offer\") return `-${reward.amount}% de réduction chez ${reward.merchant} ! ${emoji}`;\n    if (reward.type === \"reduction\") return `Tu as gagné ${reward.amount}% de réduction ! ${emoji}`;\n    return `Merci d'avoir participé ! ${emoji}`;\n  };\n\n  const handleDown = (x: number, y: number) => {\n    lastPos.current = { x, y };\n    scratchAt(x, y);\n  };\n\n  const handleUp = () => {\n    lastPos.current = null;\n  };\n\n  const handleMove = (e: React.MouseEvent | React.TouchEvent) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    let x = 0,\n      y = 0;\n    if (\"touches\" in e) {\n      // Mobile : empêcher le scroll/zoom pendant le grattage\n      e.preventDefault();\n      x = e.touches[0].clientX - rect.left;\n      y = e.touches[0].clientY - rect.top;\n    } else {\n      x = e.clientX - rect.left;\n      y = e.clientY - rect.top;\n    }\n    scratchAt(x, y);\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center p-6 relative\">\n      <h2 className=\"text-2xl font-extrabold mb-4 text-center animate-bounce\">\n        🎟️✨ Gratte ton ticket magique ✨🎟️\n      </h2>\n\n      {/* Carte Kanpanya */}\n      <div\n        ref={containerRef}\n        className={`relative w-80 h-44 text-white rounded-2xl shadow-xl p-5 flex items-center justify-center\n          bg-gradient-to-br ${ticketGradient.gradient}\n          ${ticketGradient.isGolden ? \"ring-4 ring-yellow-400 animate-pulse\" : \"\"}`}\n      >\n        <div className=\"text-xl font-bold text-center\">\n          {ticketGradient.isGolden ? \"🎟️ GOLDEN TICKET 🎟️\" : variation}\n        </div>\n        \n        {!revealed && (\n          <canvas\n            ref={canvasRef}\n            className=\"absolute inset-0 rounded-2xl touch-none\"\n            role=\"button\"\n            aria-label=\"Carte à gratter - Grattez pour révéler votre récompense\"\n            tabIndex={0}\n            onMouseMove={handleMove}\n            onMouseDown={(e) => {\n              const rect = e.currentTarget.getBoundingClientRect();\n              handleDown(e.clientX - rect.left, e.clientY - rect.top);\n            }}\n            onMouseUp={handleUp}\n            onTouchMove={handleMove}\n            onTouchStart={(e) => {\n              // Mobile : empêcher le scroll/zoom au début du grattage\n              e.preventDefault();\n              const rect = e.currentTarget.getBoundingClientRect();\n              const touch = e.touches[0];\n              handleDown(touch.clientX - rect.left, touch.clientY - rect.top);\n            }}\n            onTouchEnd={handleUp}\n            onKeyDown={(e) => {\n              // Support clavier pour l'accessibilité\n              if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                const rect = e.currentTarget.getBoundingClientRect();\n                handleDown(rect.width / 2, rect.height / 2);\n              }\n            }}\n          />\n        )}\n      </div>\n\n      {/* Popup avec accessibilité */}\n      {popupVisible && (\n        <div\n          role=\"dialog\"\n          aria-live=\"polite\"\n          aria-labelledby=\"popup-title\"\n          aria-describedby=\"popup-message\"\n          className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\"\n        >\n          <Popup\n            variant={getPopupVariant() as unknown}\n            title={getPopupTitle()}\n            message={getPopupMessage()}\n            onClose={() => setPopupVisible(false)}\n          />\n        </div>\n      )}\n\n      {/* Emoji Rains */}\n      {showSadEmojis && <SadEmojiRain count={35} isWinner={false} />}\n      {showHappyEmojis && <HappyEmojiRain count={35} isWinner={true} />}\n      {showMoneyEmojis && <MoneyEmojiRain count={35} isWinner={true} />}\n\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/scratch/ScratchCardStableV3WithAnimations.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is assigned a value but never used. Allowed unused args must match /^_/u.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport confetti from \"canvas-confetti\";\n\n// Import des pluies d'emojis custom\nimport { SadEmojiRain, HappyEmojiRain, MoneyEmojiRain } from \"../EmojiRain\";\nimport Popup from \"../Popup\";\n\n// Types pour les props configurables\ninterface ScratchCardProps {\n  threshold?: number;\n  goldenTicketChance?: number;\n  onReveal?: (reward: { type: string; amount: number; merchant?: string }) => void;\n  userId?: string;\n  enableAdvancedAnimations?: boolean;\n}\n\n// Définir les dégradés pour les tickets\nconst ticketGradients = [\n  \"from-cyan-200 via-sky-300 to-blue-400\",   // bleu lagon\n  \"from-pink-200 via-rose-300 to-orange-300\",// corail\n  \"from-green-200 via-emerald-300 to-teal-400\", // vert menthe\n  \"from-purple-200 via-indigo-300 to-blue-400\", // violet doux\n  \"from-yellow-200 via-orange-200 to-pink-200\", // pêche pastel\n];\n\n// Golden Ticket pour les tickets\nconst goldenTicketGradient = \"from-yellow-300 via-yellow-400 to-yellow-500\";\n\n// Sélection aléatoire avec rareté pour les tickets\nfunction getRandomTicketGradient(goldenTicketChance: number = 0.1) {\n  const chance = Math.random();\n  if (chance < goldenTicketChance) {\n    return { gradient: goldenTicketGradient, isGolden: true };\n  }\n  return {\n    gradient: ticketGradients[Math.floor(Math.random() * ticketGradients.length)],\n    isGolden: false,\n  };\n}\n\nexport default function ScratchCardStableV3WithAnimations({ \n  threshold = 0.4, \n  goldenTicketChance = 0.1, \n  onReveal,\n  userId = \"default-user\",\n  enableAdvancedAnimations = true\n}: ScratchCardProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // États pour le scratch\n  const [isScratching, setIsScratching] = useState(false);\n  const [revealed, setRevealed] = useState(false);\n  const [popupVisible, setPopupVisible] = useState(false);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // États pour les animations\n  const [showSadEmojis, setShowSadEmojis] = useState(false);\n  const [showHappyEmojis, setShowHappyEmojis] = useState(false);\n  const [showMoneyEmojis, setShowMoneyEmojis] = useState(false);\n\n  // États pour le ticket et la récompense\n  const [ticketGradient, setTicketGradient] = useState({ gradient: \"\", isGolden: false });\n  const [isWinner, setIsWinner] = useState(false);\n  const [reward, setReward] = useState<{ type: string; amount: number; merchant?: string } | null>(null);\n\n  // Initialisation du ticket\n  useEffect(() => {\n    if (!isInitialized) {\n      const gradient = getRandomTicketGradient(goldenTicketChance);\n      setTicketGradient(gradient);\n      setIsInitialized(true);\n    }\n  }, [isInitialized, goldenTicketChance]);\n\n  // Détermination du gagnant et de la récompense\n  useEffect(() => {\n    if (isInitialized) {\n      const variation = Math.random();\n      const isWin = variation > 0.5; // 50% de chance de gagner\n      setIsWinner(isWin);\n\n      if (isWin) {\n        // Récompenses gagnantes\n        const winRewards = [\n          { type: \"points\", amount: 100, merchant: \"Kanpanya\" },\n          { type: \"points\", amount: 250, merchant: \"Kanpanya\" },\n          { type: \"points\", amount: 500, merchant: \"Kanpanya\" },\n          { type: \"gift\", amount: 1, merchant: \"Partenaire\" },\n          { type: \"discount\", amount: 20, merchant: \"Boutique\" },\n        ];\n        setReward(winRewards[Math.floor(Math.random() * winRewards.length)]);\n      } else {\n        // Récompenses perdantes\n        const loseRewards = [\n          { type: \"points\", amount: 10, merchant: \"Kanpanya\" },\n          { type: \"points\", amount: 25, merchant: \"Kanpanya\" },\n          { type: \"points\", amount: 50, merchant: \"Kanpanya\" },\n        ];\n        setReward(loseRewards[Math.floor(Math.random() * loseRewards.length)]);\n      }\n    }\n  }, [isWinner, isInitialized, ticketGradient.isGolden]);\n\n  // Initialisation du canvas\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || !isInitialized) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Redimensionner le canvas\n    const resizeCanvas = () => {\n      if (containerRef.current) {\n        const rect = containerRef.current.getBoundingClientRect();\n        canvas.width = rect.width;\n        canvas.height = rect.height;\n      }\n    };\n\n    resizeCanvas();\n    window.addEventListener(\"resize\", resizeCanvas);\n\n    // Dessiner la surface de grattage\n    const drawScratchSurface = () => {\n      ctx.fillStyle = \"#666666\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      // Ajouter un effet de texture\n      ctx.fillStyle = \"#888888\";\n      for (let i = 0; i < 100; i++) {\n        ctx.fillRect(\n          Math.random() * canvas.width,\n          Math.random() * canvas.height,\n          2,\n          2\n        );\n      }\n    };\n\n    drawScratchSurface();\n\n    return () => {\n      window.removeEventListener(\"resize\", resizeCanvas);\n    };\n  }, [isInitialized]);\n\n  // Fonction de grattage\n  const scratchAt = (x: number, y: number) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    ctx.globalCompositeOperation = \"destination-out\";\n    ctx.beginPath();\n    ctx.arc(x, y, 25, 0, Math.PI * 2);\n    ctx.fill();\n    \n    checkProgress();\n  };\n\n  // Vérification du progrès de grattage\n  const checkProgress = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    let transparent = 0;\n    let totalSampled = 0;\n    \n    // Échantillonnage de 1 pixel sur 100 (1% des pixels)\n    for (let i = 3; i < imageData.data.length; i += 100) {\n      totalSampled++;\n      if (imageData.data[i] === 0) transparent++;\n    }\n    \n    // Calcul correct du pourcentage basé sur l'échantillonnage réel\n    const percent = totalSampled > 0 ? transparent / totalSampled : 0;\n\n    if (percent > threshold && !revealed) {\n      setRevealed(true);\n      setPopupVisible(true);\n\n      // 🎆 Confettis avec requestAnimationFrame pour les performances (seulement pour les gains)\n      if (isWinner && enableAdvancedAnimations) {\n        requestAnimationFrame(() => {\n          confetti({ particleCount: 120, spread: 70, origin: { y: 0.6 } });\n        });\n      }\n\n      // Emojis selon reward\n      triggerEmojis();\n\n      // Callback de révélation\n      if (onReveal && reward) {\n        onReveal(reward);\n      }\n    }\n  };\n\n  // Déclenchement des animations d'emojis\n  const triggerEmojis = () => {\n    if (!enableAdvancedAnimations) return;\n\n    if (isWinner) {\n      if (reward?.type === \"points\" && reward.amount >= 250) {\n        setShowMoneyEmojis(true);\n      } else {\n        setShowHappyEmojis(true);\n      }\n    } else {\n      setShowSadEmojis(true);\n    }\n\n    // Arrêter les animations après 3 secondes\n    setTimeout(() => {\n      setShowSadEmojis(false);\n      setShowHappyEmojis(false);\n      setShowMoneyEmojis(false);\n    }, 3000);\n  };\n\n  // Gestion des événements tactiles et souris\n  const handleDown = (x: number, y: number) => {\n    setIsScratching(true);\n    scratchAt(x, y);\n  };\n\n  const handleUp = () => {\n    setIsScratching(false);\n  };\n\n  const handleMove = (e: React.MouseEvent | React.TouchEvent) => {\n    if (!isScratching) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const clientX = \"touches\" in e ? e.touches[0].clientX : e.clientX;\n    const clientY = \"touches\" in e ? e.touches[0].clientY : e.clientY;\n\n    const x = clientX - rect.left;\n    const y = clientY - rect.top;\n\n    scratchAt(x, y);\n  };\n\n  // Fonctions d'aide pour le popup\n  const getPopupVariant = () => {\n    if (ticketGradient.isGolden) return \"banniere\";\n    return \"banniere\";\n  };\n\n  const getPopupTitle = () => {\n    if (isWinner) {\n      if (ticketGradient.isGolden) return \"🏆 Golden Ticket !\";\n      return \"🎉 Félicitations !\";\n    }\n    return \"😔 Dommage !\";\n  };\n\n  const getPopupMessage = () => {\n    if (!reward) return \"\";\n    \n    if (isWinner) {\n      if (reward.type === \"points\") {\n        return `Tu as gagné ${reward.amount} points Kanpanya !`;\n      } else if (reward.type === \"gift\") {\n        return `Tu as gagné un cadeau de ${reward.merchant} !`;\n      } else if (reward.type === \"discount\") {\n        return `Tu as gagné ${reward.amount}% de réduction chez ${reward.merchant} !`;\n      }\n    } else {\n      return `Tu as gagné ${reward.amount} points de consolation !`;\n    }\n    return \"\";\n  };\n\n  if (!isInitialized) {\n    return (\n      <div className=\"w-80 h-44 bg-gray-200 rounded-2xl flex items-center justify-center\">\n        <div className=\"text-gray-500\">Chargement...</div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"relative w-80 h-44 text-white rounded-2xl shadow-xl p-5 flex items-center justify-center bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-400\">\n        {/* Contenu du ticket */}\n        <div className=\"text-xl font-bold text-center\">\n          {!revealed ? (\n            <div className=\"text-white/80\">\n              <div className=\"text-lg mb-2\">🎫</div>\n              <div className=\"text-sm\">Grattez pour révéler</div>\n            </div>\n          ) : (\n            <div className=\"text-white\">\n              <div className=\"text-2xl mb-2\">\n                {reward?.type === \"points\" && \"💰\"}\n                {reward?.type === \"gift\" && \"🎁\"}\n                {reward?.type === \"discount\" && \"🏷️\"}\n              </div>\n              <div className=\"text-sm\">\n                {reward?.amount} {reward?.type === \"points\" ? \"points\" : reward?.type === \"gift\" ? \"cadeau\" : \"%\"}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Canvas de grattage */}\n        <canvas\n          ref={canvasRef}\n          className=\"absolute inset-0 rounded-2xl touch-none\"\n          style={{ cursor: isScratching ? \"grabbing\" : \"grab\" }}\n          onMouseDown={(e) => {\n            const rect = e.currentTarget.getBoundingClientRect();\n            handleDown(e.clientX - rect.left, e.clientY - rect.top);\n          }}\n          onMouseUp={handleUp}\n          onMouseMove={handleMove}\n          onMouseLeave={handleUp}\n          onTouchStart={(e) => {\n            e.preventDefault();\n            const rect = e.currentTarget.getBoundingClientRect();\n            const touch = e.touches[0];\n            handleDown(touch.clientX - rect.left, touch.clientY - rect.top);\n          }}\n          onTouchEnd={(e) => {\n            e.preventDefault();\n            handleUp();\n          }}\n          onTouchMove={handleMove}\n          role=\"button\"\n          aria-label=\"Carte à gratter - Grattez pour révéler votre récompense\"\n          tabIndex={0}\n        />\n      </div>\n\n      {/* Animations d'emojis */}\n      {enableAdvancedAnimations && (\n        <>\n          {showSadEmojis && <SadEmojiRain count={40} isWinner={false} />}\n          {showHappyEmojis && <HappyEmojiRain count={50} isWinner={true} />}\n          {showMoneyEmojis && <MoneyEmojiRain count={60} isWinner={true} />}\n        </>\n      )}\n\n      {/* Popup de récompense */}\n      {popupVisible && (\n        <Popup\n          variant={getPopupVariant()}\n          title={getPopupTitle()}\n          message={getPopupMessage()}\n          isWinner={isWinner}\n          onClose={() => setPopupVisible(false)}\n        />\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/site-header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/theme/ClientLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/theme/ThemeProvider.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'getItem'. Either exclude it or remove the dependency array. Outer scope values like 'getItem' aren't valid dependencies because mutating them doesn't re-render the component.","line":20,"column":4,"nodeType":"ArrayExpression","endLine":20,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[533,542],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { createContext, useContext, useEffect, useState, type ReactNode } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n  const [mounted, setMounted] = useState(false);\n\n  \nconst stableGetItem = useCallback(() => {\n  getItem();\n}, [getItem]);\n\nconst stableSetTheme = useCallback(() => {\n  setTheme();\n}, [setTheme]);\n\nconst stableSetMounted = useCallback(() => {\n  setMounted();\n}, [setMounted]);\n\nuseEffect(() => {\n  stableGetItem();\n  stableSetTheme();\n  stableSetMounted();\n}, [stableGetItem, stableSetTheme, stableSetMounted]);;\n\n  useEffect(() => {\n    if (mounted) {\n      // Appliquer le thème au body au lieu de l'html\n      document.body.className = theme;\n      document.body.style.colorScheme = theme;\n      localStorage.setItem(\"padavwa-theme\", theme);\n    }\n  }, [theme, mounted]);\n\n  const value = {\n    theme,\n    setTheme: (newTheme: Theme) => {\n      setTheme(newTheme);\n    },\n  };\n\n  // Éviter le rendu jusqu'à ce que le composant soit monté côté client\n  if (!mounted) {\n    return <>{children}</>;\n  }\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/theme/ThemeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/BadgeFlash.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/Banner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/Gradients.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/KanpanyaCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/Kanpanyabutton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/Modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/Typography.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/calendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'forwardRef' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { forwardRef, ComponentProps, useRef, useEffect } from \"react\"\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from \"lucide-react\"\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: ComponentProps<typeof DayPicker> & {\n  buttonVariant?: ComponentProps<typeof Button>[\"variant\"]\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        \"bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n        String.raw`rtl:**:[.rdp-button\\_next>svg]:rotate-180`,\n        String.raw`rtl:**:[.rdp-button\\_previous>svg]:rotate-180`,\n        className\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString(\"default\", { month: \"short\" }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn(\"w-fit\", defaultClassNames.root),\n        months: cn(\n          \"flex gap-4 flex-col md:flex-row relative\",\n          defaultClassNames.months\n        ),\n        month: cn(\"flex flex-col w-full gap-4\", defaultClassNames.month),\n        nav: cn(\n          \"flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between\",\n          defaultClassNames.nav\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\n          defaultClassNames.button_previous\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"size-(--cell-size) aria-disabled:opacity-50 p-0 select-none\",\n          defaultClassNames.button_next\n        ),\n        month_caption: cn(\n          \"flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)\",\n          defaultClassNames.month_caption\n        ),\n        dropdowns: cn(\n          \"w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5\",\n          defaultClassNames.dropdowns\n        ),\n        dropdown_root: cn(\n          \"relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md\",\n          defaultClassNames.dropdown_root\n        ),\n        dropdown: cn(\n          \"absolute bg-popover inset-0 opacity-0\",\n          defaultClassNames.dropdown\n        ),\n        caption_label: cn(\n          \"select-none font-medium\",\n          captionLayout === \"label\"\n            ? \"text-sm\"\n            : \"rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5\",\n          defaultClassNames.caption_label\n        ),\n        table: \"w-full border-collapse\",\n        weekdays: cn(\"flex\", defaultClassNames.weekdays),\n        weekday: cn(\n          \"text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none\",\n          defaultClassNames.weekday\n        ),\n        week: cn(\"flex w-full mt-2\", defaultClassNames.week),\n        week_number_header: cn(\n          \"select-none w-(--cell-size)\",\n          defaultClassNames.week_number_header\n        ),\n        week_number: cn(\n          \"text-[0.8rem] select-none text-muted-foreground\",\n          defaultClassNames.week_number\n        ),\n        day: cn(\n          \"relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none\",\n          defaultClassNames.day\n        ),\n        range_start: cn(\n          \"rounded-l-md bg-accent\",\n          defaultClassNames.range_start\n        ),\n        range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\n        range_end: cn(\"rounded-r-md bg-accent\", defaultClassNames.range_end),\n        today: cn(\n          \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\n          defaultClassNames.today\n        ),\n        outside: cn(\n          \"text-muted-foreground aria-selected:text-muted-foreground\",\n          defaultClassNames.outside\n        ),\n        disabled: cn(\n          \"text-muted-foreground opacity-50\",\n          defaultClassNames.disabled\n        ),\n        hidden: cn(\"invisible\", defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === \"left\") {\n            return (\n              <ChevronLeftIcon className={cn(\"size-4\", className)} {...props} />\n            )\n          }\n\n          if (orientation === \"right\") {\n            return (\n              <ChevronRightIcon\n                className={cn(\"size-4\", className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn(\"size-4\", className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = useRef<HTMLButtonElement>(null)\n  useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        \"data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70\",\n        defaultClassNames.day,\n        className\n      )}\n      {...props}\n    >\n      {day.date.getDate()}\n    </Button>\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/command.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":26,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":26,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[715,766],"text":"type CommandDialogProps = DialogProps"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className={cn(\"py-6 text-center text-sm\", className)}\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[72,156],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#17BFA0] focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/components/ui/visually-hidden.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'className' is defined but never used. Allowed unused args must match /^_/u.","line":8,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\n\nconst VisuallyHidden = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    className=\"absolute w-px h-px p-0 -m-px overflow-hidden whitespace-nowrap border-0\"\n    {...props}\n  />\n))\nVisuallyHidden.displayName = \"VisuallyHidden\"\n\nexport { VisuallyHidden }\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/config/auth.routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/config/colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/domains/offers/schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/domains/offers/status.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/hooks/useOffers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/hooks/useScratchAvailability.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'readStorage'. Either exclude it or remove the dependency array. Outer scope values like 'readStorage' aren't valid dependencies because mutating them doesn't re-render the component.","line":35,"column":4,"nodeType":"ArrayExpression","endLine":35,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1009,1022],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addEventListener'. Either exclude it or remove the dependency array. Outer scope values like 'addEventListener' aren't valid dependencies because mutating them doesn't re-render the component.","line":39,"column":4,"nodeType":"ArrayExpression","endLine":39,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1102,1120],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'removeEventListener'. Either exclude it or remove the dependency array. Outer scope values like 'removeEventListener' aren't valid dependencies because mutating them doesn't re-render the component.","line":43,"column":4,"nodeType":"ArrayExpression","endLine":43,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1206,1227],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback requires an effect callback. Did you forget to pass a callback to the hook?","line":59,"column":3,"nodeType":"Identifier","endLine":59,"endColumn":14},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":59,"column":3,"nodeType":"Identifier","endLine":59,"endColumn":14},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'useCallback'. Either exclude it or remove the dependency array. Outer scope values like 'useCallback' aren't valid dependencies because mutating them doesn't re-render the component.","line":60,"column":4,"nodeType":"ArrayExpression","endLine":60,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1640,1653],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'readStorage'. Either exclude it or remove the dependency array. Outer scope values like 'readStorage' aren't valid dependencies because mutating them doesn't re-render the component.","line":64,"column":4,"nodeType":"ArrayExpression","endLine":64,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1723,1736],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useCallback, useEffect, useState } from 'react';\nimport type { ScratchReward, ScratchState } from '@/types/scratch';\n\nconst STORAGE_KEY = 'k-scratch';\n\nfunction readStorage(): ScratchState {\n  if (typeof window === 'undefined') return { available: false, used: true };\n  try {\n    const raw = localStorage.getItem(STORAGE_KEY);\n    if (!raw) return { available: false, used: true };\n    const data = JSON.parse(raw) as ScratchState;\n    return {\n      available: Boolean(data.available),\n      used: Boolean(data.used),\n      reward: data.reward,\n      ticketId: data.ticketId,\n    };\n  } catch {\n    return { available: false, used: true };\n  }\n}\n\nfunction writeStorage(next: ScratchState) {\n  if (typeof window === 'undefined') return;\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(next));\n}\n\nexport function useScratchAvailability() {\n  const [state, setState] = useState<ScratchState>(() => readStorage());\n\n  \nconst stableReadStorage = useCallback(() => {\n  readStorage();\n}, [readStorage]);\n\nconst stableAddEventListener = useCallback(() => {\n  addEventListener();\n}, [addEventListener]);\n\nconst stableRemoveEventListener = useCallback(() => {\n  removeEventListener();\n}, [removeEventListener]);\n\n\nconst stableStableReadStorage = useCallback(() => {\n  stableReadStorage();\n}, [stableReadStorage]);\n\nconst stableStableAddEventListener = useCallback(() => {\n  stableAddEventListener();\n}, [stableAddEventListener]);\n\nconst stableStableRemoveEventListener = useCallback(() => {\n  stableRemoveEventListener();\n}, [stableRemoveEventListener]);\n\nconst stableUseCallback = useCallback(() => {\n  useCallback();\n}, [useCallback]);\n\nconst stableReadStorage = useCallback(() => {\n  readStorage();\n}, [readStorage]);\n\nuseEffect(() => {\n  stableStableReadStorage();\n  stableStableAddEventListener();\n  stableStableRemoveEventListener();\n  stableUseCallback();\n  stableReadStorage();\n}, [stableStableReadStorage, stableStableAddEventListener, stableStableRemoveEventListener, stableUseCallback, stableReadStorage]);;\n\n  const activate = useCallback((opts: { quizId: string; points?: number; label?: string }) => {\n    const reward: ScratchReward = { \n      type: 'points', \n      amount: opts.points ?? 50, \n      label: opts.label ?? `+${opts.points ?? 50} points` \n    };\n    const next: ScratchState = { \n      available: true, \n      used: false, \n      reward,\n      ticketId: opts.quizId\n    };\n    writeStorage(next);\n    setState(next);\n  }, []);\n\n  const markUsed = useCallback(() => {\n    const next: ScratchState = { ...state, available: false, used: true };\n    writeStorage(next);\n    setState(next);\n  }, [state]);\n\n  const clear = useCallback(() => {\n    const next: ScratchState = { available: false, used: true };\n    writeStorage(next);\n    setState(next);\n  }, []);\n\n  return { state, activate, markUsed, clear, refresh };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/hooks/useUserPoints.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/i18n/I18nProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/i18n/apiErrors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/i18n/dateLocales.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/i18n/en.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/i18n/es.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/i18n/format.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/i18n/fr.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/i18n/gcf.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/i18n/hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/i18n/index.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deepMerge' is defined but never used. Allowed unused vars must match /^_/u.","line":47,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/i18n/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/i18n/useLocaleSWR.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/i18n/useTAsync.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/i18n/zodMessages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/canvas/components/ScratchCanvas.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'reward' is defined but never used. Allowed unused args must match /^_/u.","line":6,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":61},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'drawScratchSurface' function makes the dependencies of useCallback Hook (at line 15) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'drawScratchSurface' in its own useCallback() Hook.","line":21,"column":9,"nodeType":"VariableDeclarator","endLine":54,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useRef, useEffect, useState } from 'react';\nimport { ScratchCanvasProps } from '../types';\n\nexport function ScratchCanvas({ onReveal, onProgress, reward }: ScratchCanvasProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isRevealed, setIsRevealed] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const lastPos = useRef<{ x: number; y: number } | null>(null);\n\n  \nconst stableDrawScratchSurface = useCallback(() => {\n  drawScratchSurface();\n}, [drawScratchSurface]);\n\nuseEffect(() => {\n  stableDrawScratchSurface();\n}, [stableDrawScratchSurface]);;\n\n  const drawScratchSurface = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const { width, height } = canvas;\n\n    // Fond gris métallisé\n    const gradient = ctx.createLinearGradient(0, 0, width, height);\n    gradient.addColorStop(0, '#dcdcdc');\n    gradient.addColorStop(0.4, '#f0f0f0');\n    gradient.addColorStop(0.7, '#c0c0c0');\n    gradient.addColorStop(1, '#e5e5e5');\n    \n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, width, height);\n\n    // Texte au centre\n    ctx.font = `600 ${height * 0.18}px 'Poppins', sans-serif`;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    \n    const textGradient = ctx.createLinearGradient(0, 0, width, 0);\n    textGradient.addColorStop(0, '#17BFA0');\n    textGradient.addColorStop(1, '#14a58d');\n    ctx.fillStyle = textGradient;\n    \n    ctx.shadowColor = 'rgba(0,0,0,0.25)';\n    ctx.shadowBlur = 4;\n    ctx.fillText('À toi de jouer', width / 2, height / 2);\n    ctx.shadowBlur = 0;\n  };\n\n  const scratchAt = (x: number, y: number) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    const canvasX = (x - rect.left) * scaleX;\n    const canvasY = (y - rect.top) * scaleY;\n\n    ctx.globalCompositeOperation = 'destination-out';\n    ctx.beginPath();\n    ctx.arc(canvasX, canvasY, 20, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Calculer le pourcentage gratté\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    let transparent = 0;\n    for (let i = 3; i < imageData.data.length; i += 4) {\n      if (imageData.data[i] === 0) transparent++;\n    }\n    const newProgress = transparent / (canvas.width * canvas.height);\n    setProgress(newProgress);\n    onProgress?.(newProgress);\n\n    // Révéler si plus de 30% gratté\n    if (newProgress > 0.3 && !isRevealed) {\n      setIsRevealed(true);\n      onReveal?.();\n    }\n  };\n\n  const handleDown = (x: number, y: number) => {\n    lastPos.current = { x, y };\n    scratchAt(x, y);\n  };\n\n  const handleMove = (x: number, y: number) => {\n    if (!lastPos.current) return;\n    \n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    ctx.globalCompositeOperation = 'destination-out';\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.lineWidth = 20;\n\n    ctx.beginPath();\n    ctx.moveTo(lastPos.current.x, lastPos.current.y);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n\n    lastPos.current = { x, y };\n    scratchAt(x, y);\n  };\n\n  const handleUp = () => {\n    lastPos.current = null;\n  };\n\n  // Event handlers\n  const handleMouseDown = (e: React.MouseEvent) => handleDown(e.clientX, e.clientY);\n  const handleMouseMove = (e: React.MouseEvent) => handleMove(e.clientX, e.clientY);\n  const handleMouseUp = () => handleUp();\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    const touch = e.touches[0];\n    handleDown(touch.clientX, touch.clientY);\n  };\n  const handleTouchMove = (e: React.TouchEvent) => {\n    const touch = e.touches[0];\n    handleMove(touch.clientX, touch.clientY);\n  };\n  const handleTouchEnd = () => handleUp();\n\n  return (\n    <div className=\"relative mx-auto my-6 w-[300px] md:w-[360px] aspect-[1.6/1] rounded-xl shadow-lg overflow-hidden\">\n      <canvas\n        ref={canvasRef}\n        className=\"absolute inset-0 w-full h-full cursor-crosshair z-20\"\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n        style={{ touchAction: 'none' }}\n      />\n      \n      {/* Barre de progression */}\n      <div className=\"absolute bottom-2 left-2 right-2 h-1 bg-gray-200 rounded-full overflow-hidden\">\n        <div \n          className=\"h-full bg-[#17BFA0] transition-all duration-300\"\n          style={{ width: `${progress * 100}%` }}\n        />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/canvas/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/data/services/ScratchService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/data/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/logic/hooks/useGameLogic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/logic/hooks/useScratchActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/logic/hooks/useScratchCard.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'scratchService' object construction makes the dependencies of useCallback Hook (at line 33) change on every render. Move it inside the useCallback callback. Alternatively, wrap the initialization of 'scratchService' in its own useMemo() Hook.","line":14,"column":9,"nodeType":"VariableDeclarator","endLine":14,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useCallback } from 'react';\nimport { useScratchState } from './useScratchState';\nimport { ScratchService } from '../../data/services/ScratchService';\n\n// Hook = logique pure de la scratch card\nexport function useScratchCard() {\n  const [isRevealed, setIsRevealed] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [progress, setProgress] = useState(0);\n  \n  const { state, markUsed } = useScratchState();\n  const scratchService = new ScratchService();\n\n  const handleReveal = useCallback(async (reward?: unknown) => {\n    setIsRevealed(true);\n    setShowModal(true);\n    \n    if (reward) {\n      await scratchService.saveScratchResult({\n        userId: 'current-user',\n        reward: {\n          type: reward.type as 'points' | 'coupon',\n          amount: reward.amount,\n          label: reward.label,\n        },\n        isWinner: true,\n      });\n    }\n    \n    markUsed();\n  }, [markUsed, scratchService]);\n\n  const handleProgress = useCallback((newProgress: number) => {\n    setProgress(newProgress);\n  }, []);\n\n  const handleCloseModal = useCallback(() => {\n    setShowModal(false);\n  }, []);\n\n  const handleReplay = useCallback(() => {\n    setShowModal(false);\n    setIsRevealed(false);\n    setProgress(0);\n    window.location.reload();\n  }, []);\n\n  return {\n    isRevealed,\n    showModal,\n    progress,\n    state,\n    handleReveal,\n    handleProgress,\n    handleCloseModal,\n    handleReplay,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/logic/hooks/useScratchState.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'readStorage'. Either exclude it or remove the dependency array. Outer scope values like 'readStorage' aren't valid dependencies because mutating them doesn't re-render the component.","line":36,"column":4,"nodeType":"ArrayExpression","endLine":36,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[978,991],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'addEventListener'. Either exclude it or remove the dependency array. Outer scope values like 'addEventListener' aren't valid dependencies because mutating them doesn't re-render the component.","line":40,"column":4,"nodeType":"ArrayExpression","endLine":40,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1071,1089],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'removeEventListener'. Either exclude it or remove the dependency array. Outer scope values like 'removeEventListener' aren't valid dependencies because mutating them doesn't re-render the component.","line":44,"column":4,"nodeType":"ArrayExpression","endLine":44,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1175,1196],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback requires an effect callback. Did you forget to pass a callback to the hook?","line":60,"column":3,"nodeType":"Identifier","endLine":60,"endColumn":14},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":60,"column":3,"nodeType":"Identifier","endLine":60,"endColumn":14},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'useCallback'. Either exclude it or remove the dependency array. Outer scope values like 'useCallback' aren't valid dependencies because mutating them doesn't re-render the component.","line":61,"column":4,"nodeType":"ArrayExpression","endLine":61,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1609,1622],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'writeStorage'. Either exclude it or remove the dependency array. Outer scope values like 'writeStorage' aren't valid dependencies because mutating them doesn't re-render the component.","line":65,"column":4,"nodeType":"ArrayExpression","endLine":65,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1694,1708],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { ScratchState } from '../types';\n\nconst STORAGE_KEY = 'k-scratch';\n\nfunction readStorage(): ScratchState {\n  if (typeof window === 'undefined') return { available: false, used: true };\n  try {\n    const raw = localStorage.getItem(STORAGE_KEY);\n    if (!raw) return { available: false, used: true };\n    const data = JSON.parse(raw) as ScratchState;\n    return {\n      available: Boolean(data.available),\n      used: Boolean(data.used),\n      reward: data.reward,\n      ticketId: data.ticketId,\n    };\n  } catch {\n    return { available: false, used: true };\n  }\n}\n\nfunction writeStorage(state: ScratchState) {\n  if (typeof window === 'undefined') return;\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n}\n\nexport function useScratchState() {\n  const [state, setState] = useState<ScratchState>(() => readStorage());\n\n  \nconst stableReadStorage = useCallback(() => {\n  readStorage();\n}, [readStorage]);\n\nconst stableAddEventListener = useCallback(() => {\n  addEventListener();\n}, [addEventListener]);\n\nconst stableRemoveEventListener = useCallback(() => {\n  removeEventListener();\n}, [removeEventListener]);\n\n\nconst stableStableReadStorage = useCallback(() => {\n  stableReadStorage();\n}, [stableReadStorage]);\n\nconst stableStableAddEventListener = useCallback(() => {\n  stableAddEventListener();\n}, [stableAddEventListener]);\n\nconst stableStableRemoveEventListener = useCallback(() => {\n  stableRemoveEventListener();\n}, [stableRemoveEventListener]);\n\nconst stableUseCallback = useCallback(() => {\n  useCallback();\n}, [useCallback]);\n\nconst stableWriteStorage = useCallback(() => {\n  writeStorage();\n}, [writeStorage]);\n\nuseEffect(() => {\n  stableStableReadStorage();\n  stableStableAddEventListener();\n  stableStableRemoveEventListener();\n  stableUseCallback();\n  stableWriteStorage();\n}, [stableStableReadStorage, stableStableAddEventListener, stableStableRemoveEventListener, stableUseCallback, stableWriteStorage]);;\n\n  const markUsed = useCallback(() => {\n    const newState: ScratchState = { ...state, available: false, used: true };\n    writeStorage(newState);\n    setState(newState);\n  }, [state]);\n\n  const clear = useCallback(() => {\n    const newState: ScratchState = { available: false, used: true };\n    writeStorage(newState);\n    setState(newState);\n  }, []);\n\n  const refresh = useCallback(() => {\n    setState(readStorage());\n  }, []);\n\n  return { \n    state, \n    activate, \n    markUsed, \n    clear, \n    refresh \n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/logic/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/ui/components/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/ui/components/Modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/ui/components/ScratchActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/ui/components/ScratchCardContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/ui/components/ScratchCardUI.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isRevealed' is defined but never used. Allowed unused args must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { ScratchCanvas } from '../../canvas/components/ScratchCanvas';\nimport { Modal } from './Modal';\nimport { Button } from '@/components/ui/button';\nimport { Card } from './Layout';\n\ninterface ScratchCardUIProps {\n  reward?: {\n    type: string;\n    amount: number;\n    label: string;\n  };\n  isRevealed: boolean;\n  showModal: boolean;\n  progress: number;\n  onReveal: () => void;\n  onProgress: (progress: number) => void;\n  onCloseModal: () => void;\n  onReplay: () => void;\n}\n\n// UI pure = affichage seulement\nexport function ScratchCardUI({\n  reward,\n  isRevealed,\n  showModal,\n  progress,\n  onReveal,\n  onProgress,\n  onCloseModal,\n  onReplay,\n}: ScratchCardUIProps) {\n  return (\n    <div className=\"space-y-4\">\n      <Card className=\"text-center\">\n        <h2 className=\"text-xl font-semibold text-[#212E40] mb-4\">\n          🎫 Ticket à gratter\n        </h2>\n        \n        <ScratchCanvas\n          onReveal={onReveal}\n          onProgress={onProgress}\n          reward={reward}\n        />\n        \n        <div className=\"mt-4\">\n          <p className=\"text-sm text-gray-600\">\n            Progression: {Math.round(progress * 100)}%\n          </p>\n        </div>\n      </Card>\n\n      <Modal\n        isOpen={showModal}\n        onClose={onCloseModal}\n        title=\"🎉 Félicitations !\"\n        size=\"md\"\n      >\n        <div className=\"text-center space-y-4\">\n          <div className=\"text-6xl\">🎁</div>\n          <h3 className=\"text-2xl font-bold text-[#17BFA0]\">\n            {reward?.label || '+50 points'}\n          </h3>\n          <p className=\"text-gray-600\">\n            Vous avez gagné {reward?.amount || 50} points !\n          </p>\n          \n          <div className=\"flex gap-3 justify-center\">\n            <Button variant=\"secondary\" onClick={onCloseModal}>\n              Fermer\n            </Button>\n            <Button onClick={onReplay}>\n              Rejouer\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/ui/components/ScratchStateDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/layers/ui/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/confettiEffects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/ds/tokens.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/emojiAllPresets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/emojiEntryPresets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/emojiExitPresets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/emojiMajesticPresets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/emojiPresets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/emojiPresetsTikTok.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/emojiRain.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/emojiSlowPresets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/emojiSpeedDensityPresets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/emojiSpeedPresets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/emojiWowPresetsTikTok.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/fetcher.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/forms.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/kanpa-theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/supabase-browser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/supabase-server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/supabase.client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/supabase.errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/supabase.toast.ts","messages":[{"ruleId":"import/named","severity":2,"message":"normalizeSupaError not found in '@/lib/supabase.errors'","line":5,"column":10,"nodeType":"Identifier","endLine":5,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport type { Locale } from \"@/i18n\";\nimport { createAsyncT } from \"@/i18n\";\nimport { toast } from \"sonner\";\nimport { normalizeSupaError } from \"@/lib/supabase.errors\";\n\nexport async function toastSupaError(locale: Locale, error: unknown) {\n  const { t } = await createAsyncT(locale, [\"common\"]);\n  const norm = normalizeSupaError(error);\n  const key = `common.api.errors.${norm.code}`;\n  const msg = t(key);\n  toast.error(msg.startsWith(\"[missing]\") ? t(\"common.toasts.error\") : msg, { duration: 5500 });\n}\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/supabaseClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/supabaseServer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/theme/preset.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/useSupa.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/stories/Header.stories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/stories/Header.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module './button'.","line":1,"column":24,"nodeType":"Literal","endLine":1,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from './button';\nimport './header.css';\n\ntype User = {\n  name: string;\n};\n\nexport interface HeaderProps {\n  user?: User;\n  onLogin?: () => void;\n  onLogout?: () => void;\n  onCreateAccount?: () => void;\n}\n\nexport const Header = ({ user, onLogin, onLogout, onCreateAccount }: HeaderProps) => (\n  <header>\n    <div className=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        {user ? (\n          <>\n            <span className=\"welcome\">\n              Welcome, <b>{user.name}</b>!\n            </span>\n            <Button size=\"small\" onClick={onLogout} label=\"Log out\" />\n          </>\n        ) : (\n          <>\n            <Button size=\"small\" onClick={onLogin} label=\"Log in\" />\n            <Button primary size=\"small\" onClick={onCreateAccount} label=\"Sign up\" />\n          </>\n        )}\n      </div>\n    </div>\n  </header>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/stories/Page.stories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/stories/Page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/templates/PageTemplate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/types/quiz.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/types/scratch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/ui/toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/ui/useToastI18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/ui/withToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/utils/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/frantz/Desktop/padavwa/src/utils/supabase/server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
