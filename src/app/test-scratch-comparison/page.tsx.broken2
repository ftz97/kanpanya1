"use client";

import React, { useState } from "react";
import { useScratchAvailability } from "@/hooks/useScratchAvailability";
import SadEmojiRain from "@/components/SadEmojiRain";
import HappyEmojiRain from "@/components/HappyEmojiRain";
import MoneyEmojiRain from "@/components/MoneyEmojiRain";

// Ancien code scratch (Version 1 - Canvas Custom) - AM√âLIOR√â
function OldScratchCard() {
  const canvasRef = React.useRef<HTMLCanvasElement>(null);
  const containerRef = React.useRef<HTMLDivElement>(null);

  // √©tat
  const [isWinner] = useState<boolean>(Math.random() > 0.5);
  const [variation, setVariation] = useState<string>("");
  const [revealed, setRevealed] = useState(false);
  const [popupVisible, setPopupVisible] = useState(false);
  const [popupClosing, setPopupClosing] = useState(false);
  const [prize, setPrize] = useState("");
  const [reward, setReward] = useState<{ type: string; amount: number }>({ type: "none", amount: 0 });

  // √âtat pour emojis
  const [showSadEmojis, setShowSadEmojis] = useState(false);
  const [showHappyEmojis, setShowHappyEmojis] = useState(false);
  const [showMoneyEmojis, setShowMoneyEmojis] = useState(false);

  const lastPos = React.useRef<{ x: number; y: number } | null>(null);
  const lastCheck = React.useRef<number>(0);

  const WIN_VARIATIONS = [
    "üéâ Bravo, tu repars avec une r√©compense !",
    "üèÜ C'est gagn√© !",
    "‚ú® Quelle chance, tu as gagn√© !",
    "üíé Jackpot, f√©licitations !",
  ];
  const LOSE_VARIATIONS = [
    "üò¢ Pas de chance cette fois...",
    "üíî Dommage, retente ta chance bient√¥t !",
    "üôÉ Ce n'est pas gagn√© aujourd'hui...",
    "üòî Tu feras mieux la prochaine fois !",
  ];

  function getRandomPrize(won: boolean) {
    if (!won) return { type: "none", amount: 0 };
    const POINTS = [50, 100, 200];
    const REDUCTIONS = [5, 10, 15]; // en %
    if (Math.random() < 0.5) {
      return { type: "points", amount: POINTS[Math.floor(Math.random() * POINTS.length)] };
    } else {
      return { type: "reduction", amount: REDUCTIONS[Math.floor(Math.random() * REDUCTIONS.length)] };
    }
  }

  // Init texte
const stableSetVariation = useCallback(() => {
  setVariation();
}, [setVariation]);

const stableFloor = useCallback(() => {
  floor();
}, [floor]);

const stableRandom = useCallback(() => {
  random();
}, [random]);


function NewScratchCard() {
  const [showSadEmojis, setShowSadEmojis] = useState(false);
  const [showHappyEmojis, setShowHappyEmojis] = useState(false);
  const [showMoneyEmojis, setShowMoneyEmojis] = useState(false);
  
  const emojiConfig = {
    count: 20,
    speedConfig: { duration: 3, delay: 1.5 }
  };

  const reward = { type: 'points' as const, amount: 50, label: '+50 points' };

  const settings = {
    width: 320,
    height: 200,
    image: "/scratch-overlay.png",
    finishPercent: 50,
    onComplete: () => {
      console.log("üéâ Scratch termin√© :", reward.label);
      
      confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } });
      
      if (reward.type === "gift" || reward.amount >= 50) {
        setShowMoneyEmojis(true);
        setTimeout(() => setShowMoneyEmojis(false), 5000);
      } else if (reward.amount > 0) {
        setShowHappyEmojis(true);
        setTimeout(() => setShowHappyEmojis(false), 5000);
      } else {
        setShowSadEmojis(true);
        setTimeout(() => setShowSadEmojis(false), 5000);
      }
    },
  };

  return (
    <div className="p-6 bg-gray-100 rounded-xl shadow relative text-center">
      <h2 className="text-lg font-bold mb-3 text-green-600">üü¢ NOUVEAU CODE (Librairie)</h2>
      <p className="text-gray-600 mb-4">Grattez pour d√©couvrir !</p>
      <ScratchCard {...settings}>
        <div className="w-full h-full flex items-center justify-center bg-white rounded-xl shadow">
          <p className="text-xl font-bold text-teal-600">{reward.label}</p>
        </div>
      </ScratchCard>
      
      {showSadEmojis && <SadEmojiRain count={emojiConfig.count} speedConfig={emojiConfig.speedConfig} />}
      {showHappyEmojis && <HappyEmojiRain count={emojiConfig.count} speedConfig={emojiConfig.speedConfig} />}
      {showMoneyEmojis && <MoneyEmojiRain count={emojiConfig.count} speedConfig={emojiConfig.speedConfig} />}
    </div>
  );
}

export default function TestScratchComparison() {
  const { state, activate, markUsed, clear } = useScratchAvailability();

  const resetOldCard = () => {
    window.location.reload();
  };

  const resetNewCard = () => {
    clear();
    activate({ quizId: 'test', points: 50, label: '+50 points' });
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            üéüÔ∏è Comparaison des Codes Scratch
          </h1>
          <p className="text-gray-600 max-w-2xl mx-auto">
            Testez c√¥te √† c√¥te l&apos;ancien code (Canvas custom) et le nouveau code (Librairie react-scratchcard-v2)
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Ancien Code */}
          <div className="bg-white rounded-2xl shadow-lg p-6">
            <div className="mb-4">
              <h3 className="text-xl font-semibold text-red-600 mb-2">
                üî¥ Ancien Code AM√âLIOR√â (Canvas + Emojis)
              </h3>
              <div className="text-sm text-gray-600 space-y-1">
                <p>‚Ä¢ ~250 lignes de code</p>
                <p>‚Ä¢ Gestion manuelle des √©v√©nements</p>
                <p>‚Ä¢ Calculs optimis√©s (√©chantillonnage)</p>
                <p>‚Ä¢ Animations d&apos;emojis int√©gr√©es</p>
                <p>‚Ä¢ Syst√®me de r√©compenses avanc√©</p>
                <p>‚Ä¢ Bouton de fermeture popup</p>
              </div>
            </div>
            <OldScratchCard />
            <button 
              onClick={resetOldCard}
              className="mt-4 px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition"
            >
              üîÑ R√©initialiser
            </button>
          </div>

          {/* Nouveau Code */}
          <div className="bg-white rounded-2xl shadow-lg p-6">
            <div className="mb-4">
              <h3 className="text-xl font-semibold text-green-600 mb-2">
                üü¢ Nouveau Code (Librairie)
              </h3>
              <div className="text-sm text-gray-600 space-y-1">
                <p>‚Ä¢ ~80 lignes de code</p>
                <p>‚Ä¢ Librairie √©prouv√©e</p>
                <p>‚Ä¢ Optimisations int√©gr√©es</p>
                <p>‚Ä¢ Configuration simple</p>
                <p>‚Ä¢ Animations confettis + emojis</p>
              </div>
            </div>
            <NewScratchCard />
            <button 
              onClick={resetNewCard}
              className="mt-4 px-4 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition"
            >
              üîÑ R√©initialiser
            </button>
          </div>
        </div>

        {/* Comparaison d√©taill√©e */}
        <div className="mt-12 bg-white rounded-2xl shadow-lg p-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-6 text-center">
            üìä Analyse Comparative
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div>
              <h3 className="text-lg font-semibold text-red-600 mb-4">‚ùå Ancien Code - Probl√®mes</h3>
              <ul className="space-y-2 text-sm text-gray-600">
                <li>‚Ä¢ Code complexe et difficile √† maintenir</li>
                <li>‚Ä¢ Gestion manuelle des √©v√©nements mouse/touch</li>
                <li>‚Ä¢ Calculs de pourcentage intensifs</li>
                <li>‚Ä¢ ResizeObserver avec logique custom</li>
                <li>‚Ä¢ Animations CSS inline avec styled-jsx</li>
                <li>‚Ä¢ Gestion d&apos;√©tat complexe</li>
                <li>‚Ä¢ Bugs potentiels sur mobile</li>
                <li>‚Ä¢ Performance d√©grad√©e</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-lg font-semibold text-green-600 mb-4">‚úÖ Nouveau Code - Avantages</h3>
              <ul className="space-y-2 text-sm text-gray-600">
                <li>‚Ä¢ Code simple et lisible</li>
                <li>‚Ä¢ Librairie test√©e et √©prouv√©e</li>
                <li>‚Ä¢ Optimisations de performance int√©gr√©es</li>
                <li>‚Ä¢ Configuration d√©clarative</li>
                <li>‚Ä¢ Animations confettis + emojis</li>
                <li>‚Ä¢ Gestion d&apos;√©tat simplifi√©e</li>
                <li>‚Ä¢ Compatibilit√© mobile native</li>
                <li>‚Ä¢ Maintenance r√©duite</li>
              </ul>
            </div>
          </div>
        </div>

        {/* Instructions */}
        <div className="mt-8 bg-blue-50 rounded-2xl p-6">
          <h3 className="text-lg font-semibold text-blue-900 mb-3">üéØ Instructions de Test</h3>
          <div className="text-sm text-blue-800 space-y-2">
            <p>1. <strong>Testez l&apos;ancien code :</strong> Grattez la zone grise pour r√©v√©ler le contenu</p>
            <p>2. <strong>Testez le nouveau code :</strong> Grattez l&apos;image overlay pour r√©v√©ler les points</p>
            <p>3. <strong>Comparez :</strong> Fluidit√©, r√©activit√©, animations</p>
            <p>4. <strong>Mobile :</strong> Testez sur mobile pour voir la diff√©rence</p>
            <p>5. <strong>Performance :</strong> Ouvrez les DevTools pour comparer les performances</p>
          </div>
        </div>
      </div>

      <style jsx>{`
        @keyframes slideInBounce {
          0% {
            transform: translate(-50%, -200%);
            opacity: 0;
          }
          50% {
            transform: translate(-50%, -50%);
            opacity: 1;
          }
          70% {
            transform: translate(-50%, -55%);
          }
          100% {
            transform: translate(-50%, -50%);
          }
        }
        @keyframes slideOutUp {
          0% {
            transform: translate(-50%, -200%);
            opacity: 1;
          }
          100% {
            transform: translate(-50%, -200%);
            opacity: 0;
          }
        }
        .animate-slide-in {
          animation: slideInBounce 1.2s ease-out forwards;
        }
        .animate-slide-out {
          animation: slideOutUp 1s ease-in forwards;
        }
      `}</style>
    </div>
  );
}
