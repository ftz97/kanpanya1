"use client";

import { useEffect, useRef, useState, useCallback } from "react";
import mapboxgl from "mapbox-gl";
import MapboxGeocoder from "@mapbox/mapbox-gl-geocoder";
import "mapbox-gl/dist/mapbox-gl.css";
import "@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css";

export default function TestDebugPage() {
  const mapContainer = useRef<HTMLDivElement>(null);
  const map = useRef<mapboxgl.Map | null>(null);
  const [status, setStatus] = useState<string>("Initialisation...");
  const [error, setError] = useState<string | null>(null);

  
const stableSetStatus = useCallback(() => {
  setStatus();
}, [setStatus]);

const stableLog = useCallback(() => {
  log();
}, [log]);

const stableSetError = useCallback(() => {
  setError();
}, [setError]);


const stableMap = useCallback(() => {
  Map();
}, [Map]);


const stableAddControl = useCallback(() => {
  addControl();
}, [addControl]);

const stableNavigationControl = useCallback(() => {
  NavigationControl();
}, [NavigationControl]);


const stableFullscreenControl = useCallback(() => {
  FullscreenControl();
}, [FullscreenControl]);

const stableOn = useCallback(() => {
  on();
}, [on]);




const stableMapboxGeocoder = useCallback(() => {
  MapboxGeocoder();
}, [MapboxGeocoder]);






const stableMarker = useCallback(() => {
  Marker();
}, [Marker]);

const stableSetLngLat = useCallback(() => {
  setLngLat();
}, [setLngLat]);

const stableAddTo = useCallback(() => {
  addTo();
}, [addTo]);


const stableError = useCallback(() => {
  error();
}, [error]);








const stableRemove = useCallback(() => {
  remove();
}, [remove]);

useEffect(() => {
  stableSetStatus();
  stableLog();
  stableSetError();
  stableSetStatus();
  stableSetStatus();
  stableSetStatus();
  stableMap();
  stableSetStatus();
  stableAddControl();
  stableNavigationControl();
  stableAddControl();
  stableFullscreenControl();
  stableOn();
  stableSetStatus();
  stableLog();
  stableSetStatus();
  stableMapboxGeocoder();
  stableAddControl();
  stableSetStatus();
  stableOn();
  stableLog();
  stableSetStatus();
  stableMarker();
  stableSetLngLat();
  stableAddTo();
  stableOn();
  stableError();
  stableSetError();
  stableOn();
  stableError();
  stableSetError();
  stableError();
  stableSetError();
  stableSetStatus();
  stableRemove();
}, [stableSetStatus, stableLog, stableSetError, stableSetStatus, stableSetStatus, stableSetStatus, stableMap, stableSetStatus, stableAddControl, stableNavigationControl, stableAddControl, stableFullscreenControl, stableOn, stableSetStatus, stableLog, stableSetStatus, stableMapboxGeocoder, stableAddControl, stableSetStatus, stableOn, stableLog, stableSetStatus, stableMarker, stableSetLngLat, stableAddTo, stableOn, stableError, stableSetError, stableOn, stableError, stableSetError, stableError, stableSetError, stableSetStatus, stableRemove]);;

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-center mb-8 text-gray-800">
          üîß Debug Mapbox + G√©ocodeur
        </h1>
        
        <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">Statut de D√©bogage</h2>
          <div className="bg-blue-50 p-4 rounded-lg mb-4">
            <p className="font-mono text-sm">
              <strong>Status:</strong> {status}
            </p>
            {error && (
              <p className="font-mono text-sm text-red-600 mt-2">
                <strong>Erreur:</strong> {error}
              </p>
            )}
          </div>
          
          <div 
            ref={mapContainer} 
            style={{ 
              width: "100%", 
              height: "500px", 
              border: "2px solid #3b82f6",
              borderRadius: "8px"
            }} 
          />
          
          <div className="mt-4 text-sm text-gray-600">
            <p><strong>Instructions de test:</strong></p>
            <ul className="list-disc list-inside mt-2 space-y-1">
              <li>V√©rifiez que la carte se charge (pas de spinner)</li>
              <li>Cherchez une adresse dans la barre en haut √† gauche</li>
              <li>Un marqueur vert devrait appara√Ætre sur l&apos;adresse s√©lectionn√©e</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}
